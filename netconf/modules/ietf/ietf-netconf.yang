module ietf-netconf {

   namespace "urn:ietf:params:xml:ns:netconf:base:1.0";

   prefix nc;

   // for the uri data type
   import ietf-inet-types { prefix inet; }

   description 
    "NETCONF Protocol Data Types and RPC methods.

     Copyright (c) 2009 IETF Trust and the persons identified as
     the document authors.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, are permitted provided that the
     following conditions are met:

     - Redistributions of source code must retain the above
       copyright notice, this list of conditions and the
       following disclaimer.

     - Redistributions in binary form must reproduce the above
       copyright notice, this list of conditions and the
       following disclaimer in the documentation and/or other
       materials provided with the distribution.

     - Neither the name of Internet Society, IETF or IETF
       Trust, nor the names of specific contributors, may be
       used to endorse or promote products derived from this
       software without specific prior written permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
     CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED
     WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
     GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
     BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
     OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

   // RFC Ed.: replace XXXX with actual RFC number and remove this note

   reference "draft-ietf-netconf-rfc4741bis-01.txt";

   contact
     "Send comments to the NETCONF WG mailing list.
      <netconf@ietf.org>";

   revision 2009-06-27 {
     description 
       "Initial version";
   }

   extension get-filter-element-attributes {
      description
        "If this extension is present within the
         an 'anyxml' statement named 'filter', which must be
         conceptually defined within the RPC input section
         for the 'get' and 'get-config' RPC operations,
         then the following unqualified XML attribute is
         supported within the 'filter' element, within
         a 'get' or 'get-config' protocol operation:

           type : optional attribute with allowed
                  value strings 'subtree' and 'xpath'.
                  If missing, the default value is 'subtree'.

         If the xpath feature is supported, then the
         following unqualified XML attribute is
         also supported:

           select: optional attribute containing a
                   string representing an XPath expression.
                   The 'type' attribute must be equal to 'xpath'
                   if this attribute is present.";
   }

   // NETCONF capabilities defined as features
   feature writable-running {
       description 
         "NETCONF :writable-running capability;
          If the agent advertises the :writable-running
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       // RFC Ed.: replace XXXX with actual RFC number and 
       // remove this note
       reference "RFC XXXX, section #X#Writable-Running Capability#";
   }

   feature candidate {
       description 
         "NETCONF :candidate capability;
          If the agent advertises the :candidate
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       reference "RFC 4741, section 8.3";
   }

   feature confirmed-commit {
       description 
         "NETCONF :confirmed-commit capability;
          If the agent advertises the :cornfirmed-commit
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";

       reference "RFC 4741, section 8.4";
       if-feature candidate;
   }

   feature rollback-on-error {
       description 
         "NETCONF :rollback-on-error capability;
          If the agent advertises the :rollback-on-error
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       reference "RFC 4741, section 8.5";
   }

   feature validate {
       description 
         "NETCONF :validate:1.0 capability;
          If the agent advertises the :validate:1.0
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       reference "RFC 4741, section 8.6";
   }

   feature validate-1.1 {
     if-feature validate;
       description 
         "NETCONF :validate:1.1 capability;
          If the agent advertises the :validate:1.1
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       reference "RFC XXXX, ";
   }

   feature startup {
       description 
         "NETCONF :startup capability;
          If the agent advertises the :startup
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       reference "RFC 4741, section 8.7";
   }

   feature url {
       description 
         "NETCONF :url capability;
          If the agent advertises the :url
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       reference "RFC 4741, section 8.8";
   }

   feature xpath {
       description 
         "NETCONF :xpath capability;
          If the agent advertises the :xpath
          capability for a session, then this feature must
          also be enabled for that session.  Otherwise,
          this feature must not be enabled.";
       reference "RFC 4741, section 8.9";
   }

   // NETCONF Simple Types

   typedef session-id-type {
     description "NETCONF Session Id";
     type uint32 {
       range "1..max"; 
     }
   }

   typedef session-id-or-zero-type {
     description 
       "NETCONF Session Id or Zero to indicate none";
     type uint32; 
   }

   // NETCONF Standard RPC Methods

   rpc get-config {
      description
        "Retrieve all or part of a specified configuration.";

      reference "RFC 4741, section 7.2";

      input {
        container source {
          description "Particular configuration to retrieve.";

          choice config-source {
            mandatory true;

            leaf candidate {
              if-feature candidate;
              type empty;
            }
            leaf running {
              type empty;
            }
            leaf startup {
              if-feature startup;
              description
                "This is optional-to-implement on the agent because
                 not all agents will support filtering for this 
                 database.";
              type empty;
            }
            leaf url {
              if-feature url;
              type inet:uri;      
            }
          }
        }

        anyxml filter {
          description "Subtree or Xpath filter to use.";
          nc:get-filter-element-attributes;
        }
      }

      output {
        container data {
          description 
            "Copy of the source database subset which matched
             the filter criteria (if any).";
          presence 
            "An empty data container indicates that the
             request did not produce any results.";
       }
     }
   }

   rpc edit-config {
      description
        "The 'edit-config' operation loads all or part of a specified
         configuration to the specified target configuration.";

      reference "RFC 4741, section 7.2";

      input {
        container target {
          description "Particular configuration to edit.";

          choice config-target {
            mandatory true;

            leaf candidate {
              if-feature candidate;
              type empty;
            }
            leaf running {
              if-feature writable-running;
              type empty;
            }
          }
        }

        leaf default-operation {
          type enumeration { 
            enum merge;
            enum replace;
            enum none;
          }
          default "merge";
        }

        leaf test-option {
          if-feature validate;
          type enumeration {
            enum test-then-set;
            enum set;
            enum test-only {
              description
               "This value can only be used if the 'validate-1.1' 
                feature is supported.";
            }
          }
        }

        leaf error-option {
          type enumeration { 
            enum stop-on-error;
            enum continue-on-error;
            enum rollback-on-error {
              description
               "This value can only be used if the 'rollback-on-error'
                feature is supported.";
            }
          }
          default "stop-on-error";
        }

        choice edit-content {
          mandatory true;
          anyxml config {
            description 
              "Inline Config content: 'config' element.
               This is not full 'anyxml' because the <config>
               element cannot directly contain a text node.";
          }
          leaf url {
            if-feature url;
            description 
              "Pointer to Config content: 'url' element.";
            type inet:uri;
          }
        }
      }
   }

   rpc copy-config {
      description
        "Create or replace an entire configuration datastore with the
         contents of another complete configuration datastore.";

      reference "RFC 4741, section 7.3";

      input {
        container target {
          description "Particular configuration to copy to.";

          choice config-target {
            mandatory true;

            leaf candidate {
              if-feature candidate;
              type empty;
            }
            leaf running {
              if-feature writable-running;
              description
                "This is optional-to-implement on the agent.";
              type empty;
            }
            leaf startup {
              if-feature startup;
              type empty;
            }
            leaf url {
              if-feature url;
              type inet:uri;
            }
          }
        }

        container source {
          description "Particular configuration to copy from.";

          choice config-source {
            mandatory true;

            leaf candidate {
              if-feature candidate;
              type empty;
            }
            leaf running {
              type empty;
            }
            leaf startup {
              if-feature startup;
              type empty;
            }
            leaf url {
              if-feature url;
              type inet:uri;
            }
            anyxml config {
              description 
                "Inline Config content: 'config' element.
                 Represents an entire 'stand-alone' 
                 configuration database, not a subset of 
                 the running database.";
            }
          }
        }
      }
   }

   rpc delete-config {
      description
        "Delete a configuration datastore.";

      reference "RFC 4741, section 7.4";

      input {
        container target {
          description "Particular configuration to delete.";

          choice config-target {
            mandatory true;

            leaf startup {
              if-feature startup;
              type empty;
            }
            leaf url {
              if-feature url;
              type inet:uri;
            }
          }
        }
      }
   }

   rpc lock {
      description
        "The lock operation allows the client to lock the configuration
         system of a device.";

      reference "RFC 4741, section 7.5";

      input {
        container target {
          description "Particular configuration to lock";

          choice config-target {
            mandatory true;

            leaf candidate {
              if-feature candidate;
              type empty;
            }
            leaf running {
              type empty;
            }
            leaf startup {
              if-feature startup;
              type empty;
            }
            leaf url {
              if-feature url;
              type inet:uri;
            }
          }
        }
      }
   }

   rpc unlock {
      description
        "The unlock operation is used to release a configuration lock,
         previously obtained with the 'lock' operation.";

      reference "RFC 4741, section 7.6";

      input {
        container target {
          description "Particular configuration to unlock.";

          choice config-target {
            mandatory true;

            leaf candidate {
              if-feature candidate;
              type empty;
            }
            leaf running {
              type empty;
            }
            leaf startup {
              if-feature startup;
              type empty;
            }
            leaf url {
              if-feature url;
              type inet:uri;
            }
          }
        }
      }
   }

   rpc get {
      description
        "Retrieve running configuration and device state information.";

      reference "RFC 4741, section 7.7";

      input {
        anyxml filter {
          description
            "This parameter specifies the portion of the system
             configuration and state data to retrieve.";
          nc:get-filter-element-attributes;
        }
      }

      output {
        container data {
          description 
            "Copy of the 'running' database subset and/or state 
             data which matched the filter criteria (if any).";
          presence 
            "An empty data container indicates that the filter
             request did not match any results.";
        }
      }
   }

   rpc close-session {
      description
        "Request graceful termination of a NETCONF session.";

      reference "RFC 4741, section 7.8";
   }

   rpc kill-session {
      description
        "Force the termination of a NETCONF session.";

      reference "RFC 4741, section 7.9";

      input {
        leaf session-id {
          description "Particular session to kill.";
          type session-id-type;
          mandatory true;
        }
      }
   }

   rpc commit {
      if-feature candidate;

      description
        "Commit the candidate configuration as the device's new
         current configuration";

      reference "RFC 4741, section 8.3.4.1";

      input {
        leaf confirmed {
          if-feature confirmed-commit;
          reference "RFC 4741, section 8.4.5.1";
          type empty;
        }

        leaf confirm-timeout {
          if-feature confirmed-commit;
          reference "RFC 4741, section 8.4.5.1";
          type uint32 { 
            range "1..max";
          }
          units "seconds";
          default "600";   // 10 minutes
        }
      }
   }

   rpc discard-changes {
      if-feature candidate;

      description
        "Revert the candidate configuration to the current 
         running configuration.";

      reference "RFC 4741, section 8.3.4.2";
   }

   rpc validate {
     if-feature validate;

      description
         "Validates the contents of the specified configuration.";

      reference "RFC 4741, section 8.6.4.1";

      input {
        container source {
          description "Particular configuration to validate.";

          choice config-source {
            mandatory true;

            leaf candidate {
              if-feature candidate;
              type empty;
            }
            leaf running {
              // ed: not sure why this is here, since the
              // running config should be valid all the time
              type empty;
            }
            leaf startup {
              if-feature startup;
              type empty;
            }
            leaf url {
              if-feature url;
              type inet:uri;
            }
            anyxml config {
              description 
                "Inline Config content: 'config' element.
                 Represents an entire 'stand-alone' 
                 configuration database, not a subset of 
                 the running database.";
            }
          }
        }
      }
   }

}


