 module ietf-ipfix-psamp {
   namespace "urn:ietf:params:xml:ns:ietf-ipfix-psamp";
   prefix ipfix;

   import ietf-yang-types { prefix yang; }
   import ietf-inet-types { prefix inet; }

   organization "IPFIX WG";
   contact "muenz@net.in.tum.de";

   description "IPFIX/PSAMP Configuration Data Model";

   revision 2009-10-23 {
     description "Version of draft-ietf-ipfix-configuration-model-04
       Changes in draft-ietf-ipfix-configuration-model-04:
       - descriptions and references added in various places,
         especially for state parameters
       - enum types cacheMode, exportMemberType, optionsType replaced
         by identities in order to facilitate the addition of new
         values using YANG deviations
       - Selector parameters revised:
         - parameter names now correspond to Information Element
           names
         - single matching value instead of range in filterMatch
           (which is consistent with Selector Report Interpretation)
         - filterHash parameters adapted to PSAMP RFCs
         - sampNonUniProb, sampFlowState, filterRState removed
           (a Selector Report Interpretation does not exist, yet)
       - some must statements replaced by choices, which is easier
         to read
       - orderedDelivery parameter removed, better add a parameter
         for activating per-sctp stream later
       - YANG data type timeticks replaced by uint32 and unit
         milliseconds
       - configuration of fields included in an Options Template
         removed because there is no real use-case
       - observationPointId, selectionSequenceId, and selectorId are
         now state parameters (i.e., not configurable any more)
         because there is no real use-case to configure them
       - meaning of configuration parameters activeTimeout and
         inactiveTimeout clarified
       - several additional must statements enforcing certain
         configuration restrictions
       Changes in draft-ietf-ipfix-configuration-model-03:
       - list of used or received templates now inside transport
         session container because templates are defined per transport
         session
       - transport session: removed 'index', added missing 'protocol'
       - exportingProcessId removed
       - Transport Session state data can be used for File Readers
         and File Writers
       - module name changed
       - Renaming: cacheType => cacheMode,
         Options' type => optionsType,
         Destination's/FileWriter's type => exportMemberType,
         uri => file, optionTemplate => optionsTemplate,
         optionField => optionsField
       - transport layer security parameters added to Destination
         class and Receiver class
       - must statements ensure that Selection Processes and Caches
         process packets of a single Observation Domain (as long as
         Selection Processes are not cascaded)
       - replaced default value of port by description because the
         value differs in the case of DTLS/TLS
       Changes in draft-ietf-ipfix-configuration-model-02:
       - conformance to draft-ietf-netmod-yang-03 and
         draft-ietf-netmod-yang-types-01
       - canonical form
       - observationDomainId is now mandatory parameter
       - usage of YANG features
       - renamed parameter 'idleTimeout' in 'inactiveTimeout'
       - state data: Selector statistics, Cache statistics, Templates,
         Transport Sessions
       - Exporting Process: new structure of destination, fileWriter
       - Collecting Process: new structure of receiver, fileReader
       - more groupings and typedefs
       - options configured per Exporting Process, not per
         destination
       - verified optional parameters, added default values or
         description clause if necessary
       Changes in draft-ietf-ipfix-configuration-model-01:
       - separation of Selectors and Selection Processes as in PSAMP
         documents
       - parameter modifications in filterMatch
       - new rateLimit parameter in destinations of Exporting Process
       - Cache Type 'normal' now called 'timeout'
       Changes in draft-ietf-ipfix-configuration-model-00:
       - Metering Process container replaced by direct reference to
         Selection Process
       - meteringProcessId parameter disappears together with the
         Metering Process container
       - concatenation of Selection Processes realize Selection
         Sequence
       - removal of premature support of
         IPFIX Mediators/Concentrators.
       - more SCTP parameters in SctpReceiver and SctpExport classes
       - sendBufferSize parameter for all *Export classes
       - templateId no longer configuration parameter
       Changes in draft-muenz-ipfix-configuration-04:
       - first version in yang
       - Collecting Process can be configured for file import
       - Collecting Process can be configured to export received
         records without modifications (e.g., to file or other
         collectors)
       - SCTP export parameter timedReliability
       - parameter for eligible local IP addresses for SCTP endpoint
       - all tags names uncapitalized, types names etc. capitalized
       - CacheParameters renamed as Cache
       - description attribute removed
       Changes in -03:
       - Linecard and Interface classes now have direction element
       - sec => s (SI unit)
       - optional description attribute for annotations
       - simplifications in ExportingProcess class
       - new parameters: observationPointId, meteringProcessId,
         selectorId, exportingProcessId (note that devices do not
         have to support the configuration of these parameters)
       - new FileExport class for exporting into a file
       - Reporting class renamed Options Class
       Changes in -02:
       - new structure without next pointers
       - packet reporting and flow metering replaced by record cache
       - added reporting with options";
   }

   /*****************************************************************
   * Features
   *****************************************************************/

   feature exporter {
     description "If supported, the Monitoring Device can be used as
       an Exporter. Exporting Processes can be configured.";
   }

   feature collector {
     description "If supported, the Monitoring Device can be used as
       a Collector. Collecting Processes can be configured.";
   }

   feature meter {
     description "If supported, Observation Points, Selection
       Processes, and Caches can be configured.";
   }

   feature psampSampCountBased {
     description "If supported, the Monitoring Device supports
       count-based Sampling. The Selector method sampCountBased can
       be configured.";
   }

   feature psampSampTimeBased {
     description "If supported, the Monitoring Device supports
       time-based Sampling. The Selector method sampTimeBased can
       be configured.";
   }

   feature psampSampRandOutOfN {
     description "If supported, the Monitoring Device supports
       random n-out-of-N Sampling. The Selector method
       sampRandOutOfN can be configured.";
   }

   feature psampSampUniProb {
     description "If supported, the Monitoring Device supports
       uniform probabilistic Sampling. The Selector method
       sampUniProb can be configured.";
   }

   feature psampFilterMatch {
     description "If supported, the Monitoring Device supports
       property match Filtering. The Selector method filterMatch
       can be configured.";
   }

   feature psampFilterHash {
     description "If supported, the Monitoring Device supports
       hash-based Filtering. The Selector method filterHash can be
       configured.";
   }

   feature udpTransport {
     description "If supported, the Monitoring Device supports UDP
       as transport protocol.";
   }

   feature tcpTransport {
     description "If supported, the Monitoring Device supports TCP
       as transport protocol.";
   }

   feature fileReader {
     description "If supported, the Monitoring Device supports the
       configuration of Collecting Processes as File Readers.";
   }

   feature fileWriter {
     description "If supported, the Monitoring Device supports the
       configuration of Exporting Processes as File Writers.";
   }

   /*****************************************************************
   * Identities
   *****************************************************************/

   /*** Hash function identities ***/
   identity hashFunction {
     description "Base identity for all hash functions used for
       hash-based packet filtering. Identities derived from
       this base are used by the leaf
       /ipfix/selectionProcess/selector/filterHash/hashFunction.";
   }
   identity BOB {
     base "hashFunction";
     description "BOB hash function";
     reference "RFC5475, Section 6.2.4.1.";
   }
   identity IPSX {
     base "hashFunction";
     description "IPSX hash function";
     reference "RFC5475, Section 6.2.4.1.";
   }
   identity CRC {
     base "hashFunction";
     description "CRC hash function";
     reference "RFC5475, Section 6.2.4.1.";
   }

   /*** Cache mode identities ***/
   identity cacheMode {
     description "Base identity for all Cache Modes specifying
       Flow expiration policies of a Cache. Identities derived from
       this base are used by the leaf /ipfix/cache/cacheMode.";
   }
   identity immediate {
     base "cacheMode";
     description "Flow expiration after the first packet,
       generation of Packet Records.";
   }

   identity timeout {
     base "cacheMode";
     description "Flow expiration after active and inactive timeout,
       generation of Flow Records.";
   }
   identity permanent {
     base "cacheMode";
     description "No flow expiration, periodical export after
       active timeout, generation of Flow Records.";
   }

   /*** Export member type identities ***/
   identity exportMemberType {
     description "Base identity for different usages of an export
       destination among all destinations of an Exporting Process.
       It corresponds to ipfixExportMemberType in IPFIX-MIB.
       Identities derived from this base are used by the leaf
       /ipfix/exportingProcess/destination/exportMemberType.";
     reference "draft-ietf-ipfix-mib-08.";
   }
   identity primary {
     base "exportMemberType";
     description "Primary target of the Exporting Process.
       If 'primary' is set for one of the destinations or files of an
       Exporting Process, the exportMemberType of all other
       destinations and files of the same Exporting Process MUST be
       set to 'secondary'.";
     reference "draft-ietf-ipfix-mib-08.";
   }
   identity secondary {
     base "exportMemberType";
     description "Secondary target of the Exporting Process.
       The Exporting Process will use one of the destinations or
       files targets specified as 'secondary' when the primary
       target is not reachable.";
     reference "draft-ietf-ipfix-mib-08.";
   }
   identity parallel {
     base "exportMemberType";
     description "Parallel exporting to all destinations and files
       of the Exporting Process.
       'parallel' MAY only be set simultaneously for all destinations
       and files of the Exporting Process.";
     reference "draft-ietf-ipfix-mib-08.";
   }
   identity loadBalancing {
     base "exportMemberType";
     description "Load-balancing between the different destinations
       and files of the Exporting Process.
       'loadBalancing' MAY only be set simultaneously for all
       destinations and files of the Exporting Process.";
     reference "draft-ietf-ipfix-mib-08.";
   }

   /*** Options type identities ***/
   identity optionsType {
     description "Base identity for report types exported with
       options. Identities derived from this base are used by the leaf
       /ipfix/exportingProcess/options/optionsType.";
   }
   identity meteringStatistics {
     base "optionsType";
     description "Metering Process Statistics.";
     reference "RFC 5101, Section 4.1.";
   }
   identity meteringReliability {
     base "optionsType";
     description "Metering Process Reliability Statistics.";
     reference "RFC 5101, Section 4.2.";
   }
   identity exportingReliability {
     base "optionsType";
     description "Exporting Process Reliability
       Statistics.";
     reference "RFC 5101, Section 4.3.";
   }
   identity flowKeys {
     base "optionsType";
     description "Flow Keys.";
     reference "RFC 5101, Section 4.4.";
   }
   identity selectionSequence {
     base "optionsType";
     description "Selection Sequence and Selector Reports.";
     reference "RFC5476, Sections 6.5.1 and 6.5.2.";
   }
   identity selectionStatistics {
     base "optionsType";
     description "Selection Sequence Statistics Report.";
     reference "RFC5476, Sections 6.5.3.";
   }
   identity accuracy {
     base "optionsType";
     description "Accuracy Report.";
     reference "RFC5476, Section 6.5.4.";
   }

   identity reducingRedundancy {
     base "optionsType";
     description "Application of ipfix-reducing-redundancy.";
     reference "RFC5473.";
   }

   /*****************************************************************
   * Type definitions
   *****************************************************************/

   typedef direction {
     type enumeration {
       enum ingress {
         description "This value is used for monitoring incoming
           packets.";
       }
       enum egress {
         description "This value is used for monitoring outgoing
           packets.";
       }
       enum both {
         description "This value is used for monitoring incoming and
           outgoing packets.";
       }
     }
     description "Direction of packets going through an interface or
       linecard.";
   }

   typedef transportSessionStatus {
     type enumeration {
       enum inactive {
         description "This value MUST be used for Transport Sessions
           that are specified in the system but currently not active.
           The value can be used for Transport Sessions that are
           backup (secondary) sessions.";
       }
       enum active {
         description "This value MUST be used for Transport Sessions
           that are currently active and transmitting or receiving
           data.";
       }
       enum unknown {
         description "This value MUST be used if the status of the
           Transport Sessions cannot be detected by the device. This
           value should be avoided as far as possible.";
       }
     }
     description "Status of a Transport Session.";
     reference "draft-ietf-ipfix-mib-08, Section 8
       (ipfixTransportSessionStatus).";
   }

   typedef ipfixTransportProtocol {
     type enumeration {
       enum sctp;
       enum udp {
         description "only applicable if the feature udpTransport is
           supported";
       }
       enum tcp {
         description "only applicable if the feature tcpTransport is
           supported";
       }
     }
     description "Transport protocols of IPFIX.";
     reference "RFC5101.";
   }

   typedef templateFieldFlags {
     type bits {
       bit scope {
         position 0;
         description "This Information Element is used for scope.";
       }
       bit flowKey {
         position 1;
         description "This Information Element is a Flow Key.";
       }
     }
     description "Bitmask containing the attributes of a field in a
       Template. Possible values:
       0: The Information Element is neither used for scoping nor
          as Flow Key.
       1: The Information Element is used for scoping.
       2: The Information Element is used as Flow Key.
       3: This combination is not allowed.";
     reference "RFC5101, draft-ietf-ipfix-mib-08, Section 8
       (ipfixTemplateDefinitionFlags).";
   }

   /*****************************************************************
   * Groupings
   *****************************************************************/

   grouping interfaceParameters {
     description "Interface as input to Observation Point.";
     choice indexOrName {
       mandatory true;
       description "Index or name of the interface as stored in the
         ifTable of IF-MIB.";
       reference "RFC 1229.";
       leaf ifIndex { type uint32; }
       leaf ifName { type string; }
     }
     leaf direction {
       type direction;
       default both;
       description "Direction of packets. If not applicable (e.g., in
         the case of a sniffing interface in promiscuous mode), this
         parameter is ignored.";
     }
   }

   grouping linecardParameters {
     description "Linecard as input to Observation Point.";
     choice indexOrName {
       mandatory true;
       description "Index or name of the linecard as stored in the
         entPhysicalTable of ENTITY-MIB.";
       reference "RFC 4133.";
       leaf entPhysicalIndex { type uint32; }
       leaf entPhysicalName { type string; }
     }
     leaf direction {
       type direction;
       default both;
       description "Direction of packets. If not applicable (e.g., in
         the case of a sniffing interface in promiscuous mode), this
         parameter is ignored.";
     }
   }

   grouping selectorParameters {
     description "Configuration and state parameters of a Selector.";
     choice Method {
       mandatory true;
       description "Packet selection method applied by the Selector.";
       leaf selectAll {
         type empty;
         description "Method which selects all packets.";
       }
       container sampCountBased {
         if-feature psampSampCountBased;
         description "This container contains the configuration
           parameters of a Selector applying systematic count-based
           packet sampling to the packet stream.";
         reference "RFC5475, Section 5.1;
           RFC5476, Section 6.5.2.1.";
         leaf packetInterval {
           type uint32;
           units packets;
           mandatory true;
           description "The number of packets that are consecutively
             sampled between gaps of length packetSpace.
             This parameter corresponds to the Information Element
             samplingPacketInterval.";
           reference "RFC5477, Section 8.2.2.";
         }
         leaf packetSpace {
           type uint32;
           units packets;
           mandatory true;
           description "The number of unsampled packets between two
             sampling intervals.
             This parameter corresponds to the Information Element
             samplingPacketSpace.";
           reference "RFC5477, Section 8.2.3.";
         }
       }
       container sampTimeBased {
         if-feature psampSampTimeBased;
         description "This container contains the configuration
           parameters of a Selector applying systematic time-based
           packet sampling to the packet stream.";
         reference "RFC5475, Section 5.1;
           RFC5476, Section 6.5.2.2.";
         leaf timeInterval {
           type uint32;
           units microseconds;
           mandatory true;
           description "The time interval in microseconds during
             which all arriving packets are sampled between gaps
             of length timeSpace.
             This parameter corresponds to the Information Element
             samplingTimeInterval.";
           reference "RFC5477, Section 8.2.4.";
         }
         leaf timeSpace {
           type uint32;
           units microseconds;
           mandatory true;
           description "The time interval in microseconds during
             which no packets are sampled between two sampling
             intervals specified by timeInterval.
             This parameter corresponds to the Information Element
             samplingTimeInterval.";
           reference "RFC5477, Section 8.2.5.";
         }
       }
       container sampRandOutOfN {
         if-feature psampSampRandOutOfN;
         description "This container contains the configuration
           parameters of a Selector applying n-out-of-N packet
           sampling to the packet stream.";
         reference "RFC5475, Section 5.2.1;
           RFC5476, Section 6.5.2.3.";
         leaf size {
           type uint32;
           units packets;
           mandatory true;
           description "The number of elements taken from the parent
             population.
             This parameter corresponds to the Information Element
             samplingSize.";
           reference "RFC5477, Section 8.2.6.";
         }
         leaf population {
           type uint32;
           units packets;
           mandatory true;
           description "The number of elements in the parent
             population.
             This parameter corresponds to the Information Element
             samplingPopulation.";
           reference "RFC5477, Section 8.2.7.";
         }
       }
       container sampUniProb {
         if-feature psampSampUniProb;
         description "This container contains the configuration
           parameters of a Selector applying uniform probabilistic
           packet sampling (with equal probability per packet) to the
           packet stream.";
         reference "RFC5475, Section 5.2.2.1;
           RFC5476, Section 6.5.2.4.";
         leaf probability {
           type decimal64 {
             fraction-digits 18;
             range "0..1";
           }
           mandatory true;
           description "Probability that a packet is sampled,
             expressed as a value between 0 and 1. The probability
             is equal for every packet.
             This parameter corresponds to the Information Element
             samplingProbability.";
           reference "RFC5477, Section 8.2.8.";
         }
       }
       container filterMatch {
         if-feature psampFilterMatch;
         description "This container contains the configuration
           parameters of a Selector applying property match filtering
           to the packet stream.";
         reference "RFC5475, Section 6.1;
           RFC5476, Section 6.5.2.5.";
         choice nameOrId {
           mandatory true;
           description "The field to be matched is specified by
             either the name or the ID of the Information
             Element.";
           leaf ieName {
             type string;
             description "Name of the Information Element.";
           }
           leaf ieId {
             type uint16;
             description "ID of the Information Element.";
           }
         }
         leaf ieEnterpriseNumber {
           type uint32;
           description "If present, the Information Element is
             enterprise-specific. The field value configures the
             enterprise number. If omitted or zero, the Information
             Element is not enterprise-specific but registered at
             IANA.";
         }
         leaf value {
           type string;
           mandatory true;
           description "Matching value of the Information Element.";
         }
       }
       container filterHash {
         if-feature psampFilterHash;
         description "This container contains the configuration
           parameters of a Selector applying hash-based filtering
           to the packet stream.";
         reference "RFC5475, Section 6.2;
           RFC5476, Section 6.5.2.6.";
         leaf hashFunction {
           type identityref {
             base "hashFunction";
           }
           default BOB;
           description "Hash function to be applied. According to
             RFC5475, Section 6.2.4.1, 'BOB' must be used in order to
             be compliant with PSAMP.";
         }
         leaf ipPayloadOffset {
           type uint64;
           units octets;
           default 0;
           description "IP payload offset indicating the position of
             the first payload byte considered as input to the hash
             function.
             Default value 0 corresponds to the minimum offset that
             must be configurable according to RFC5476, Section
             6.2.5.6.
             This parameter corresponds to the Information Element
             hashIPPayloadOffset.";
           reference "RFC5477, Section 8.3.2.";
         }
         leaf ipPayloadSize {
           type uint64;
           units octets;
           default 8;
           description "Number of IP payload bytes used as input to
             the hash function, counted from the payload offset.
             If the IP payload is shorter than the payload range,
             all available payload octets are used as input.
             Default value 8 corresponds to the minimum IP payload
             size that must be configurable according to RFC5476,
             Section 6.2.5.6.
             This parameter corresponds to the Information Element
             hashIPPayloadSize.";
           reference "RFC5477, Section 8.3.3.";
         }
         leaf digestOutput {
           type boolean;
           default false;
           description "If true, the output from this Selector is
             included in the Packet Report as a packet digest.
             Therefore, the configured Cache Layout needs to contain
             a digestHashValue field.
             This parameter corresponds to the Information Element
             hashDigestOutput.";
           reference "RFC5477, Section 8.3.8.";
         }
         leaf initialiserValue {
           type uint64;
           description "Initializer value to the hash function.
             If not configured by the user, the Monitoring Device
             arbitrarily chooses an initializer value.";
           reference "RFC5477, Section 8.3.9.";
         }
         list selectedRange {
           key name;
           min-elements 1;
           leaf name { type string; }
           leaf min {
             type uint64;
             description "Beginning of the hash function's selected
               range.
               This parameter corresponds to the Information Element
               hashSelectedRangeMin.";
             reference "RFC5477, Section 8.3.6.";
           }
           leaf max {
             type uint64;
             description "End of the hash function's selected range.
               This parameter corresponds to the Information Element
               hashSelectedRangeMax.";
             reference "RFC5477, Section 8.3.7.";
           }
         }
       }
     }
     leaf packetsObserved {
       type yang:counter64;
       config false;
       description "The number of packets observed at the input of
         the Selector.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         selectorDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixSelectorStatsPacketsObserved).";
     }
     leaf packetsDropped {
       type yang:counter64;
       config false;
       description "The number of packets discarded by the Selector.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         selectorDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixSelectorStatsPacketsDropped).";
     }
     leaf selectorDiscontinuityTime {
       type yang:date-and-time;
       config false;
       description "The value of sysUpTime at the most recent
         occasion at which one or more of the Selector counters
         suffered a discontinuity.
         A value of zero indicates no such discontinuity has
         occurred since the last re-initialization of the local
         management subsystem.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixSelectionProcessStatsDiscontinuityTime).";
     }
   }

   grouping cacheLayoutParameters {
     description "Fields of a Cache Layout.";
     list cacheField {
       key name;
       min-elements 1;
       leaf name { type string; }
       choice nameOrId {
         mandatory true;
         description "Name or ID of the Information Element.";
         reference "RFC5102.";
         leaf ieName { type string; }
         leaf ieId { type uint16; }
       }
       leaf ieLength {
         type uint16;
         units octets;
         description "Length of the field in which the Information
           Element is encoded. A value of 65535 specifies a
           variable-length Information Element. For Information
           Elements of integer and float type, the field length MAY
           be set to a smaller value than the standard length of the
           abstract data type if the rules of reduced size encoding
           are fulfilled.
           If not configured by the user, this parameter is set by
           the Monitoring Device.";
         reference "RFC5101, Section 6.2; RFC5102.";
       }
       leaf ieEnterpriseNumber {
         type uint32;
         description "If present, the Information Element is
           enterprise-specific. The field value configures the
           enterprise number. If omitted or zero, the Information
           Element is not enterprise-specific but registered at
           IANA.";
         reference "RFC5101; RFC5102.";
       }
       leaf isFlowKey {
         type empty;
         description "If present, this is a flow key.";
       }
     }
   }

   grouping destinationParameters {
     description "Parameters specifying an export destination.";
     leaf exportMemberType {
       type identityref {
         base "exportMemberType";
       }
       default parallel;
       description "Member type within the Transport Session group
         which is composed of all destinations and fileWriters of the
         Exporting Process.";
     }
     leaf ipfixVersion {
       type int16;
       default 10;
       description "IPFIX version number.";
     }
     leaf transportProtocol {
       type ipfixTransportProtocol;
       mandatory true;
     }
     leaf destinationIpAddress {
       type inet:ip-address;
       mandatory true;
     }
     leaf destinationPort {
       type inet:port-number;
       description "If not configured by the user, the Monitoring
         Device uses the default port number for IPFIX, which is
         4739 without transport layer security and 4740 if transport
         layer security is activated.";
     }
     leaf sendBufferSize {
       type uint32;
       units bytes;
       description "Size of the socket send buffer.
         If not configured by the user, this parameter is set by
         the Monitoring Device.";
     }
     leaf rateLimit {
       type uint32;
       units "bytes per second";
       description "Maximum number of bytes per second the Exporting
         Process may export to the given destination. The number of
         bytes is calculated from the lengths of the IPFIX Messages
         exported. If not configured, no rate limiting is performed.";
       reference "RFC5476, Section 6.3.";
     }
     choice protocolSpecificParameters {
       case sctp {
         when "transportProtocol='sctp'";
         leaf-list localIpAddress {
           type inet:ip-address;
           description "List of eligible local IP addresses to be
             used by the SCTP endpoint. If not configured, all locally
             assigned IP addresses are used by the local endpoint.";
           reference "RFC 3758; RFC 4960.";
         }
         leaf timedReliability {
           type uint32;
           units milliseconds;
           default 0;
           description "PR-SCTP lifetime for IPFIX Messages
             containing Data Sets only. Zero means reliable transport.";
           reference "RFC 3758; RFC 4960.";
         }
         leaf numberOfStreams {
           type uint16;
           description "Number of outbound streams requested for the
             SCTP association.
             If not configured by the user, this parameter is set by
             the Monitoring Device.";
           reference "RFC 3758; RFC 4960.";
         }
       }
       case udp {
         when "transportProtocol='udp'";
         leaf sourceIpAddress {
           type inet:ip-address;
           description "Sets source IP address if UDP is transport
             protocol. If not configured, the IP address assigned to
             the outgoing interface is used.";
         }
         leaf templateRefreshTimeout {
           type uint32;
           units seconds;
           default 600;
           description "Sets time after which Templates are resent if
             UDP is transport protocol.";
           reference "RFC5101.";
         }
         leaf optionsTemplateRefreshTimeout {
           type uint32;
           units seconds;
           default 600;
           description "Sets time after which Options Templates are
             resent if UDP is transport protocol.";
           reference "RFC5101.";
         }
         leaf templateRefreshPacket {
           type uint32;
           units "IPFIX Messages";
           description "Sets number of IPFIX Messages after which
             Templates are resent if UDP is transport protocol.
             If omitted, Templates are only resent after timeout.";
           reference "RFC5101.";
         }
         leaf optionsTemplateRefreshPacket {
           type uint32;
           units "IPFIX Messages";
           description "Sets number of IPFIX Messages after which
             Options Templates are resent if UDP is transport
             protocol.
             If omitted, Templates are only resent after timeout.";
           reference "RFC5101.";
         }
       }
     }
     container transportLayerSecurity {
       presence "If transportLayerSecurity is present, DTLS is
         enabled if the transport protocol is SCTP or UDP, and TLS
         is enabled if the transport protocol is TCP.";
       uses transportLayerSecurityParameters;
     }
   }

   grouping optionsParameters {
     description "Parameters specifying the data export using an
       Options Template.";
     leaf optionsType {
       type identityref {
         base "optionsType";
       }
       mandatory true;
     }
     leaf optionsTimeout {
       type uint32;
       units milliseconds;
       description "Time interval for periodic export of the options
         data. If set to zero, the export is triggered when the
         options data has changed.
         If not configured by the user, this parameter is set by the
         Monitoring Device.";
     }
   }

   grouping receiverParameters {
     leaf transportProtocol {
       type ipfixTransportProtocol;
       mandatory true;
     }
     leaf-list localIpAddress {
       type inet:ip-address;
       description "List of local IP addresses on which the Collecting
         Process listens for IPFIX Messages. If not configured, all
         locally assigned IP addresses are used. In the case of SCTP,
         these IP addresses correspond to the eligible local IP
         addresses to be used by the SCTP endpoint.";
       reference "RFC 4960.";
     }
     leaf localPort {
       type inet:port-number;
       description "If not configured, the Monitoring Device uses the
         default port number for IPFIX, which is 4739 without
         transport layer security and 4740 if transport layer
         security is activated.";
     }
     choice protocolSpecificParameters {
       case sctp {
         when "transportProtocol='sctp'";
         leaf maxAllowedStreams {
           type uint16;
           description "Maximum number of allowed inbound streams
             per SCTP association.
             If not configured by the user, this parameter is set by
             the Monitoring Device.";
         }
       }
       case udp {
         when "transportProtocol='udp'";
         leaf templateLifetime {
           type uint32;
           units seconds;
           default 1800;
           description "Template lifetime if UDP is transport
             protocol.";
           reference "RFC5101, Section 10.3.7.";
         }
       }
     }
     container transportLayerSecurity {
       presence "If transportLayerSecurity is present, DTLS is enabled
         if the transport protocol is SCTP or UDP, and TLS is enabled
         if the transport protocol is TCP.";
       uses transportLayerSecurityParameters;
     }
   }

   grouping fileWriterParameters {
     description "File Writer parameters.";
     leaf exportMemberType {
       type identityref {
         base "exportMemberType";
       }
       default parallel;
       description "Member type within the Transport Session group
         which is composed of all destinations and fileWriters of the
         Exporting Process.";
     }
     leaf ipfixVersion {
       type int16;
       default 10;
       description "IPFIX version number.";
     }
     leaf file {
       type inet:uri;
       mandatory true;
       description "URI specifying the location of the file.";
     }
   }

   grouping fileReaderParameters {
     description "File Reader parameters.";
     leaf file {
       type inet:uri;
       mandatory true;
       description "URI specifying the location of the file.";
     }
   }

   grouping transportLayerSecurityParameters {
     description "Transport layer security parameters.";
     leaf-list localCertificationAuthorityDN {
       type string;
       description "Distinguished names of certification authorities
         whose certificates may be used to identify the local
         endpoint.";
     }
     leaf-list localSubjectDN {
       type string;
       description "Distinguished names which may be used in the
         certificates to identify the local endpoint.";
     }
     leaf-list localSubjectFQDN {
       type inet:domain-name;
       description "Fully qualified domain names which may be used to
         in the certificates to identify the local endpoint.";
     }
     leaf-list remoteCertificationAuthorityDN {
       type string;
       description "Distinguished names of certification authorities
         whose certificates are accepted to authorize remote
         endpoints.";
     }
     leaf-list remoteSubjectDN {
       type string;
       description "Distinguished names which are accepted in
         certificates to authorize remote endpoints.";
     }
     leaf-list remoteSubjectFQDN {
       type inet:domain-name;
       description "Fully qualified domain name which are accepted in
         certificates to authorize remote endpoints.";
     }
   }

   grouping templateParameters {
     description "State parameters of a Template used by an Exporting
       Process or received by a Collecting Process in a specific
       Transport Session. Parameter names and semantics correspond to
       the managed objects in IPFIX-MIB";
     reference "RFC5101; draft-ietf-ipfix-mib-08, Section 8
       (ipfixTemplateEntry, ipfixTemplateDefinitionEntry,
       ipfixTemplateStatsEntry)";
     leaf observationDomainId {
       type uint32;
       description "The ID of the Observation Domain for which this
         Template is defined.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTemplateObservationDomainId).";
     }
     leaf templateId {
       type uint16;
       description "This number indicates the Template Id in the IPFIX
         message. Values from 0 to 255 are not allowed for Template
         Ids.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTemplateId).";
     }
     leaf setId {
       type uint16;
       description "This number indicates the Set ID of the Template.
         Currently, there are two values defined. The value 2 is used
         for Sets containing Template definitions. The value 3 is
         used for Sets containing Options Template definitions.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTemplateSetId).";
     }
     leaf accessTime {
       type yang:date-and-time;
       description "Used for Exporting Processes, this parameter
         contains the time when this (Options) Template was last
         sent to the Collector(s).
         Used for Collecting Processes, this parameter contains the
         time when this (Options) Template was last received from the
         Exporter.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTemplateAccessTime).";
     }
     leaf templateDataRecords {
       type yang:counter64;
       description "The number of transmitted or received Data
         Records defined by this (Options) Template.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         templateDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTemplateDataRecords).";
     }
     leaf templateDiscontinuityTime {
       type yang:date-and-time;
       description "The value of sysUpTime at the most recent
         occasion at which templateDataRecords suffered a
         discontinuity.
         A value of zero indicates no such discontinuity has
         occurred since the last re-initialization of the local
         management subsystem.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTemplateDiscontinuityTime).";
     }
     list field {
       description "This list contains the (Options) Template
         fields of which the (Options) Template is defined.
         The order of the list corresponds to the order of the fields
         in the (Option) Template Record.";
       leaf ieId {
         type uint16;
         description "This parameter indicates the Information
           Element Id of the field.";
         reference "draft-ietf-ipfix-mib-08, Section 8
           (ipfixTemplateDefinitionIeId); RFC5102.";
       }
       leaf ieLength {
         type uint16;
         units octets;
         description "This parameter indicates the length of the
           Information Element of the field.";
         reference "draft-ietf-ipfix-mib-08, Section 8
           (ipfixTemplateDefinitionIeLength); RFC5102.";
       }
       leaf ieEnterpriseNumber {
         type uint32;
         description "This parameter indicates the IANA enterprise
           number of the authority defining the Information Element
           Id.
           If the Information Element is not enterprise-specific,
           this parameter is omitted or zero.";
         reference "draft-ietf-ipfix-mib-08, Section 8
           (ipfixTemplateDefinitionIeEnterpriseNumber).";
       }
       leaf flags {
         type templateFieldFlags;
         description "This parameter indicates special attributes
           of the field.";
         reference "draft-ietf-ipfix-mib-08, Section 8
           (ipfixTemplateDefinitionFlags).";
       }
     }
   }

   grouping transportSessionParameters {
     description "State parameters of a Transport Session originating
       from an Exporting or terminating at a Collecting Process.
       Parameter names and semantics correspond to the managed
       objects in IPFIX-MIB. The additional file parameter, which
       does not exist in IPFIX-MIB, allows describing a Transport
       Session terminating or originating in a file.";
     reference "RFC5101, draft-ietf-ipfix-mib-08, Section 8
       (ipfixTransportSessionEntry, ipfixTransportSessionStatsEntry,
       ipfixExportEntry)";
     leaf ipfixVersion {
       type int16;
       description "Used for Exporting Processes, this parameter
         contains the version number of the IPFIX Protocol that the
         Exporter uses to export its data in this Transport Session.
         Used for Collecting Processes, this parameter contains the
         version number of the IPFIX Protocol it receives for
         this Transport Session.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionIpfixVersion).";
     }
     choice transportOrFile {
       description "If the Transport Session terminates or originates
         in a file, the location of the file is specified instead of
         transport protocol, addresses, ports etc.";
       case transport {
         leaf protocol {
           type int32;
           description "The transport protocol used for receiving or
             transmitting IPFIX Messages. Protocol numbers are
             assigned by IANA. A current list of all assignments is
             available from <http://www.iana.org/>.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionProtocol).";
         }
         leaf sourceAddress {
           type inet:ip-address;
           description "The source address of the Exporter of the
             IPFIX Transport Session. This parameter is used with
             protocols (specified in protocol) like TCP(6) and
             UDP(17) that have the notion of addresses. SCTP(132)
             should use sctpAssocId instead. If SCTP(132) or any
             other protocol without the notion of addresses is used,
             this parameter is omitted.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionSourceAddressType,
             ipfixTransportSessionSourceAddress).";
         }
         leaf destinationAddress {
           type inet:ip-address;
           description "The destination address of the Collector of
             the IPFIX Transport Session. This parameter is used with
             protocols (specified in protocol) like TCP(6) and
             UDP(17) that have the notion of addresses. SCTP(132)
             should use sctpAssocId instead. If SCTP(132) or any
             other protocol without the notion of addresses is used,
             this parameter is omitted.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionDestinationAddressType,
             ipfixTransportSessionDestinationAddress).";
         }
         leaf sourcePort {
           type inet:port-number;
           description "The transport protocol port number of the
             Exporter of the IPFIX Transport Session.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionSourcePort).";
         }
         leaf destinationPort {
           type inet:port-number;
           description "The transport protocol port number of the
             Collector of the IPFIX Transport Session.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionDestinationPort).";
         }
         leaf sctpAssocId {
           when "../protocol = 132";
           type uint32;
           description "The association id used for the SCTP session
             between the Exporter and the Collector of the IPFIX
             Transport Session. It is equal to the sctpAssocId entry
             in the sctpAssocTable defined in the SCTP-MIB. This
             parameter is only used if protocol has the value 132
             (SCTP). In all other cases, the parameter is omitted.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionSctpAssocId),
             RFC3871";
         }
         leaf templateRefreshTimeout {
           when "../protocol = 17";
           type uint32;
           units seconds;
           description "Used for Exporting Processes, this parameter
             contains the time in seconds after which Templates MUST
             be resent by the Exporter.
             Used for Collecting Processes, this parameter contains
             the lifetime in seconds after which a Template becomes
             invalid when it is not received again within this
             lifetime.
             This parameter is only used if protocol has the value 17
             (UDP). In all other cases, the parameter is omitted.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionTemplateRefreshTimeout).";
         }
         leaf optionsTemplateRefreshTimeout {
           when "../protocol = 17";
           type uint32;
           units seconds;
           description "Used for Exporting Processes, this parameter
             contains the time in seconds after which Options
             Templates MUST be resent by the Exporter.
             Used for Collecting Processes, this parameter contains
             the lifetime in seconds after which a Template becomes
             invalid when it is not received again within this
             lifetime.
             This parameter is only used if protocol has the value 17
             (UDP). In all other cases, the parameter is omitted.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionOptionsTemplateRefreshTimeout).";
         }
         leaf templateRefreshPacket {
           when "../protocol = 17";
           type uint32;
           units "IPFIX Messages";
           description "Used for Exporting Processes, this parameter
             contains the number of exported IPFIX Messages after
             which Templates MUST be resent by the Exporter.
             Used on Collecting Processes, this parameter contains
             the lifetime in number of exported IPFIX Messages after
             which an Template becomes invalid when it is not
             received again within this lifetime.
             This parameter is only used if protocol has the value 17
             (UDP). In all other cases, the parameter is omitted.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionTemplateRefreshPacket).";
         }
         leaf optionsTemplateRefreshPacket {
           when "../protocol = 17";
           type uint32;
           units "IPFIX Messages";
           description "Used for Exporting Processes, this parameter
             contains the number of exported IPFIX Messages after
             which Options Templates MUST be resent by the Exporter.
             Used on Collecting Processes, this parameter contains
             the lifetime in number of exported IPFIX Messages after
             which an Option Template becomes invalid when it is not
             received again within this lifetime.
             This parameter is only used if protocol has the value 17
             (UDP). In all other cases, the parameter is omitted.";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixTransportSessionOptionsTemplateRefreshPacket).";
         }
       }
       case file {
         leaf file {
           type inet:uri;
           description "URI specifying the location of the file when
             this Transport Session is originating from or
             terminating in a file.";
         }
       }
     }
     leaf status {
       type transportSessionStatus;
       description "Status of the Transport Session.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionStatus).";
     }
     leaf rate {
       type int32;
       units "bytes per second";
       description "The number of bytes per second transmitted by the
         Exporting Process or received by the Collecting Process.
         This parameter is updated every second.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionRate).";
     }
     leaf packets {
       type yang:counter64;
       units packets;
       description "The number of packets transmitted by the
         Exporting Process or received by the Collecting Process.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         transportSessionDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionPackets).";
     }
     leaf bytes {
       type yang:counter64;
       units bytes;
       description "The number of bytes transmitted by the
         Exporting Process or received by the Collecting Process.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         transportSessionDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionBytes).";
     }
     leaf messages {
       type yang:counter64;
       units "IPFIX Messages";
       description "The number of messages transmitted by the
         Exporting Process or received by the Collecting Process.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         transportSessionDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionMessages).";
     }
     leaf discardedMessages {
       type yang:counter64;
       units "IPFIX Messages";
       description "Used for Exporting Processes, this parameter
         indicates the number of messages that could not be sent due
         to internal buffer overflows, network congestion, routing
         issues, etc. Used for Collecting Process, this parameter
         indicates the number of received IPFIX Message that are
         malformed, cannot be decoded, are received in the wrong
         order or are missing according to the sequence number.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         transportSessionDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionDiscardedMessages).";
     }
     leaf records {
       type yang:counter64;
       units "Data Records";
       description "The number of Data Records transmitted by the
         Exporting Process or received by the Collecting Process.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         transportSessionDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionRecords).";
     }
     leaf templates {
       type yang:counter32;
       units "Templates";
       description "The number of Templates transmitted by the
         Exporting Process or received by the Collecting Process.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         transportSessionDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionTemplates).";
     }
     leaf optionsTemplates {
       type yang:counter32;
       units "Options Templates";
       description "The number of Option Templates transmitted by the
         Exporting Process or received by the Collecting Process.
         Discontinuities in the value of this counter can occur at
         re-initialization of the management system, and at other
         times as indicated by the value of
         transportSessionDiscontinuityTime.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionOptionsTemplates).";
     }
     leaf transportSessionDiscontinuityTime {
       type yang:date-and-time;
       description "The value of sysUpTime at the most recent
         occasion at which one or more of the Transport Session
         counters suffered a discontinuity.
         A value of zero indicates no such discontinuity has
         occurred since the last re-initialization of the local
         management subsystem.";
       reference "draft-ietf-ipfix-mib-08, Section 8
         (ipfixTransportSessionDiscontinuityTime).";
     }
     list template {
       description "This list contains the Templates and Options
         Templates that are transmitted by the Exporting Process
         or received by the Collecting Process.
         Withdrawn or invalidated (Options) Template Exporter
         MUST be removed from this list.";
       uses templateParameters;
     }
   }

   /*****************************************************************
   * Main container
   *****************************************************************/

   container ipfix {
     list collectingProcess {
       if-feature collector;
       key name;
       description "Parameters of a Collecting Process.";
       leaf name { type string; }
       list receiver {
         key name;
         description "List of receivers (sockets) on which the
           Collecting Process receives IPFIX Messages.";
         leaf name { type string; }
         uses receiverParameters;
       }
       list fileReader {
         if-feature fileReader;
         key name;
         description "List of File Readers from which the Collecting
           Process reads IPFIX Messages.";
         leaf name { type string; }
         uses fileReaderParameters;
       }
       leaf-list exportingProcess {
         type leafref { path "/ipfix/exportingProcess/name"; }
         description "Export of received records without any
           modifications. Records are processed by all Exporting
           Processes in the list.";
       }
       list transportSession {
         config false;
         description "This list contains the currently established
           Transport Sessions terminating at this Collecting
           Process.";
         uses transportSessionParameters;
       }
     }

     list observationPoint {
       if-feature meter;
       key name;
       description "Parameters of an Observation Point.";
       leaf name { type string; }
       leaf observationPointId {
         type uint32;
         config false;
         description "Observation Point ID (i.e., the value of the
           Information Element observationPointId) assigned by the
           Monitoring Device.";
         reference "RFC5102, Section 5.1.10.";
       }
       leaf observationDomainId {
         type uint32;
         mandatory true;
         description "The Observation Domain ID associates the
           Observation Point to an Observation Domain. Observation
           Points with identical Observation Domain ID belong to the
           same Observation Domain.";
         reference "RFC5101.";
       }
       choice OPType {
         mandatory true;
         container interface { uses interfaceParameters; }
         container linecard { uses linecardParameters; }
       }
       leaf-list selectionProcess {
         type leafref { path "/ipfix/selectionProcess/name"; }
         description "Selection Processes in this list process packets
           in parallel.";
       }
     }

     list selectionProcess {
       if-feature meter;
       must
         "not(
           /ipfix/observationPoint[selectionProcess = current()/name]
             /observationDomainId[1] !=
           /ipfix/observationPoint[selectionProcess = current()/name]
             /observationDomainId
         )
         and
         (count(/ipfix/selectionProcess[name =
           /ipfix/observationPoint[observationDomainId =
             /ipfix/observationPoint[selectionProcess =
               current()/name]/observationDomainId]/selectionProcess]
           [selectionSequenceId = current()/selectionSequenceId])
         = 1)" {
         description "If the input of this Selection Process is an
           Observed Packet Stream originating from different
           Observation Points, the first part of the must statement
           ensures that all Observation Points belong to the same
           Observation Domain.
           The second part of the must statement ensures that the
           Selection Sequence ID is unique within the Observation
           Domain.
           The must statement verifies these conditions correctly
           for Selection Processes whose input originates from
           Observation Points only. The conditions are not verified
           if the input originates from other Selection Processes
           because XPath does not allow specifying this in a simple
           way.";
       }
       key name;
       description "Parameters of a Selection Process.";
       leaf name { type string; }
       leaf selectionSequenceId {
         type uint64;
         config false;
         description "The Selection Sequence ID is assigned by the
           Monitoring Device. It must be unique within the
           Observation Domain.";
         reference "RFC5477.";
       }
       list selector {
         key name;
         unique "selectorId";
         min-elements 1;
         ordered-by user;
         description "List of Selectors that define the action of the
           Selection Process on a single packet. The Selectors are
           serially invoked in the same order as they appear in this
           list.";
         leaf name { type string; }
         leaf selectorId {
           type uint16;
           config false;
           description "The Selector ID is assigned by the Monitoring
             Device. It must be unique within the Observation
             Domain.";
           reference "RFC5477.";
         }
         uses selectorParameters;
       }
       leaf-list selectionProcess {
         type leafref { path "/ipfix/selectionProcess/name"; }
         description "Selection Processes in this list receive the
           selected packets in parallel.";
       }
       leaf-list cache {
         type leafref { path "/ipfix/cache/name"; }
         description "Caches in this list receive the selected packets
           in parallel.";
       }
     }

     list cache {
       if-feature meter;
       must
         "not(
           /ipfix/observationPoint[selectionProcess =
             /ipfix/selectionProcess[cache = current()/name]/name]
             /observationDomainId[1] !=
           /ipfix/observationPoint[selectionProcess =
             /ipfix/selectionProcess[cache = current()/name]/name]
             /observationDomainId
         )" {
         description "For configurations where there are no cascaded
           Selection Processes between Observation Points and this
           Cache, the must statement ensures that all Observation
           Points belong to the same Observation Domain.
           Note that this must statement does not ensure that
           cascaded Selection Processes between the Observation
           Points and this Cache process packets from a single
           Observation Domain.";
       }
       key name;
       description "Parameters of a Cache.";
       leaf name { type string; }
       leaf cacheMode {
         type identityref {
           base "cacheMode";
         }
         mandatory true;
       }
       leaf maxRecords {
         type uint32;
         description "Maximum number of Data Records in the Cache.
           If not configured by the user, this parameter is set by
           the Monitoring Device.";
       }
       leaf activeTimeout {
         when "not(../cacheMode = 'immediate')";
         type uint32;
         units milliseconds;
         description "This parameter configures the active timeout.
           The parameter value zero indicates infinity, meaning that
           there is no active timeout.
           In the case of Cache Mode 'timeout', the active timeout
           defines the time after which a Flow Record is expired
           even though packets matching this Flow are still received
           by the Cache. In the case of Cache Mode 'permanent', the
           active timeout defines the interval for periodical export
           of Flow Records.
           If not configured by the user, the Monitoring Device sets
           this parameter.";
       }
       leaf inactiveTimeout {
         when "not(
             ../cacheMode = 'immediate' or ../cacheMode = 'permanent'
           )";
         type uint32;
         units milliseconds;
         description "This parameter configures the inactive timeout
           in milliseconds.
           The parameter value zero indicates infinity, meaning that
           there is no inactive timeout.
           The inactive timeout defines the time after which a Flow
           Record is expired if no packets matching this Flow are
           received by the Cache.
           If not configured by the user, the Monitoring Device sets
           this parameter.";
       }
       container cacheLayout {
         description "Definition of the Cache Layout.";
         uses cacheLayoutParameters;
       }
       leaf-list exportingProcess {
         type leafref { path "/ipfix/exportingProcess/name"; }
         description "Records are exported by all Exporting Processes
           in the list.";
       }
       leaf activeFlows {
         type uint32;
         units flows;
         config false;
         description "The number of Flows currently active in this
           cache.";
         reference "ietf-draft-ipfix-mib-08, Section 8
           (ipfixMeteringProcessCacheActiveFlows).";
       }
       leaf inactiveFlows {
         type uint32;
         units flows;
         config false;
         description "The number of Flows currently inactive in this
           cache.";
         reference "ietf-draft-ipfix-mib-08, Section 8
           (ipfixMeteringProcessCacheInactiveFlows).";
       }
       leaf cacheDataRecords {
         type yang:counter64;
         units "Data Records";
         config false;
         description "The number of Data Records generated by this
           Cache.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           templateDiscontinuityTime.";
         reference "ietf-draft-ipfix-mib-08, Section 8
           (ipfixMeteringProcessDataRecords).";
       }
       leaf cacheDiscontinuityTime {
         type yang:date-and-time;
         config false;
         description "The value of sysUpTime at the most recent
           occasion at which cacheDataRecords suffered a
           discontinuity.
           A value of zero indicates no such discontinuity has
           occurred since the last re-initialization of the local
           management subsystem.";
         reference "ietf-draft-ipfix-mib-08, Section 8
           (ipfixMeteringProcessDiscontinuityTime).";
       }
     }

     list exportingProcess {
       if-feature exporter;
       must
         "not(
           (current()/destination/exportMemberType = 'parallel'
             or current()/fileWriter/exportMemberType = 'parallel')
           and
           (current()/destination/exportMemberType != 'parallel'
             or current()/fileWriter/exportMemberType != 'parallel')
         )
         and
         not(
           (current()/destination/exportMemberType = 'loadBalancing'
             or current()/fileWriter/exportMemberType
               = 'loadBalancing')
           and
           (current()/destination/exportMemberType != 'loadBalancing'
             or current()/fileWriter/exportMemberType
               != 'loadBalancing')
         )
         and
         not(
           count(current()/destination/exportMemberType = 'primary')
           + count(current()/fileWriter/exportMemberType = 'primary')
           > 1
         )
         " {
         description "This must statement ensures that the following:
         - If one exportMemberType parameter is set to 'parallel' or
           'loadBalancing, all exportMemberType parameters of the
           Exporting Process are set to the same value.
         - A maximum of one destination or file can be configured
           with exportMemberType set to 'primary'.";
       }
       key name;
       description "Parameters of an Exporting Process.";
       leaf name { type string; }
       list destination {
         key name;
         leaf name { type string; }
         uses destinationParameters;
       }
       list fileWriter {
         if-feature fileWriter;
         key name;
         leaf name { type string; }
         uses fileWriterParameters;
       }
       list options {
         key name;
         leaf name { type string; }
         uses optionsParameters;
       }
       list transportSession {
         config false;
         description "This list contains the currently established
           Transport Sessions originating from this Exporting
           Process.";
         leaf exportMemberType {
           type uint16;
           description "This parameter indicates the member type of
             this Transport Session within the Transport Session
             group originating from the Exporting Process.
             The following values are currently defined in IPFIX-MIB:
             unknown(0):
               This value MUST be used if the status of the group
               membership cannot be detected by the equipment. This
               value should be avoided as far as possible.
             primary(1):
               This value is used for a group member that is used as
               the primary target of an Exporting Process. Other group
               members of the same Exporting or Collecting Process MUST
               NOT have the value primary(1) but MUST have the value
               secondary(2).
             secondary(2)
               This value is used for a group member that is used as a
               secondary target of an Exporting Process. The Exporting
               Process will use one of the targets specified as
               secondary(2) within the same Transport Session group
               when the primary target is not reachable.
             parallel(3)
               This value is used for a group member that is used for
               duplicate exporting. The Exporting Process is exporting
               the same Data Records in parallel to all group members
               in parallel. This implies that all group members MUST
               have the same membertype parallel(3).
             loadBalancing(4)
               This value is used for a group member that is used
               as one target for load-balancing. This means that a
               Data Record is sent to one of the group members in this
               group. This implies that all group members MUST have the
               same membertype load-balancing(4).";
           reference "draft-ietf-ipfix-mib-08, Section 8
             (ipfixExportMemberType).";
         }
         uses transportSessionParameters;
       }
     }
   }
 }
