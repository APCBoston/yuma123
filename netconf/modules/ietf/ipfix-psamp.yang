 module ipfix-psamp {
   namespace "urn:ietf:params:xml:ns:ipfix-psamp-config";
   prefix ipfix;

   import yang-types { prefix yang; }
   import inet-types { prefix inet; }
   import IF-MIB { prefix if; }
   import ENTITY-MIB { prefix ent; }

   organization "IPFIX WG";
   contact "muenz@informatik.uni-tuebingen.de";

   description "IPFIX/PSAMP Configuration Data Model";
   reference "draft-ietf-ipfix-configuration-model-00.txt + asn bugfix";

   revision 2008-07-07 {
     description "Version of draft-ietf-ipfix-configuration-model-00
       Changes in draft-ietf-ipfix-configuration-model-00:
       - Metering Process container replaced by direct reference to
         Selection Process
       - concatenation of Selection Processes realize Selection Sequence
       - removal of premature support of IPFIX Mediators/Concentrators.
       - more SCTP parameters in SctpReceiver and SctpExport classes
       - sendBufferSize parameter for all *Export classes
       - templateId no longer configuration parameter
       Changes in draft-muenz-ipfix-configuration-04:
       - first version in yang
       - Collecting Process can be configured for file import
       - Collecting Process can be configured to export received
         records without modifications (e.g., to file or other
         collectors)
       - SCTP export parameter timedReliability
       - parameter for eligible local IP addresses for SCTP endpoint
       - all tags names uncapitalized, types names etc. capitalized
       - CacheParameters renamed as Cache
       - description attribute removed
       Changes in -03:
       - Linecard and Interface classes now have direction element
       - sec => s (SI unit)
       - optional description attribute for annotations
       - simplifications in ExportingProcess class
       - new parameters: observationPointId, meteringProcessId,
         selectorId, exportingProcessId (note that devices do not
         have to support the configuration of these parameters)
       - new FileExport class for exporting into a file
       - Reporting class renamed Option Class
       Changes in -02:
       - new structure without next pointers
       - packet reporting and flow metering replaced by record cache
       - added reporting with options";
   }

   grouping InformationElement {
     description "Parameters of an Information Element.";

     leaf ieEnterpriseNumber {
       description "Omitted in the case of an IETF specified Information
         Elements.";
       type uint32;
     }

     choice NameOrId {
       mandatory true;
       leaf ieName {
         type string;
       }
       leaf ieId {
         type uint16;
       }
     }

     leaf ieLength {
       description "Length can be omitted if a default length exists for
         the specified Information Element.";
       type uint16;
     }
   }


   typedef Direction {
     description "Direction of packets going through an interface or
       linecard.";

     type enumeration {
       enum ingress;
       enum egress;
       enum both;
     }
   }

   grouping Interface {
     description "Interface as input to Observation Point.";

     choice IndexOrName {
       description "Index or name of the interface as stored in the
         ifTable of IF-MIB.";
       reference "RFC 1229.";
       mandatory true;
       leaf ifIndex { type uint32; }
       leaf ifName { type string; }
     }

     leaf direction {
       description "Direction of packets. If not applicable (e.g., in
         the case of a sniffing interface in promiscuous mode), this
         parameter is omitted";
       type Direction;
       default both;
     }
   }

   grouping Linecard {
     description "Linecard as input to Observation Point.";

     choice IndexOrName {
       description "Index or name of the linecard as stored in the
         entPhysicalTable of ENTITY-MIB.";
       reference "RFC 4133.";
       mandatory true;
       leaf entPhysicalIndex { type uint32; }
       leaf entPhysicalName { type string; }
     }

     leaf direction {
       description "Direction of packets. If not applicable (e.g., in
         the case of a sniffing interface in promiscuous mode), this
         parameter is omitted";
       type Direction;
       default both;
     }
   }

   container ipfix {

     list collectingProcess {
       description "Parameters of a Collecting Process.";
       key name;

       leaf name {
         description "Arbitrary but unique name of the Collecting
           Process.";
         type string;
       }

       list receiver {
         description "Receiver parameters.";
         key name;

         leaf name { type string; }

         choice TransportProtocol {
           mandatory true;
           container sctpReceiver {
             description "SCTP receiver parameters.";
             reference "RFC 4960.";
             leaf-list ipAddress {
               description "List of eligible local IP addresses to be
                 used by the SCTP endpoint. If omitted, all locally
                 assigned IP addresses are used by the SCTP endpoint.";
               type inet:ip-address;
             }
             leaf transportPort {
               mandatory true;
               type inet:port-number;
             }
             leaf maxAllowedStreams {
               description "Maximum number of allowed inbound streams
                 per SCTP association.";
               type uint16;
             }
           }
           container udpReceiver {
             description "UDP receiver parameters.";
             leaf ipAddress {
               description "If omitted, all locally assigned IP
                 addresses are used by the UDP endpoint.";
               type inet:ip-address;
             }
             leaf transportPort {
               mandatory true;
               type inet:port-number;
             }
             leaf defaultTemplateLifetime { type uint32; }
           }
           container tcpReceiver {
             description "TCP receiver parameters.";
             leaf ipAddress {
               description "If omitted, all locally assigned IP
                 addresses are used by the TCP endpoint.";
               type inet:ip-address;
             }
             leaf transportPort {
               mandatory true;
               type inet:port-number;
             }
           }
           container fileReader {
             description "File Reader parameters.";
             leaf uri {
               mandatory true;
               type yang:uri;
             }
           }
         }
       }

       leaf-list exportingProcess {
         description "Export of received records without any
           modifications. Records are processed by all Exporting
           Processes in the list.";
         type keyref { path "/ipfix/exportingProcess/name"; }
       }
     }

     list observationPoint {
       description "Parameters of an Observation Point.";
       key name;

       leaf name {
         description "Arbitrary but unique name of the Observation
           Point.";
         type string;
       }

       leaf observationPointId {
         description "If omitted, the Observation Point ID is assigned
           by the monitoring device.";
         type uint32;
       }

       leaf observationDomainId {
         description "If omitted, the Observation Domain ID is assigned
           by the monitoring device.";
         type uint32;
       }

       choice OPType {
         mandatory true;
         container interface { uses Interface; }
         container linecard { uses Linecard; }
       }

       leaf-list selectionProcess {
         description "Selection Processes in this list process packets
           in parallel.";
         type keyref { path "/ipfix/selectionProcess/name"; }
       }

     }

     list selectionProcess {
       description "Parameters of a Selection Process (i.e., Primitive
         Selector).";
       key name;

       leaf name {
         description "Arbitrary but unique name of the Selection
           Process.";
         type string;
       }

       leaf selectorId {
         description "If omitted, the Selector ID is assigned by the
           monitoring device.";
         type uint32;
       }

       choice Method {
         description "See PSAMP-MIB for details about the selection
           methods and their parameters.";
         reference "draft-ietf-psamp-mib-06.";
         mandatory true;
         leaf selectAll {
           type empty;
         }
         container sampCountBased {
           leaf interval { type uint32; }
           leaf spacing { type uint32; }
         }
         container sampTimeBased {
           leaf interval { type uint32; }
           leaf spacing { type uint32; }
         }
         container sampRandOutOfN {
           leaf population { type uint32; }
           leaf sample { type uint32; }
         }
         container sampUniProb {
           leaf probability {
             description "The given value must be divided by
               4294967295.";
             type uint32;
           }
         }
         container sampNonUniProb {
           description "In PSAMP-MIB, these are OIDs.";
           leaf function { type string; }
           leaf funcParam { type string; }
         }
         container sampFlowState {
           description "In PSAMP-MIB, these are OIDs.";
           leaf function { type string; }
           leaf funcParam { type string; }
         }
         container filterMatch {
           leaf fieldId { type uint32; }
           leaf startValue { type string; }
           leaf stopValue { type string; }
           leaf mask { type string; }
         }
         container filterHash {
           description "In PSAMP-MIB, function and funcParam are OIDs.";
           leaf addrType { type inet:ip-version; }
           leaf headerBits { type string; }
           leaf payloadBytes { type uint32; }
           leaf payloadBits { type string; }
           leaf function { type string; }
           leaf funcParam { type string; }
           leaf inputBits { type uint32; }
           leaf outputBits { type uint32; }
           leaf outputMask { type string; }
           leaf selection { type string; }
         }
         container filterRState {
           description "In PSAMP-MIB, vendorFunc is OID.";
           leaf function { type int32; }
           leaf negate { type boolean; }
           leaf ifIndex {
             description "Index of the interface as stored in the
               ifTable of IF-MIB.";
             reference "RFC 2863.";
             type uint32;
           }
           leaf startAS { type inet:as-number; }
           leaf stopAS { type inet:as-number; }
           leaf vendorFunc { type string; }
         }
       }

       leaf-list selectionProcess {
         description "A Selection Process may pass selected packets or
           records to further Selection Processes, building Selection
           Sequences. All Selection Processes in this list process
           packets or records in parallel.";
         type keyref { path "/ipfix/selectionProcess/name"; }
       }

       leaf-list cache {
         description "Caches in this list receive packets or records in
           parallel.";
         type keyref { path "/ipfix/cache/name"; }
       }
     }

     list cache {
       description "Parameters of a Cache.";
       key name;

       leaf name {
         description "Arbitrary but unique name of the Cache.";
         type string;
       }

       leaf cacheType {
         mandatory true;
         type enumeration {
           enum immediate {
             description "Flow expiration after the first packet,
               generation of Packet Records.";
           }
           enum normal {
             description "Flow expiration after active and idle timeout,
               generation of Flow Records.";
           }
           enum permanent {
             description "No flow expiration, periodical export after
               active timeout, generation of Flow Records.";
           }
         }
       }

       leaf maxRecords { type uint32; }

       leaf activeTimeout { type yang:timeticks; }

       leaf idleTimeout { type yang:timeticks; }

       container cacheLayout {
         list field {
           min-elements 1;
           key name;
           leaf name { type string; }
           uses InformationElement;
           leaf isFlowKey { type empty; }
         }
       }

       leaf-list exportingProcess {
         description "Records are exported by all Exporting Processes in
           the list.";
         type keyref { path "/ipfix/exportingProcess/name"; }
       }
     }

     list exportingProcess {
       description "Parameters of an Exporting Process.";
       key name;

       leaf name {
         description "Arbitrary but unique name of the Exporting
           Process.";
         type string;
       }

       leaf exportingProcessId {
         description "If omitted, the Exporting Process ID is assigned
           by the monitoring device.";
         type uint32;
       }

       list destination {
         key name;

         leaf name { type string; }

         leaf type {
           description "Transport Session type according to IPFIX-MIB";
           reference "draft-ietf-ipfix-mib-02.";
           type enumeration {
             enum primary;
             enum secondary;
             enum duplicate;
             enum loadBalancing;
             enum unused;
           }
         }

         choice TransportProtocol {
           mandatory true;
           container sctpExport {
             description "SCTP export parameters.";
             reference "RFC 3758, RFC 4960.";
             leaf destinationIpAddress {
               mandatory true;
               type inet:ip-address;
             }
             leaf destinationTransportPort {
               type inet:port-number;
               default 4739;
             }
             leaf-list sourceIpAddress {
               description "List of eligible local IP addresses to be
                 used by the SCTP endpoint. If omitted, all locally
                 assigned IP addresses are used by the local endpoint.";
               type inet:ip-address;
             }
             leaf sendBufferSize { type uint32; }
             leaf timedReliability {
               description "PR-SCTP lifetime for IPFIX Messages
                 containing Data Sets only.";
               type yang:timeticks;
               default 0;
             }
             leaf numberOfStreams {
               description "Number of outbound streams requested for the
                 SCTP association.";
               type uint16;
             }
             leaf orderedDelivery {
               description "Ordered delivery of IPFIX Messages
                 containing Data Sets.";
               type boolean;
               default "true";
             }
           }
           container udpExport {
             description "UDP export parameters.";
             leaf destinationIpAddress {
               mandatory true;
               type inet:ip-address;
             }
             leaf destinationTransportPort {
               type inet:port-number;
               default 4739;
             }
             leaf sourceIpAddress {
               description "Source IP address. If omitted, the address
                 assigned to the outgoing interface is used.";
               type inet:ip-address;
             }
             leaf sendBufferSize { type uint32; }
             leaf templateRefreshTimeout { type yang:timeticks; }
             leaf templateRefreshPacket { type uint32; }
             leaf optionTemplateRefreshTimeout { type yang:timeticks; }
             leaf optionTemplateRefreshPacket { type uint32; }
           }
           container tcpExport {
             description "TCP export parameters.";
             leaf destinationIpAddress {
               mandatory true;
               type inet:ip-address;
             }
             leaf destinationTransportPort {
               type inet:port-number;
               default 4739;
             }
             leaf sendBufferSize { type uint32; }
           }
           container fileWriter {
             description "File Writer parameters.";
             leaf uri {
               mandatory true;
               type yang:uri;
             }
           }
         }

         list option {
           key name;
           leaf name { type string; }
           leaf type {
             mandatory true;
             type enumeration {
               enum "meteringStatistics" {
                 description "Metering Process Statistics.";
                 reference "RFC 5101, section 4.1.";
               }
               enum "meteringReliability" {
                 description "Metering Process Reliability Statistics.";
                 reference "RFC 5101, section 4.2.";
               }

               enum "exportingReliability" {
                 description "Exporting Process Reliability
                   Statistics.";
                 reference "RFC 5101, section 4.3.";
               }
               enum "flowKeys" {
                 description "Flow Keys.";
                 reference "RFC 5101, section 4.4.";
               }
               enum "selectionSequence" {
                 description "Selection Sequence and Selector Reports.";
                 reference "draft-ietf-psamp-protocol-09, section 6.5.1
                   and 6.5.2.";
               }
               enum "selectionStatistics" {
                 description "Selection Sequence Statistics Report.";
                 reference "draft-ietf-psamp-protocol-09, section
                   6.5.3.";
               }
               enum "accuracy" {
                 description "Accuracy Report.";
                 reference "draft-ietf-psamp-protocol-09, section
                   6.5.4.";
               }
               enum "reducingRedundancy" {
                 description "Application of
                   ipfix-reducing-redundancy.";
                 reference "draft-ietf-ipfix-reducing-redundancy-04";
               }
             }
           }
           leaf timeout {
             description "Time interval for exporting option data.";
             type yang:timeticks;
             default 0;
           }
           container optionTemplate {
             description "If no Option Template is specified, the
               Exporter defines a template according to option type and
               available option data.";
             presence "If present, the Exporter is to use this Option
               Template to export the option data.";
             list optionField {
               key name;
               ordered-by user;
               leaf name { type string; }
               uses InformationElement;
               leaf isScope { type empty; }
             }
           }
         }
       }
     }
   }
 }
