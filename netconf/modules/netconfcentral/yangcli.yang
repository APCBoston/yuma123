module yangcli {

    namespace "http://netconfcentral.com/ns/yangcli";

    prefix "yc";

    import ncx { prefix ncx; }

    import ncxtypes { prefix nt; }

    organization  "Netconf Central";

    contact "Andy Bierman <support@netconfcentral.com>.";

    description 
       "
        Command Line Interface for the NETCONF protocol: Manager side

        Usage:
           yangcli [parameters]

        Normal Mode:
           An interactive CLI shell with command line history.

        Autostart-mode:
           If the 'agent' parameter is present, then yangcli will
 	   attempt to connect to that agent upon startup.  If the
           'user' and 'password' parameters are also present, then
           the user will not be prompted before the connection 
           is attempted.

         Script-mode:
            If the 'run-script' parameter is present, then the
            specified script will be run automatically upon startup
      
         ";

    revision 2008-08-01 {
       description "Initial yang version started from ncxcli v 0.2";
    }

    grouping KorP {
      choice k-or-p {
        leaf key {
          description
           "The full filespec for the key the program should use
            when connecting to the agent";
          type string;
        }

        leaf password {
          description
            "User password to use for NETCONF sessions.
             If none, then user will be prompted before connecting.";
          type string;
          ncx:password;
        }
      }
    }

    grouping HelpMode {
      choice brief-full {
        leaf brief {
          description "Show brief help text";
          type empty;
        }
        leaf full {
          description "Show full help text";
          type empty;
        }
      }
    }

    container yangcli {
      ncx:cli;

      description
        "CLI Parameter Set for the NETCONF Manager Application.";

      leaf agent {
        description
          "IP address or DNS name of the NETCONF agent target.
           If none, then the program will not try to auto-connect
           upon startup";
        type string;
      }

      leaf batch-mode {
        description
          "If present, the interactive CLI will not be used.
           A script should be provided with the 'run-script'
           parameter, or else the program will simply exit.";
         type empty;
      }

      leaf conf {
        description
          "The name of the text config file to use for CLI params.
           Any parameter except this one can be set via the
           command line of the config file.";
         type string;
      }

      leaf default-module {
        description
           "Default module name string to use before 'netconf' 
            and 'ncx' are tried.  The module prefix must be
            used for other modules.";
         type nt:NcxName;
      }

      leaf help {
        description
          "Print help text for the program.
           Will cause the program to terminate after
           the help text is printed.";
        type empty;
      }

      uses KorP;

      leaf log {
        description
           "Filespec for the log file to use instead of STDOUT.";
        type string;
      }

      leaf log-append {
        description
           "If present, the log will be appended not over-written.
            If not, the log will be over-written.
            Only meaningful if the 'logfile' parameter is
            also present.";
        type empty;
      }

      leaf log-level {
        description
          "Sets the debug logging level for the program.";
        type nt:NcDebugType;
      }

      leaf-list modules {
        description
           "List of NCX module names to load at boot-time.
            Any imported modules required will be loaded automatically.";
        type nt:NcModuleSpec;
      }

      leaf no-autocomp {
        description
          "If present, then no partial keywords will be 
           checked for interactive or script commands.
           By default, the first match for a partial keyword
           will be used if no definition is found for
           a command name or parameter name.";
        type empty;
      }
 
      leaf no-autoload {
        description
          "If present, then no modules (except this one)
           will be automatically loaded upon startup or
           upon session startup with an agent. Instead,
           the 'load-module' command must be used to
           explicitly load all the desired definition modules.";
        type empty;
      }

      leaf no-fixorder {
        description
          "If present, then parameters will not be
           automatically sent to the agent in the
           correct order.  Instead, the specified order
           will be used.";
        type empty;
      }
 
      leaf run-script {
        description
          "The specified script will be invoked upon startup.
           If the auto-connect parameters are provided, then
           a session will be established before running the
           script.  If a quoted string is used, then any parameters
           after the script name will be passed to the script.";
         type string;
      }

      leaf user {
        description
           "User name to use for NETCONF sessions.
            If none, then user will be prompted before connecting.";
        type nt:NcxUserName;
      }

      leaf version {
        description
          "Print version info for the program.
           Will cause the program to terminate after
           the version text is printed.";
        type empty;
      }
    }

    rpc connect {
      description "Connect to a NETCONF agent.";
      ncx:rpc-type exec;
      input {
        leaf user {
          description
             "User name to use for NETCONF sessions.";
          type nt:NcxUserName;
	  mandatory true;
        }

        uses KorP {
          choice k-or-p {
            mandatory true;
            leaf key { mandatory true; }
            leaf password { mandatory true; }
          }
        }

        leaf agent {
           description
             "IP address or DNS name of the NETCONF agent target.";
          type string;
	  mandatory true;
        }
      }
    }

    rpc create {
      description
       "Create some NETCONF config data with the edit-config operation";
      ncx:rpc-type config;
      input {
        choice from {
          default from-cli;

          leaf from-local {
            description "Use the local variable as the content";
            type nt:NcxIdentifier;
          }

          leaf from-global {
            description "Use the global variable as the content";
            type nt:NcxIdentifier;
          }

          leaf from-cli {
            description "Get the content from user keyboard input";
            type empty;
          }
        }

        leaf target {
          description 
           "Xpath expression indicating the node which is going
            to be the parent of the content. The string '/'
            indicates a child of the 'config' element.";
          type string;
        }
      }
    }

    rpc help {
      description "Print the yangcli help text";
      ncx:rpc-type exec;
      input {
        choice helptype {
          leaf command {
            description "Show help for the specified command,
                         also called an RPC method";
            type nt:NcxIdentifier;
          }
          leaf commands {
            description "Show info for all local commands";
            type empty;
          }
          leaf notification {
            description "Show help for the specified notification";
            type nt:NcxIdentifier;
          }
          leaf object {
            description "Show help for the specified object";
            type nt:NcxIdentifier;
          }
          leaf type {
            description "Show help for the specified type";
            type nt:NcxIdentifier;
          }
        }
        uses HelpMode;
      }
    }

    rpc load {
      description "Internal command to load a module or other file.";
      ncx:rpc-type exec;
      input {
        leaf module {
          description
             "Module name to load";
          type nt:NcxName;
          mandatory true;
        }
      }
    }

    rpc quit {
      description "Quit the yangcli application";
      ncx:rpc-type exec;
    }

    rpc run {
      description "Internal command to run a script.";
      ncx:rpc-type exec;
      input {
        leaf script {
           description "script filespec to run";
           type string;
           mandatory true;
        }

        // hardwired parameter names required at this time
        // just allow 9 parameter/value pairs
        // P0 is reserved for the name of the called script

        leaf P1 {
           description "script parameter $1";
           type string;
        }
        leaf P2 {
           description "script parameter $2";
           type string;
        }
        leaf P3 {
           description "script parameter $3";
           type string;
        }
        leaf P4 {
           description "script parameter $4";
           type string;
        }
        leaf P5 {
           description "script parameter $5";
           type string;
        }
        leaf P6 {
           description "script parameter $6";
           type string;
        }
        leaf P7 {
           description "script parameter $7";
           type string;
        }
        leaf P8 {
           description "script parameter $8";
           type string;
        }
        leaf P9 {
           description "script parameter $9";
           type string;
        }
      }
    }

    rpc save {
      description "Meta command to save configuration edits.";
      ncx:rpc-type exec;
    }

    rpc show {
      description "Local show command for yangcli info.";
      ncx:rpc-type exec;
      input {
        choice showtype {
          leaf module {
            description "Show full info for one module";
            type nt:NcxIdentifier;
          }

          leaf modulelist {
            description "Show brief info for all modules";
            type empty;
          }

          leaf modules {
            description "Show info for all modules";
            type empty;
          }

          leaf local {
            description "Show info for one local user variable";
            type nt:NcxName;
          }

          leaf locals {
            description "Show info for all local user variables";
            type empty;
          }

          leaf global {
            description "Show full info for one global user variable";
            type nt:NcxName;
          }

          leaf globals {
            description "Show info for all global user variables";
            type empty;
          }

          leaf objects {
            description 
              "Show config database objects available at this time";
            type empty;
          }
         
          leaf vars {
            description "Show truncated info for all program variables";
            type empty;
          }

          leaf version {
            description "Show yangcli version info";
            type empty;
          }
        }
        uses HelpMode;
      }
    }

    rpc pwd {
      description "Print the current working directory.";
      ncx:rpc-type exec;
    }

    rpc cd {
      description "Change the current working directory.";
      ncx:rpc-type exec;
      input {
        leaf dir { 
           description "Directory path to use.";
           type string;
           mandatory true;
        }
      }
   }

   rpc fill {
     description 
       "Fill a value for use in a NETCONF PDU or other operation.
  
        Used in an assignment statement to create a variable
        for later use:

            $foo = fill --target=/t:foo-con/bar-list[index='fred'] \
                        --optional \
                        --current-value=$bar    ";
     ncx:rpc-type exec;
     input {
       leaf target {
         description 
           "XPath target object to fill.  If prefixes are missing
            then the first match in any namespace will be used.";

         // type instance-identifier;  TBD

         type string {
           length "1..max";
         }
         mandatory true;
       }

       leaf optional {
         description 
           "If present, then prompt for leafs that are optional.
            If not, skip these objects.";
         type empty;
       }

       leaf current-value {
         description
           "Contains a string representing the location
            of the existing variable to use as a template
            for the defaults in the filled variable.

            If a node is present in the current-value,
            then it will be presented as the default
            value for the corresponding leaf.  Otherwise
            the YANG default will be used instead, if any.

            If the 'optional' parameter is not present,
            then optional parameters with current values
            will be skipped.  If the current-value contains
            an associated value, it will be used in this case.
            Mandatory parameters will never be skipped.

            The current value can be specified in any of
            the following 5 variants:

            1) The global variable 'foo' would be specified as:
 
                current-value=$$foo

            2) The local variable 'bar' would be specified as:
 
                current-value=$bar

            An error will be reported if the global or local
            variable does not reference the same object type
            as the target parameter.

            3) Inline XML could be specified as:

                current-value=[<x:bar>\
                                 <x:baz>17</x:baz>\
                               </x:bar>]

            4) An external file containing XML can be specified as:

                current-value=@foo.xml

            5) An external file in YANGCLI conf file format can
               be specified as:

                current-value=@foo.txt";
          
         type string {
           length "1..max";
         }
       }
     }
     output {
       anyxml data {
         description "The result of the fill operation.";
       }
     }
  }

}


