# Makefile for NETCONF project
#  
#   ncx directory

############### SOURCE PROFILE ##############################

SUBDIR_NM=ncx
SUBDIR_CPP=

############### TARGET PROFILE ##############################

TARGET=$(TBASE)/$(SUBDIR_NM)
LIB_INST=$(TBASE)/lib

ifdef MAXWELL
REAL_INST=/lib
else
REAL_INST=$(DESTDIR)/usr/lib
endif

# if the target is DEBIAN or RPM package, then
# install the include files
REAL_INC_INST=$(DESTDIR)/usr/include/yuma

######################### MAKE RULES ######################

all: ncxdummy ncxlib

#################### PLATFORM DEFINITIONS ############
include ../platform/platform.profile

################ DEPENDENCIES #########################
# depend rule must be included after the 'all' make rule

include ../platform/platform.profile.depend


test:

# build the library in any developer context
# and in the 1-pass RPM RELEASE build
# for ubunte RELEASE builds, only build if 
# this is the SHLIBS pass, not CLIENT, SERVER, or DEVELOPER
ifdef SERVER
# nothing to do for debian SERVER build
install:
else
ifdef CLIENT
# nothing to do for debian CLIENT build
install:
else
ifdef DEVELOPER
# just install the H files
install: includes
else
install: includes
ifndef STATIC
# install dynamic libncx file
	mkdir -p $(REAL_INST)
	install $(OWNER) $(GRP) \
	$(LIB_INST)/lib$(SUBDIR_NM).$(LIBNCXSUFFIX) $(REAL_INST)
#ifdef SHLIBS
# libncx.so --> libncx.so.1.0
# libncx.so.1 --> libncx.so.1.0
	(cd $(REAL_INST); \
	ln -s lib$(SUBDIR_NM).$(LIBNCXSUFFIX) lib$(SUBDIR_NM).$(LIBSUFFIX);\
	ln -s lib$(SUBDIR_NM).$(LIBNCXSUFFIX) lib$(SUBDIR_NM).$(LIBSUFFIX).$(LIBNCX_MAJOR_VERSION))
#endif
ifndef DESTDIR
ifndef MAC
# skip in MacOsX, RPM, and rest of debian fakeroot builds
	ldconfig
endif
endif
endif
endif
endif
endif

uninstall:
	rm -f $(REAL_INST)/lib$(SUBDIR_NM).$(LIBSUFFIX)*

ifdef SERVER
ncxlib:
else
ifdef CLIENT
ncxlib:
else
ifdef DEVELOPER
ncxlib:
else
ncxlib: $(LBASE)/lib$(SUBDIR_NM).$(LIBNCXSUFFIX)
endif
endif
endif

# this dummy rule keeps make from deleting the $(OBJS) as
# intermediate files
ncxdummy: dependencies $(OBJS)

clean:
	rm -f $(OBJS) $(LBASE)/lib$(SUBDIR_NM).*

superclean:
	rm -f *~  $(DEPS) dependencies $(OBJS) \
	$(LBASE)/lib$(SUBDIR_NM).*

distclean: superclean uninstall

$(LBASE)/libncx.so.$(SOVERSION): $(OBJS)
	gcc -shared -dynamic -Wl,-soname,libncx.so.$(SOVERSION) \
	-o $@ $(OBJS) -lc
	#cp $@ $@.$(LIBNCX_MAJOR_VERSION).$(LIBNCX_MINOR_VERSION)


#	gcc -shared -dynamic -Wl,-soname,libncx.so -o $@ $(OBJS) -lc

$(LBASE)/libncx.dylib: $(OBJS)
	gcc -shared -dynamiclib -std=gnu99 -current_version \
	$(SOVERSION) \
	-undefined dynamic_lookup \
	-o $@ -install_name libncx.dylib $(OBJS) -lxml2

includes:
ifndef SHLIBS
ifndef SERVER
ifndef CLIENT
	mkdir -p $(REAL_INC_INST)/ncx
	mkdir -p $(REAL_INC_INST)/platform
	cp *.h $(REAL_INC_INST)/ncx
	cp ../platform/procdefs.h $(REAL_INC_INST)/platform
endif
endif
endif

.PHONY: includes

# prevent the make program from choking on all the symbols
# that get generated from autogenerated make rules
.NOEXPORT:

ifndef DEVELOPER
include dependencies
endif

