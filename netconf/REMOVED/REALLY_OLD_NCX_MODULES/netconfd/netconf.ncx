ncx-module netconf {
  header {
    description 
      "NETCONF Protocol 
        * Data Types
        * Parmsets
        * RPCs
       Translated from RFC 4741.";
    version 0.6;
    owner ietf;
    application netconf;
    copyright 
      "Copyright (C) Andy Bierman (2006-2007).  All Rights Reserved.";
    contact-info 
      "Translated by Andy Bierman.
       Send comments to <ietf@andybierman.com>.";
    namespace "urn:ietf:params:xml:ns:netconf:base:1.0";
    last-update "2006-11-09";
    revision-history {
      0.6 "Fix bug in RpcErrorType";
      0.5 "Align to prot-12 version.";
      0.4 "Align to prot-10 version.";
      0.1 "Initial version.";
    }
  }

  imports {
    import ncxtypes;
    import xsd;
  }

  definitions {

    type language {
      description "XML language type for LangString";
      syntax {
        string pattern = '[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*';
      }
    }

    type SessionId {
      description "NETCONF Session Id";
      syntax { uint (1..); } 
    }

    type SessionIdOrZero {
      description 
        "NETCONF Session Id or Zero to indicate none";
      syntax { uint; } 
    }

    #
    # NETCONF Hello PDU Data Types
    #
    
    type NcCapabilities {
      description "Generic Capabilities List.";
      syntax { 
        xcontainer [capability] {
          anyURI capability;
        }
      }
    }

    type NcAgentHello {
      description "Generic Agent Hello Message Parameters.";
      syntax {
        container {
           NcCapabilities capabilities;
           SessionId session-id;
        }
      }
    }

    type NcManagerHello {
      description "Generic Manager Hello Message Parameters.";
      syntax {
        container {
           NcCapabilities capabilities;
        }
      }
    }

    #
    # NETCONF Operations PDU Data Types
    #

    type LangString {
      description "XML string with a language attribute.";
      syntax { string; }
      metadata { language lang?; }
    }


    type MessageId {
      description "NETCONF message-id attribute";
      syntax { string (1..4095); }
    }

    type ErrorType {
      description "NETCONF Error Type";
      syntax { 
        string = { transport rpc protocol application };
      }
    }

    type ErrorTag {
      description "NETCONF Error Tag";
      syntax { 
        string = { 
          in-use
          invalid-value 
          too-big 
          missing-attribute
          bad-attribute
          unknown-attribute
          missing-element
          bad-element
          unknown-element 
          unknown-namespace
          access-denied 
          lock-denied 
          resource-denied 
          rollback-failed 
          data-exists 
          data-missing 
          operation-not-supported 
          operation-failed
          partial-operation 
        };
      }
    }

    type ErrorSeverity {
      description "NETCONF Error Severity";
      syntax { 
        string = { error warning };
      }
    }

    type ErrorInfoContent {
      description 
        "NETCONF standard <error-info> Element Content;";
      syntax { 
        container {
          QName     bad-attribute*;
          QName     bad-element*;
          QName     ok-element*;
          QName     err-element*;
          QName     noop-element*;
          SessionIdOrZero session-id?;
        }
      }
    }

    type RpcErrorType {
      description "NETCONF <rpc-error> Element Content";
      syntax { 
        container {
          ErrorType        error-type;
          ErrorTag         error-tag;
          ErrorSeverity    error-severity;
          string           error-app-tag?;
          string           error-path?;
          LangString       error-message?;
          anyxml           error-info?;
        }
      }
    }

    type RpcDataReplyType {
      description "NETCONF <rpc-reply> Error and/or Data Content";
      syntax { 
        container {
          RpcErrorType  rpc-error*;
          root          data?;   # force type checking in NCX
        }
      }
      metadata {
        MessageId message-id;
      }
    }

    type RpcOkReplyType {
      description "NETCONF <rpc-reply> OK Content.";
      syntax { 
        choice {
          empty          ok;
          RpcErrorType  rpc-error*;
        }
      }
      metadata {
        MessageId message-id;
      }
    }

    type RpcReplyType {
      description "NETCONF <rpc-reply> construct. ";
      syntax { 
        choice {
           empty          ok;
         [RpcErrorType  rpc-error*;
           root          data?;     # force type checking in NCX
         ]
        }
      }
      metadata {
        MessageId message-id;
      }
    }

    type ConfigInlineType {
      description 
        "NETCONF <config> element content.  

         Note: The <config> base type is 'root', not 'anyxml'.
         For NCX automation purposes, this type contains any 
         number of application containers, each containing
         zero or more parmsets.";
      syntax { root; }
    }

    type TestOptionType {
      description 
        "NETCONF <test-option> Element Content.
         This is extended with the test-only enumeration.
         The 'set' option has no real effect since
         the entire PDU is always validated before any
         of it is applied (always test-then-set).";
      syntax { string = { test-then-set set test-only }; }
      default "set";
    }

    type ErrorOptionType {
      description "NETCONF <error-option> Element Content";
      syntax { 
        string = { stop-on-error continue-on-error rollback-on-error };
      }
      default "stop-on-error";
    }

    type FilterType {
      description "NETCONF <filter> Attribute Content";
      syntax { string = { subtree xpath }; }
      default "subtree";
    }

    type InlineFilterType {
      description "NETCONF <filter> Element Content";
      syntax { anyxml; }
      metadata { 
        FilterType type;
        string     select?;    # Xpath or C expression
      }
    }
       
    type EditOperationType {
      description "NETCONF <operation> Attribute Content";
      syntax { 
        string = { merge replace create delete };
      }
    }

    type DefaultOperationType {
      description "NETCONF <default-operation> Element Content";
      syntax { 
        string = { merge replace none };
      }
      default "merge";
    }

    type ConfirmTimeoutType {
      description 
        "NETCONF <confirm-timeout> Element Content in seconds";
      syntax { 
        uint (1..);
      }
      default "600";   # 10 minutes
    }

    type ConfigURIType {
      syntax { anyURI; }
    }
    
    type GetConfigSourceType {
      description "NETCONF config <source> Parameter.";
      syntax {
        choice {
          empty candidate;
	  empty running;
          empty startup;
          ConfigURIType url;
        }
      }
    }

    type RpcOperationSourceType {
      description "NETCONF <source> Parameter.";
      syntax {
        choice {
          ConfigInlineType config;
          empty candidate;
          empty running;
          empty startup;
          ConfigURIType    url;
        }
      }
    }

    type RpcOperationTargetType {
      description "NETCONF <target> Parameter.";
      syntax {
        choice {
	  empty candidate;
	  empty running;
          empty startup;
          ConfigURIType  url;
        }
      }
    }

    #
    # NETCONF Shared Standard Method Parameter Sets
    #

    parmset LockPS {
      description "NETCONF <lock> and <unlock> Parameter Sets.";
      order strict;
      type rpc;
      parms {
        parm target {
          description "Particular configuration to lock or unlock.";
          # prot-11 is wrong here; correct input is config name
          type RpcOperationTargetType;
        }
      }
    }

    #
    # NETCONF Standard RPC Methods
    # 

    rpc get-config {
      description "NETCONF <get-config> operation.";
      rpc-type monitor;
      parms {
        parm source {
          description "Particular configuration to retrieve.";
          type GetConfigSourceType;
        }
        parm filter {
          description "Subtree or Xpath filter to use.";
          type InlineFilterType;
          usage optional;
        }
      }
      output RpcDataReplyType;
    }

    rpc edit-config {
      description "NETCONF <edit-config> operation.";
      rpc-type config;
      parms {
        parm target {
          description "Particular configuration to edit.";
          # prot-11 is wrong here; correct input is config name
          type RpcOperationTargetType;
        }
        parm default-operation {
          description 
            "Default operation to apply if not explicitly set.";
          type DefaultOperationType;
        }
        parm test-option {
          description 
            "Test option if validate capability supported.
             The 'validate' capability must be present to set
             this object to 'test-then-set'.";
          condition "capability(ietf:validate)";
          type TestOptionType;
          # Conditional is the default usage if 'condition' is present
          usage optional;
        }
        parm error-option {
          description 
            "Error recovery option.";
          type ErrorOptionType;
        }
        choice {
          parm config {
            description 
              "Inline Config content: <config>element.";
            type ConfigInlineType;
          }
          parm url {
            description 
              "Pointer to Config content: <url> element.";
            condition "capability(ietf:url)";
            type ConfigURIType;
          }
        }
      }
      output RpcOkReplyType;
    }

    rpc copy-config {
      description "NETCONF <copy-config> operation.";
      rpc-type config;
      parms {
        parm target {
          description "Particular configuration to copy to.";
          type RpcOperationTargetType;
        }
        parm source {
          description "Particular configuration to copy from.";
          type RpcOperationSourceType;
        }
      }
      output RpcOkReplyType;
    }

    rpc delete-config {
      description "NETCONF <delete-config> operation.";
      rpc-type config;
      parms {
        parm target {
          description "Particular configuration to delete.";
          type RpcOperationTargetType;
        }
      }
      output RpcOkReplyType;
    }

    rpc lock {
      description "NETCONF <lock> operation.";
      rpc-type config;
      input LockPS;
      output RpcOkReplyType;
    }

    rpc unlock {
      description "NETCONF <unlock> operation.";
      rpc-type config;
      input LockPS;
      output RpcOkReplyType;
    }

    rpc get {
      description "NETCONF <get> operation.";
      rpc-type monitor;
      parms {
        parm filter {
          description 
            "Filter to apply to <running> config or state data.";
          type InlineFilterType;
          usage optional;
        }
      }
      output RpcDataReplyType;
    }

    rpc close-session {
      description "NETCONF <close-session> operation.";
      rpc-type exec;
      output RpcOkReplyType;
    }

    rpc kill-session {
      description "NETCONF <kill-session> operation.";
      rpc-type exec;
      parms {
        parm session-id {
          description "Particular session to kill.";
          type SessionId;
        }
      }
      output RpcOkReplyType;
    }

    rpc commit {
      description "NETCONF <commit> operation.";
      condition "capability(ietf:candidate)";
      rpc-type config;
      parms {
        parm confirmed {
          description "Request a confirmed commit.";
          condition 
            "capability(ietf:confirmed-commit) and
             capability(ietf:candidate)";
          type empty;
        }
        parm confirm-timeout {
          description 
            "Request a specific timeout period for a confirmed commit.";
          condition 
            "capability(ietf:confirmed-commit) and
             capability(ietf:candidate)";
          type ConfirmTimeoutType;
        }
      }
      output RpcOkReplyType;
    }

    rpc discard-changes {
      description "NETCONF <discard-changes> operation.";
      condition "capability(ietf:candidate)";
      rpc-type config;
      output RpcOkReplyType;
    }

    rpc validate {
      description "NETCONF <validate> operation.";
      condition "capability(ietf:validate)";
      rpc-type config;
      parms {
        parm source {
          description "Particular configuration to validate.";
          type RpcOperationSourceType;
        }
      }
      output RpcOkReplyType;
    }
  }
}


