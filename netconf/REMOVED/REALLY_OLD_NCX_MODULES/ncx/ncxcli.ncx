ncx-module ncxcli {
  header {
    description 
       "
        Command Line Interface for the NETCONF Prototol

        Usage:
           ncxcli [parameters]

        Normal Mode:
           An interactive CLI shell with command line history.

        Autostart-mode:
           If the 'agent' parameter is present, then the agent will
 	   attempt to connect to that agent upon startup.  If the
           'user' and 'password' parameters are also present, then
           the user will not be prompted before the connection 
           is attempted.

         Script-mode:
            If the 'run-script' parameter is present, then the
            specified script will be run automatically upon startup
      
         ";
    version 0.2;
    owner ncx;
    application ncxcli;
    copyright "Copyright (C) 2007, Andy Bierman.";
    contact-info "Send comments to <ietf@andybierman.com>.";
    last-update "2007-02-20";
    revision-history {
       0.1 "Initial version";
       0.2 "Shortened name, added optional tags";
    }
  }

  imports {
    import ncxtypes;
    import netconf { RpcOkReplyType RpcDataReplyType };
  }

  definitions {

    parmset ncxcli {
      description
         "CLI Parameter Set for the NETCONF Manager Application.";

      order loose;
      type cli;

      parms {
        parm agent {
          description
             "IP address or DNS name of the NETCONF agent target.
              If none, then the program will not try to auto-connect
              upon startup";
          type string;
	  usage optional;
        }

        parm batch-mode {
          description
            "If present, the interactive CLI will not be used.
             A script should be provided with the 'run-script'
             parameter, or else the program will simply exit.";
           type empty;
           usage optional;   
        }

        parm conf {
          description
            "The name of the text config file to use for CLI params.
             Any parameter except this one can be set via the
             command line of the config file.";
           type string;
           usage optional;   
        }

	parm default-module {
          description
             "Default module name string to use before 'netconf' 
              and 'ncx' are tried.  The module prefix must be
              used for other modules.";
          type NcxName;
	  usage optional;
        }

        parm help {
          description
            "Print help text for the program.
             Will cause the program to terminate after
             the help text is printed.";
          type empty;
          usage optional;
        }

        choice {
          parm key {
            description
             "The full filespec for the key the program should use
              when connecting to the agent";
            type string;
	    usage optional;
          }

          parm password {
            description
               "User password to use for NETCONF sessions.
                If none, then user will be prompted before connecting.";
            type string;
	    usage optional;
          }
        }

	parm log {
          description
             "Filespec for the log file to use instead of STDOUT.";
          type string;
	  usage optional;
        }

	parm log-append {
          description
             "If present, the log will be appended not over-written.
              If not, the log will be over-written.
              Only meaningful if the 'logfile' parameter is
              also present.";
          type empty;
	  usage optional;
        }

        parm log-level {
          description
            "Sets the debug logging level for the program.";
          type NcDebugType;
          usage optional;
        }

	parm modules {
          description
             "List of NCX module names to load at boot-time.
              Any imported modules required will be loaded automatically.";
          type NcxModuleList;
	  usage optional;
        }

        parm no-autocomp {
          description
            "If present, then no partial keywords will be 
             checked for interactive or script commands.
             By default, the first match for a partial keyword
             will be used if no definition is found for
             a command name or parameter name.";
          type empty;
          usage optional;
        }
 
        parm no-autoload {
          description
            "If present, then no modules (except this one)
             will be automatically loaded upon startup or
             upon session startup with an agent. Instead,
             the 'load-module' command must be used to
             explicitly load all the desired definition modules.";
          type empty;
          usage optional;
        }

        parm no-fixorder {
          description
            "If present, then parameters will not be
             automatically sent to the agent in the
             correct order.  Instead, the specified order
             will be used.";
          type empty;
          usage optional;
        }
 
        parm run-script {
          description
            "The specified script will be invoked upon startup.
             If the auto-connect parameters are provided, then
             a session will be established before running the
             script.  If a quoted string is used, then any parameters
             after the script name will be passed to the script.";
           type string;
	   usage optional;
        }

        parm user {
          description
             "User name to use for NETCONF sessions.
              If none, then user will be prompted before connecting.";
          type NcxUserName;
	  usage optional;
        }

        parm version {
          description
            "Print version info for the program.
             Will cause the program to terminate after
             the version text is printed.";
          type empty;
          usage optional;
        }

      }
    }


    parmset NcxCliConnectPS {
      description
         "CLI Connect Parmset for the NETCONF Manager Application.";

      order loose;
      type rpc;

      parms {
        parm user {
          description
             "User name to use for NETCONF sessions.";
          type NcxUserName;
        }

        choice {
          parm password {
            description
               "User password to use for NETCONF sessions.
                If none, then user will be prompted before connecting.";
            type string;
          }

          parm key {
            description
             "The full filespec for the key the program should use
              when connecting to the agent";
            type string;
          }
        }

        parm agent {
          description
             "IP address or DNS name of the NETCONF agent target.";
          type string;
        }
      }
    }

    rpc connect {
      description "Connect to a NETCONF agent.";
      rpc-type exec;
      input NcxCliConnectPS;
      output RpcOkReplyType;
    }

    rpc help {
      description "Print the ncxcli help text";
      rpc-type exec;
      parms {
        choice {
          parm type {
            description "Show help for the specified type";
            type NcxIdentifier;
            usage optional;
          }
          parm parmset {
            description "Show help for the specified parmset";
            type NcxIdentifier;
            usage optional;
          }
          parm rpc {
            description "Show help for the specified RPC method";
            type NcxIdentifier;
            usage optional;
          }
          parm notif {
            description "Show help for the specified notification";
            type NcxIdentifier;
            usage optional;
          }
        }
        parm brief {
          type empty;
          usage optional;
        }
      }
 
      output RpcOkReplyType;
    }

    rpc load {
      description "Internal command to load a module or other file.";
      rpc-type exec;
      parms {
        parm module {
          description
             "Module name to load";
          type NcxName;
        }
      }
      output RpcOkReplyType;
    }

    rpc quit {
      description "Quit the NCXCLI application";
      rpc-type exec;
      output RpcOkReplyType;
    }

    rpc run {
      description "Internal command to run a script.";
      rpc-type exec;
      parms {
        parm script {
           description "script filespec to run";
           type string;
        }

        # hardwired parameter names required at this time
        # just allow 9 parameter/value pairs
        # P0 is reserved for the name of the called script

        parm P1 {
           description "script parameter $1";
           type string;
           usage optional;
        }
        parm P2 {
           description "script parameter $2";
           type string;
           usage optional;
        }
        parm P3 {
           description "script parameter $3";
           type string;
           usage optional;
        }
        parm P4 {
           description "script parameter $4";
           type string;
           usage optional;
        }
        parm P5 {
           description "script parameter $5";
           type string;
           usage optional;
        }
        parm P6 {
           description "script parameter $6";
           type string;
           usage optional;
        }
        parm P7 {
           description "script parameter $7";
           type string;
           usage optional;
        }
        parm P8 {
           description "script parameter $8";
           type string;
           usage optional;
        }
        parm P9 {
           description "script parameter $9";
           type string;
           usage optional;
        }
      }
      output RpcOkReplyType;
    }

    rpc save {
      description "Meta command to save configuration edits.";
      rpc-type exec;
      output RpcOkReplyType;
    }

    rpc show {
      description "Local show command for ncxcli info.";
      rpc-type exec;
      parms {
        choice {
          parm module {
            description "Show full info for one module";
            type NcxIdentifier;
          }

          parm modulelist {
            description "Show brief info for all modules";
            type empty;
          }

          parm modules {
            description "Show info for all modules";
            type empty;
          }

          parm local {
            description "Show full info for one local user variable";
            type NcxName;
          }

          parm global {
            description "Show full info for one global user variable";
            type NcxName;
          }
         
          parm vars {
            description "Show truncated info for all user variables";
            type empty;
          }

          parm version {
            description "Show ncxcli version info";
            type empty;
          }
        }

        parm brief {
          description"Show brief version of the requested help info.";
          type empty;
          usage optional;
        }

      }
      output RpcDataReplyType;
    }

  }
}


