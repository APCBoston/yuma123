ncx-module smi {
  header {
    description 
      "SMIv2 data types converted from the following source: 

        * RFC 2578: Structure of Management Information Version 2 (SMIv2)
          
      ";
    version 0.6;
    owner ietf;
    application types;
    contact-info 
      "Translated by Andy Bierman.
       Send comments to ietf@andybierman.com.";
    last-update "2007-09-16";
    revision-history {
       0.6 "Moved some TCs to nctypes.ncx, removed BITS";
       0.5 "Update based on NGO mailing list comments:
             change BITS back to list, fix bugs.";
       0.4 "Change BITS from list to ustring";
       0.3 "Try to align to smidump and draft-romascanu.";
       0.2 "Refine OID and other tabular data types.";
       0.1 "Initial version.";
    }
  }

  definitions {

    type INTEGER {
      description 
        "INTEGER from RFC 2578, page 8 and sec. 7.1.1.
         An enumerated integer is simply the 'enum' data type";
      syntax { int32; }
    }

    type OctetString {
      description "OCTET STRING from RFC 2578, page 8.";
      syntax { string (0..65535); }
    }

    type Integer32 {
      description "Integer32 from RFC 2578, sec. 7.1.1";
      syntax { int32; }
    }

    type IpAddress {
      description "IpAddress from RFC 2578, page 8."; 
      syntax { string; }
      appinfo {
        ncx:status deprecated;
        ncx:replaced-by "InetAddress";
      }
    }

    type Counter32 {
      description "Counter32 from RFC 2578, page 8.";
      syntax { uint32; }
      max-access read-only;
    }

    type Gauge32 {
      description "Gauge32 from RFC 2578, page 8.";
      syntax { uint32; }
    }

    type Unsigned32 {
      description "Unsigned32 from RFC 2578, page 8.";
      syntax { uint32; }
    }

    type TimeTicks {
      description "TimeTicks from RFC 2578, page 8.";
      syntax { uint32; }
    }

    type Opaque {
      description "Opaque from RFC 2578, page 8.";
      syntax { string; }
    }

    type Counter64 {
      description "Counter64 from RFC 2578, page 8.";
      syntax { uint64; }
      max-access read-only;
    }

    type Unsigned64 {
      description "Unsigned64 TC (missing) from RFC 2856.";
      syntax { uint64; }
    }

    type PhysAddress {
      description "PhysAddress TC from RFC 2579, page 4.";
      syntax { 
        string 
          pattern = "(((([0-9A-Fa-f]{2}):)*([0-9A-Fa-f]{2}))){0,1}";
      }
    }

    type ObjectIdentifier {
      description "OBJECT IDENTIFIER from RFC 2578, page 8.,
                   libsmi v0.4.5 output.";
      syntax { 
	string (2..) pattern ="[0-2](\.(0|([1-9]([0-9]*))))*";
      }
    }

    type AutonomousType {
      description "AutonomousType TC from RFC 2579, page 5.";
      syntax { ObjectIdentifier; }
    }

    type InstancePointer {
      description "
         A pointer to either a specific instance of a MIB object or
         a conceptual row of a MIB table in the managed device.  In
         the latter case, by convention, it is the name of the
         particular instance of the first accessible columnar object
         in the conceptual row.

         The two uses of this textual convention are replaced by
         VariablePointer and RowPointer, respectively.
        ";
      syntax { ObjectIdentifier; }
      appinfo {
         ncx:status deprecated;
      }
    }

    type VariablePointer {
      description 
        "VariablePointer TC from RFC 2579, page 6. smidump v0.4.5,

         A pointer to a specific object instance.  For example,
         sysContact.0 or ifInOctets.3.";
      syntax { ObjectIdentifier; }
    }

    type DateAndTime {
      description "DateAndTime TC from RFC 2579, pages 18 - 19.";
      syntax { 
        string (8..28);
      }
    }

    type TDomain {
      description "TDomain TC from RFC 2579, page 20.";
      syntax { ObjectIdentifier; }
    }

    type TAddress {
      description "TAddress TC from RFC 2579, page 20.";
      syntax { string (1..255); }
    }

  }
}


