ncx-module xsd {
  header {
    description
      "XSD Simple Data Types for use in NCX Modules";
    version 0.2;
    owner ncx;
    application ncx;
    copyright 
      "Copyright (C) Andy Bierman (2006).  All Rights Reserved.";
    contact-info 
      "Translated by Andy Bierman.
       Send comments to <ietf@andybierman.com>.";
    last-update "2006-11-09";
    revision-history {
      0.2 "moved language to another module since it is in a
           different namespace";
      0.1 "initial version";
    }
  }

  definitions {

# Added as YANG and NCX builtin type
#
#    type boolean {
#      description "XSD/C boolean type.";
#      syntax { 
#	enum = { false true };
#      }
#    }

    type integer {
      description 
        "Treating this as a string like in XSD. 
         This cannot be given a range like a number.";
      syntax {
        string pattern = '[\-+]?[0-9]+';
      }
    }

    type positiveInteger {
      description 
        "Treating this as a string like in XSD. 
         This cannot be given a range like a number";
      syntax {
         string pattern = '[\+]?[1-9]+[0-9]*';
      }
    }

    type negativeInteger {
      description 
        "Treating this as a string like in XSD. 
         This cannot be given a range like a number";
      syntax {
         string pattern = '\-[1-9]+[0-9]*';
      }
    }

    type nonNegativeInteger {
      description 
        "Treating this as a string like in XSD. 
         This cannot be given a range like a number";
      syntax {
         string pattern = '[\+]?[0-9]*';
      }
    }

    type nonPositiveInteger {
      description 
        "Treating this as a string like in XSD. 
         This cannot be given a range like a number";
      syntax {
        string pattern = '\-[1-9]+[0-9]*';
      }
    }

    type unsignedLong {
      syntax {
         uint64;
      }
    }

    type unsignedInt {
      syntax {
         uint32;
      }
    }

    type short {
      syntax {
         int32 (-32768..32767);
      }
    }

    type unsignedShort {
      syntax {
         uint32 (0..65535);
      }
    }

    type byte {
      syntax {
         int32 (-128..127);
      }
    }

    type unsignedByte {
      syntax {
         uint32 (0..255);
      }
    }

    type NMTOKEN {
      syntax {
        string pattern = '\c+';
      }
    }

    type Name {
      syntax {
        string pattern = '\i\c*';
      }
    }

    type QName {
      description  "This is wrong -- need to find real pattern";
      syntax {
        string pattern = '\i\c*';
      }
    }

    type anyURI {
      description  "This is wrong -- need to find real pattern";
      syntax {
        string (1..1023);                #  pattern = "\w+";
      }
    }

    type NCName {
      syntax {
        string pattern = '[\i-[:]][\c-[:]]*';
      }
    }

    type dateTime {
      syntax {
        string pattern = '.+T.+(Z|[+-].+)';
      }
    }
  }
}
