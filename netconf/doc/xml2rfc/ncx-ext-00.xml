<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc4741 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4741.xml'>
    <!ENTITY xmlspec PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml2/reference.W3C.REC-xml.xml'>
    <!ENTITY xsdspec PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml2/reference.W3C.REC-xmlschema-2.xml'>
    <!ENTITY notifspec PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-notification.xml'>

]>

<rfc category="std" docName="draft-bierman-ncx-ext-00" ipr="full3978">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes"?>
<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="no" ?>
<?rfc compact="no"?>
<?rfc iprnotified="no"?>

 <front>
  <title abbrev="NCX-EXT">
     Network Configuration Extensions : Protocol Extensions
  </title>
  <author fullname="Andy Bierman" initials="A.B."
            surname="Bierman">
   <organization>netconfcentral.org</organization>
   <address>
    <postal>
     <street></street>
     <city>Simi Valley</city>
     <region>CA</region>
     <code></code>
     <country>USA</country>
    </postal>
    <email>ietf@andybierman.com</email>
   </address>
  </author>

  <date month="August" year="2007" />
  <area>Management</area>
  <workgroup>Internet Engineering Task Force</workgroup>
  <keyword>NETCONF</keyword>
  <keyword>NCX</keyword>
  <keyword>XML</keyword>
  <abstract>
   <t>
    The standardization of network configuration interfaces for use 
    with the NETCONF protocol 
    requires a structured data modeling environment
    which promotes human usability and multi-vendor interoperability.
    The Network Configuration
    Extensions (NCX) are a set of specifications intended to address
    NETCONF data modeling issues.  This document defines
    some NETCONF protocol extensions
    for improving the functionality of some existing protocol operations.
   </t>
  </abstract>
 </front>

 <middle>
  <section title="Introduction">
   <t>
    The standardization of network configuration interfaces for use 
    with the <xref target="RFC4741">NETCONF</xref> protocol 
    requires a structured data modeling environment
    which promotes human usability, and multi-vendor interoperability.
    This document defines
    NETCONF protocol extensions for improving the functionality
    of some existing protocol operations.
   </t>

   <t>
    The Network Configuration Protocol utilizes the Extensible
    Markup Language <xref target="W3C.REC-xml"/>
    for encoding protocol messages used to
    manage network device configuration databases.
   </t>

   <t>
    <figure anchor="NETCONF_stack">
     <artwork>
<![CDATA[

 The NETCONF stack can be conceptually partitioned into four layers.

       Layer                Example
      +-------------+   +--------------------+ +-------------------+
  (4) |   Content   |   | Configuration data | | Notification data |
      +-------------+   +--------------------+ +-------------------+
             |                    |                   |
      +-------------+   +-----------------+     +---------------+
  (3) | Operations  |   |  <edit-config>  |     |  <eventType>  |
      +-------------+   +-----------------+     +---------------+
             |                    |                   |
      +-------------+   +--------------------+  +----------------+
  (2) |     RPC     |   | <rpc>, <rpc-reply> |  | <notification> |
      +-------------+   +--------------------+  +----------------+
             |                    |                   |
      +-------------+       +-----------------------------+
  (1) |  Transport  |       |   BEEP, SSH, SSL, console   |
      |   Protocol  |       |                             |
      +-------------+       +-----------------------------+

]]>
     </artwork>
    </figure>
   </t>

   <t>
    This document addresses NETCONF protocol extensions
    for the Operations and Content layers, as defined
    in <xref target="RFC4741"/>.  This document does
    not address NETCONF notification messages, defined
    in <xref target="I-D.ietf-netconf-notification"/>.
   </t>

   <t>
    This document defines four minor extensions to the NETCONF
    protocol:
    <list style="symbols">
     <t>test-only &lt;test-option&gt; for &lt;edit-config&gt; operation</t>
     <t>with-defaults attribute for retrieval operations</t>
     <t>with-metadata attribute for retrieval operations</t>
     <t>last-modified metadata attribute for data model objects</t>
    </list>
   </t>

   <section title="Terminology">
    <section title="Requirements Notation">
     <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
      "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
      and "OPTIONAL" in this document are to be interpreted as
      described in <xref target="RFC2119"/>.
     </t>
    </section>

    <section title="NETCONF Terms">
     <t>
      The following terms are defined in RFC 4741 and are not redefined here:
      <list style="symbols">
       <t>agent</t>
       <t>application</t>
       <t>manager</t>
       <t>operation</t>
       <t>RPC</t>
       <t>RPC request</t>
       <t>RPC response</t>
       <t>session</t>
      </list>
     </t>
    </section>
   </section>
  </section>

  <section title="Definitions" anchor="DM">
   <t>
    This section defines the semantics of the 
    conceptual data structures found in the data model
    in <xref target="XSD"/>.
   </t>
    
   <section title="test-only Enumeration">
    <t>
     The 'test-only' enumeration is an extension to 
     the &lt;test-option&gt; parameter for the &lt;edit-config&gt;
     operation, to allow a manager to test an edit operation
     without the agent actually performing the edit(s).
     The &lt;validate&gt; operation provides this feature
     for an entire configuration database, but there is
     no corresponding feature for a single &lt;edit-config&gt;
     operation.
    </t>

    <t>
     The new list of &lt;test-option&gt; parameter options 
     is shown for context:
     <list style="symbols">
      <t>test-then-set</t>
      <t>set</t>
      <t>test-only</t>
     </list>
    </t>

    <t>
     If the manager uses the 'test-only' string, then the
     agent will perform its normal conceptual validation
     procedures for the entire &lt;edit-config&gt; operation,
     except the actual edit(s) will not be performed.
    </t>
 
    <t>
     If errors are found in the requested operation, then 
     &lt;rpc-error&gt; elements are returned as needed.
     Otherwise an &lt;ok/&gt; RPC response is returned.
     No data within the specified target configuration database
     is actually changed by the agent as a result of the operation.
    </t>

    <t>
     The behavior for the 'test-then-set' and 'set' enumerations
     for the &lt;test-option&gt; element are not changed.
     They are defined in <xref target="RFC4741"/>.
    </t>

    <t>
     Due to internal resource requirements or system state changes
     that may affect the operational capabilities of the device,
     the agent may not accept the same &lt;edit-config&gt;
     operation (using a different &lt;test-option&gt; value),
     sent by the manager at some time after the 'test-only'
     version.
    </t>

    <t>
     The updated schema definition fragment for
     the 'testOptionTypeExtended' is shown
     below.  It can also found in <xref target="XSD"/>.
    </t>

    <t>
     <figure anchor="test_only">
      <artwork>
<![CDATA[
   <!--
     Type for <test-option> parameter to <edit-config>
     -->
   <xs:simpleType name="TestOptionTypeExtended">
     <xs:restriction base="xs:string">
       <xs:enumeration value="test-then-set"/>
       <xs:enumeration value="set"/>
       <xs:enumeration value="test-only"/>
     </xs:restriction>
   </xs:simpleType>
]]>
      </artwork>
     </figure>
    </t>

    <t>
     The following example shows an &lt;edit-config&gt; operation
     which is using the test-only mode.  The manager is checking
     whether the agent will accept a large MTU value for
     the interface named 'eth0' (in the example.com Interfaces
     data model).  In this case, the positive
     response simply means the request validated properly.
     The MTU parameter is not changed after this operation.
    </t>

    <t>
     <figure anchor="test_only_example">
      <artwork>
<![CDATA[
   <rpc message-id="101"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <edit-config>
       <target><running/></target>
       <default-operation>none</default-operation>
       <test-option>test-only</test-option>
       <error-option>continue-on-error</error-option>
       <config>
         <interfaces xmlns="http://example.com/interfaces/1.2"
             xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
           <interface>
             <name>Ethernet0/0</name>
             <mtu nc:operation="replace">8192</mtu>
           </interface>
         </interfaces>
       </config>
     </edit-config>
   </rpc>

   <rpc-reply message-id="101"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <ok/>
   </rpc-reply>
]]>
      </artwork>
     </figure>
    </t>
   </section>

   <section title="with-defaults Attribute">
    <t>
     The 'with-defaults' XML attribute defines an extension to the retrieval
     operations to allow a manager to control the generation
     of data model nodes which contain the agent-supplied default
     value.
    </t>

    <t>
     As defined, the NETCONF protocol does not distinguish between
     values which have been set by a management application,
     and default values which have been set by the agent.
     As a result, these agent-selected default values are
     always included in the output of retrieval operations.
    </t>

    <t>
     However, it is quite common for networking devices to
     suppress the output of parameters set to the default value.
     This is done to save CPU time and non-volatile memory.
     In addition, there are likely to be a large number of
     such parameters.  Is is often not useful to network operators
     to view all these default values.  It is usually more
     interesting to view just the parameters which have
     been explicitly set by the network operator.
    </t>

    <t>
     The 'with-defaults' attribute is used 
     to control the generation of agent-selected default values.
     If the 'with-defaults' attribute is present in the &lt;rpc&gt;
     element, for any of the protocol operations which return
     the contents of a configuration database, the agent will
     use the 'with-defaults' value to control default suppression.
    </t>

    <t>
     If the &lt;rpc&gt; element contains an XML attribute
     named 'with-defaults' in the following protocol operations,
     then the agent will use the value to control output
     of elements containing the default value for that element.
     <list style="symbols">
      <t>&lt;get&gt;</t>
      <t>&lt;get-config&gt;</t>
      <t>&lt;copy-config&gt;</t>
     </list>
    </t>

    <t>
     Index clause components are not subject to default suppression.
     If an element within the configuration database
     is considered to be part of a key, and represents 
     one of the naming components for a conceptual
     data structure which allows multiple named instances
     of an ancestor node, then this element is never
     suppressed, regardless of the value of the 'with-defaults'
     attribute.
    </t>

    <t>
     The 'with-defaults' attribute is defined in the
     namespace specified as the 'targetNamespace' in 
     <xref target="XSD"/>.  However, an agent should
     accept it even if no namespace is used.
    </t>

    <t>
     The default value of the 'with-defaults' attribute is 'true'.
     This means all nodes are returned, including those with
     default values.  This is the behavior defined by
     <xref target="RFC4741"/>.
    </t>
 
    <t>
     The schema definition fragment for
     the 'with-defaults' attribute is shown
     below.  It can also found in <xref target="XSD"/>.
    </t>

    <t>
     <figure anchor="with_defaults">
      <artwork>
<![CDATA[
   <!--
     with-defaults attribute for <rpc> element
     -->
     <xs:attribute name="with-defaults" 
       type="xs:boolean" default="true"/>
]]>
      </artwork>
     </figure>
    </t>

    <t>
     The following example shows a &lt;get&gt; operation
     which is using the 'with-defaults' attribute.
     The manager is retrieving the 'interfaces' object,
     defined in the example.com Interfaces data model.
     (In this simple example, the 'name' field is defined
     as the key, and the 'mtu' field is the only other
     data in the &lt;interface&gt; element).
     The default MTU value of '1500' is not returned
     for the interface named 'Eth1' because it is set
     to the default value, and the 'with-defaults'
     attribute is set to 'false'.
    </t>

    <t>
     <figure anchor="with_defaults_example">
      <artwork>
<![CDATA[
   <rpc message-id="102" with-defaults="false"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <interfaces xmlns="http://example.com/interfaces/1.2"/>
       </filter>
     </get>
   </rpc>

   <rpc-reply message-id="102" with-defaults="false"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <interfaces xmlns="http://example.com/interfaces/1.2">
         <interface>
           <name>Eth0</name>
           <mtu>8192</mtu>
         </interface>
         <interface>
           <name>Eth1</name>
         </interface>
         <interface>
           <name>loopback</name>
           <mtu>8192</mtu>
         </interface>
       </interfaces>
     </data>
   </rpc-reply>
]]>
      </artwork>
     </figure>
    </t>
   </section>

   <section title="with-metadata Attribute" anchor="with-metadata">
    <t>
     The 'with-metadata' XML attribute defines an extension 
     to the retrieval operations to allow a manager to control 
     the generation of agent-supplied meta-data (XML attributes)
     within the database nodes value.
    </t>

    <t>
     Agent supplied meta-data might include information
     such as a 'last change time' timestamp, or other
     meta-data associated with actual configuration database
     contents.  It is up to the agent developer as to which
     meta-data, if any, is affected by the 'with-metadata'
     attribute.
    </t>

    <t>
     It is useful to retrieve this information as part
     of normal management operations.  However, when
     comparing two conceptual databases, it is useful
     to suppress the output of the agent-supplied meta-data,
     in order to highlight only the differences that
     the manager has made.
    </t>

    <t>
     The 'with-metadata' attribute is used 
     to control the generation of agent-generated meta-data.
     If the 'with-metadata' attribute is present in the &lt;rpc&gt;
     element, for any of the protocol operations which return
     the contents of a configuration database, the agent will
     use the 'with-metadata' value to control agent-generated
     meta-data suppression.
    </t>

    <t>
     If the &lt;rpc&gt; element contains an XML attribute
     named 'with-metadata' in the following protocol operations,
     then the agent will use the value to control output
     of elements containing any agent-generated meta-data for that element.
     <list style="symbols">
      <t>&lt;get&gt;</t>
      <t>&lt;get-config&gt;</t>
      <t>&lt;copy-config&gt;</t>
     </list>
    </t>

    <t>
     The 'with-metadata' attribute is defined in the
     namespace specified as the 'targetNamespace' in 
     <xref target="XSD"/>.  However, an agent should
     accept it even if no namespace is used.
    </t>

    <t>
     The default value of the 'with-metadata' attribute is 'false'.
     This means all nodes are returned without agent-supplied
     meta-data, unless explicitly requested by the manager
     by setting the 'with-metadata' attribute to 'true'.
    </t>
 
    <t>
     The schema definition fragment for
     the 'with-metadata' attribute is shown
     below.  It can also found in <xref target="XSD"/>.
    </t>

    <t>
     <figure anchor="with_metadata">
      <artwork>
<![CDATA[
   <!--
     with-metadata attribute for <rpc> element
     -->
     <xs:attribute name="with-metadata" 
       type="xs:boolean" default="false"/>
]]>
      </artwork>
     </figure>
    </t>

    <t>
     The following example shows a &lt;get&gt; operation
     which is using the 'with-metadata' attribute.
     The manager is retrieving the 'interfaces' object,
     defined in the example.com Interfaces data model.
     (In this simple example, the 'name' field is defined
     as the key, and the 'mtu' field is the only other
     data in the &lt;interface&gt; element).
     The agent supplied 'last-modified' timestamp
     is returned for each interface.  The agent does not
     maintain this timestamp for individual fields within
     the &lt;interface&gt; element.
    </t>

    <t>
     <figure anchor="with_metadata_example">
      <artwork>
<![CDATA[
   <rpc message-id="103" with-metadata="true"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
       <filter type="subtree">
         <interfaces xmlns="http://example.com/interfaces/1.2"/>
       </filter>
     </get>
   </rpc>

   <rpc-reply message-id="103" with-metadata="true"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <interfaces xmlns="http://example.com/interfaces/1.2"
        xmlns:ts="http://netconfcentral.org/ncx/1.0">
         <interface 
             ts:last-modified="2007-08-06T13:20:00.000-08:00">
           <name>Eth0</name>
           <mtu>8192</mtu>
         </interface>
         <interface
             ts:last-modified="2007-07-19T09:15:04.000-08:00">
           <name>Eth1</name>
           <mtu>1500</mtu>
         </interface>
         <interface
             ts:last-modified="2007-07-19T09:05:05.000-08:00">
           <name>loopback</name>
           <mtu>8192</mtu>
         </interface>
       </interfaces>
     </data>
   </rpc-reply>
]]>
      </artwork>
     </figure>
    </t>
   </section>

   <section title="last-modified Attribute">
    <t>
     The 'last-modified' XML attribute defines a meta-data extension 
     for any data model, which identifies the agent system time
     when the agent last detected a change in some portion of the
     &lt;running&gt; configuration database.
    </t>

    <t>
     The 'last-modified' attribute is a string encoded with
     the 'dateTime' data type.  Maintenance of these time stamps
     will consume agent memory and CPU resources, so it
     is not expected that an agent will maintain the
     'last-modified' timestamp for all data model contents.
     The granularity of these timestamps is determined by the
     agent implementer.
    </t>

    <t>
     It is suggested that dynamic objects, which can be created
     and deleted by a manager, should maintain the 'last-modified'
     attribute for each instance of the dynamic object.
     This allows applications within multi-manager environments
     to use agent configuration data in a more robust manner,
     by easily detecting that other applications have made
     changes to the dynamic configuration data.
    </t>

    <t>
     The 'last-modified' attribute is defined in the
     namespace specified as the 'targetNamespace' in 
     <xref target="XSD"/>.  However, a manager should
     accept it even if no namespace is used by the agent.
    </t>

    <t>
     The schema definition fragment for
     the 'last-modified' attribute is shown
     below.  It can also found in <xref target="XSD"/>.
    </t>

    <t>
     <figure anchor="last_modified">
      <artwork>
<![CDATA[
   <!--
     last-modified XML attribute for configuration database elements
     -->
     <xs:attribute name="last-modified" type="xs:dateTime"/>
]]>
      </artwork>
     </figure>
    </t>

    <t>
     An example RPC request and response using the 
     'last-modified' timestamp example
     can be found in <xref target="with-metadata"/>.
    </t>

   </section>
  </section>

  <section title="Data Model XSD" anchor="XSD">
   <t>
    This section contains an XML Schema Definition
    <xref target="W3C.REC-xmlschema-2"/> which
    defines the XML syntax associated with the 
    conceptual data structure semantics found
    in <xref target="DM"/>.
   </t>

   <t>
    <figure anchor="NCX-ACM_XSD">
     <artwork>
<![CDATA[
BEGIN

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://netconfcentral.org/ncx/1.0"
 targetNamespace="http://netconfcentral.org/ncx/1.0"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 elementFormDefault="qualified" attributeFormDefault="unqualified"
 xml:lang="en" version="1.0" 
 xmlns:ncx="http://netconfcentral.org/ncx/1.0">
 <xs:annotation>
  <xs:documentation>

    Module: ncx
    Owner: ncx
    Application: types
    Version: 1.0
    Contact Info: Send comments to ietf@andybierman.com.

    Description:
      NCX Protocol Extensions

    Revision History:

      Revision: 1.0
      Initial version.
  </xs:documentation>
 </xs:annotation>

 <xs:import namespace="http://www.w3.org/XML/1998/namespace"
  schemaLocation="http://www.w3.org/2001/xml.xsd"/>

 <!--
   test-option for <edit-config> operation
   -->
 <xs:simpleType name="TestOptionTypeExtended">
  <xs:annotation>
   <xs:documentation>
     Test option for edit-config operation, with the
     'test-only' option added.
   </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:enumeration value="test-then-set"/>
   <xs:enumeration value="set"/>
   <xs:enumeration value="test-only"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   with-defaults attribute for <rpc> element
   -->
 <xs:attribute name="with-defaults" 
    type="xs:boolean" default="true"/>

 <!--
   with-metadata attribute for <rpc> element
   -->
 <xs:attribute name="with-metadata" 
    type="xs:boolean" default="false"/>

 <!--
   last-modified attribute for potentially any database element
   -->
 <xs:attribute name="last-modified" type="xs:dateTime"/>

</xs:schema>

END
]]>
     </artwork>
    </figure>
   </t>
  </section>

   <!-- Possibly a 'Contributors' section ... -->

  <section anchor="IANA" title="IANA Considerations">
   <t>
    There are two actions that are requested of IANA:
    <list style="numbers">
     <t>register data model schema namespace URI</t>
     <t>register data model schema URL and store associated XSD</t>
    </list> 
   </t>
   <t>
    [namespace URI TBD]
   </t>
   <t>
    [namespace URL TBD]
   </t>
  </section>

  <section anchor="Security" title="Security Considerations">
   <t>
    This document defines some minor extensions to existing
    NETCONF protocol operations.  They do not introduce
    any new or increased security risks into the management system.
   </t>
   <t>
    The 'test-only' extensions allows a manager to
    test a potential &lt;edit-config&gt; operation
    without actually applying it.  This is intended
    to help applications detect variances and optional
    behavior (within a data model), between different agents
    that implement a particular data model.
   </t>

   <t>
    The 'with-defaults' and 'with-metadata' XML attributes
    provide manager controls over the retrieval of particular
    types of XML data from a configuration database.
    They only suppress data that can already be retrieved
    with the standard protocol operations, and do not
    add any data to the configuration database.
   </t>

   <t>
    The 'last-modified' XML attribute provide a consistent
    mechanism to associate a last modification timestamp
    with XML sub-trees within the &lt;running&gt; configuration
    database.  This information is optional, and may not be provided by
    the agent, or may not be provided on a consistent basis 
    within the database (depending on the agent implementation).
    This timestamp could provide information to a session (with appropriate
    read access permissions)
    on when particular database elements last changed value.
   </t>
  </section>

 </middle>

  <!--  ***** BACK MATTER ***** -->
 <back>
  <references title="Normative References">
    &rfc2119;
    &rfc4741;
    &xmlspec;
    &xsdspec;
  </references>

  <references title="Informative References">
    &notifspec;
  </references>

 </back>

</rfc>

