<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc2578 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2578.xml'>
    <!ENTITY rfc4741 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4741.xml'>
    <!ENTITY rfc4742 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4742.xml'>
    <!ENTITY xmlspec PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml2/reference.W3C.REC-xml.xml'>
    <!ENTITY xpathspec PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml2/reference.W3C.xpath.xml'>
    <!ENTITY xsdspec PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml2/reference.W3C.REC-xmlschema-2.xml'>
    <!ENTITY notifspec PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-notification.xml'>

]>

<rfc category="std" docName="draft-bierman-ncx-acm-00" ipr="full3978">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes"?>
<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="no" ?>
<?rfc compact="no"?>
<?rfc iprnotified="no"?>

 <front>
  <title abbrev="NCX-ACM">Network Configuration Extensions : 
      Access Control Model
  </title>
  <author fullname="Andy Bierman" initials="A.B."
            surname="Bierman">
   <organization>netconfcentral.org</organization>
   <address>
    <postal>
     <street></street>
     <city>Simi Valley</city>
     <region>CA</region>
     <code></code>
     <country>USA</country>
    </postal>
    <email>ietf@andybierman.com</email>
   </address>
  </author>

  <date month="August" year="2007" />
  <area>Management</area>
  <workgroup>Internet Engineering Task Force</workgroup>
  <keyword>NETCONF</keyword>
  <keyword>NCX</keyword>
  <keyword>ACM</keyword>
  <keyword>XML</keyword>
  <abstract>
   <t>
    The standardization of network configuration interfaces for use 
    with the NETCONF protocol 
    requires a structured data modeling environment
    which promotes human usability and multi-vendor interoperability.
    The Network Configuration
    Extensions (NCX) are a set of specifications intended to address
    NETCONF data modeling issues.  This document defines
    an Access Control Model (ACM) suitable for use with the NETCONF protocol,
    intended to promote a more consistent, manageable,
    and interoperable infra-structure for ongoing development
    of NETCONF-based management interfaces.
   </t>
  </abstract>
 </front>

 <middle>
  <section title="Introduction">
   <t>
    The standardization of network configuration interfaces for use 
    with the <xref target="RFC4741">NETCONF</xref> protocol 
    requires a structured data modeling environment
    which promotes human usability, and multi-vendor interoperability.
    This document defines
    an access control model suitable for use with the NETCONF protocol.
   </t>

   <t>
    The Network Configuration Protocol utilizes the Extensible
    Markup Language <xref target="W3C.REC-xml"/>
    for encoding protocol messages used to
    manage network device configuration databases.  However, there is no
    specification for the inter-operable management of the
    controlled access to potions of a conceptual 
    NETCONF configuration database.  Access control is currently
    not part of the NETCONF standard, so a NETCONF session is
    granted access based entirely on the session characteristics
    in an undocumented proprietary manner, if any access control
    is available at all.
   </t>
   <t>
    This document discusses the following concepts:
    <list style="symbols">
     <t>Access Control Model</t>
     <t>Access Control Procedures</t>
     <t>Access Control Data Model</t>
    </list>
   </t>

   <t>
    <figure anchor="NETCONF_stack">
     <artwork>
<![CDATA[

 The NETCONF stack can be conceptually partitioned into four layers.

       Layer                Example
      +-------------+   +--------------------+ +-------------------+
  (4) |   Content   |   | Configuration data | | Notification data |
      +-------------+   +--------------------+ +-------------------+
             |                    |                   |
      +-------------+   +-----------------+     +---------------+
  (3) | Operations  |   |  <edit-config>  |     |  <eventType>  |
      +-------------+   +-----------------+     +---------------+
             |                    |                   |
      +-------------+   +--------------------+  +----------------+
  (2) |     RPC     |   | <rpc>, <rpc-reply> |  | <notification> |
      +-------------+   +--------------------+  +----------------+
             |                    |                   |
      +-------------+       +-----------------------------+
  (1) |  Transport  |       |   BEEP, SSH, SSL, console   |
      |   Protocol  |       |                             |
      +-------------+       +-----------------------------+

]]>
     </artwork>
    </figure>
   </t>

   <t>
    This document addresses NETCONF protocol access control
    for the RPC, Operations, and Content layers, as defined
    in <xref target="RFC4741"/>, and 
    <xref target="I-D.ietf-netconf-notification"/>.
   </t>

   <section title="Terminology">
    <section title="Requirements Notation">
     <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
      "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
      and "OPTIONAL" in this document are to be interpreted as
      described in <xref target="RFC2119"/>.
     </t>
    </section>

    <section title="NETCONF Terms">
     <t>
      The following terms are defined in RFC 4741 and are not redefined here:
      <list style="symbols">
       <t>agent</t>
       <t>client</t>
       <t>manager</t>
       <t>operation</t>
       <t>RPC</t>
       <t>RPC method</t>
       <t>server</t>
       <t>session</t>
       <t>user</t>
      </list>
     </t>
    </section>

    <section title="NCX-SMI Terms">
     <t>
      The following terms are defined in the 
      <xref target="I-D.bierman-ncx-smi">NCX-SMI</xref>
      and are not redefined here:
      <list style="symbols">
       <t>application</t>
       <t>data model</t>
       <t>object</t>
       <t>NETCONF base</t>
       <t>NETCONF data model</t>
       <t>object identifier</t>
       <t>instance identifier</t>
      </list>
     </t>
    </section>

    <section title="Terms">
     <t>
      The following terms are used throughout this documentation:
      <list style="hanging">
       <t hangText="access control:">
        A security feature provided by the NETCONF agent,
        which allows an operator to restrict access to a
        subset of all NETCONF protocol operations and
        configuration data, based on various criteria.
       </t>
       <t hangText="access control model (ACM):">
        A conceptual model used to configure and monitor
        the access control procedures desired by the operator
        to enforce a particular access control policy.
       </t>
       <t hangText="access control rule:">
        The conceptual criteria used to determine if a
        particular NETCONF protocol operation should be
        permitted or denied.
       </t>
       <t hangText="NCX-ACM:">
        The access control model defined in this document.
       </t>
       <t hangText="administrative role:">
        The type of administrative role for any session
        associated with a particular group.
        This is typically used within an ACM to implicitly
        enforce a particular set of access control
        rules, associated with the role.
       </t>
       <t hangText="root:">
        The special administrative role, associated with the 'root' 
        user identity for a NETCONF session, with unlimited access,
        and it is exempt from all access control enforcement.
        The special user name 'root' is used to identify the
        this entity on an NCX agent.  Also called the 'super-user'.
       </t>
      </list>
     </t>
    </section>
   </section>

   <section title="Problem Statement">
    <t>
     Network operators and network equipment (NE) software developers
     need a lot of expertise, and spend a lot of time, to configure,
     control, and monitor network devices.
    </t>
    <t>
     Network configuration has traditionally been very proprietary
     in nature, especially security configuration.  By design,
     the NETCONF protocol specification does not address 
     access control behavior because it is considered to be part
     of the content layer, and out of scope.
    </t>
    <t>
     An access control model is needed that is
     simple to understand, implement, and deploy for
     the NETCONF protocol, to promote 
     secure and interoperable usage of the NETCONF protocol.
    </t>
    <t>
     The NETCONF protocol uses a procedural interface model,
     and set of standard protocol operations.  
     There is no standard access control model
     defined for NETCONF, and a specialized model is needed,
     which fully secures all mechanisms within the protocol.
    </t>
    <t>
     A standard access control model for the NETCONF protocol
     will allow a manager to configure and
     monitor the protocol and data access permissions for any
     NETCONF session, based on various criteria.
    </t>
    <t>
     Suitable control, monitoring, and notification mechanisms
     are needed to allow an operator to easily manage all
     aspects of the ACM behavior. An XML data model,
     suitable for use with the &lt;edit-config&gt; operation
     must be available for this purpose.
    </t>
   </section>

   <section title="Solution Requirements">
    <t>
     There is a need for a comprehensive access control model for
     the NETCONF protocol which provides the following features:
     <list style="symbols">
      <t>
       An extensible and interoperable conceptual model of the correct
       access control behavior of a NETCONF agent must be defined.
      </t>
      <t>
       A data model suitable for use with the &lt;edit-config&gt; and
       other standard protocol operations is needed to implement
       the ACM.
      </t>
      <t>
       For the mandatory transport (SSH), the 
       agent must provide a user identification mechanism,
       utilizing the user identity provided by the SSH
       subsystem to the NETCONF agent.
      </t>
      <t>
       The data model should support the concept of administrative roles,
       to support the well-established distinction between
       a root account and other types of (less-privileged) user accounts.
      </t>
      <t>
       The data model must allow significant access control mechanisms
       which do not require any Xpath usage.  For example,
       the ability to disable write access, or restrict
       certain RPC method access such as &lt;edit-config&gt;,
       must not rely on Xpath.
      </t>
      <t>
       Access control rules to restrict access to specific 
       sub-trees within the configuration database should
       be supported. If so, an Xpath expression must be
       used to identify the sub-tree(s) for this purpose.
      </t>
      <t>
       Access control Xpath expressions for configuration 
       data should be restricted to static terms only,
       such as object identifiers and
       instance identifiers.
       These identifiers are defined in the
       <xref target="I-D.bierman-ncx-smi">NCX-SMI</xref>.
       Other static conceptual objects, such as a device type,
       a physical port number, or a statically allocated MAC
       or IP address, should also be accepted by the agent.
       An agent may choose to reject access control rules
       which represent conceptual objects which are dynamic, 
       such as counters, status objects, and user-supplied
       description strings.
       <vspace blankLines="1" />
       This requirement is needed to reduce the threat of
       granting access unintentionally due to rapidly changing
       dynamic terms within the Xpath expression, or usage of complex
       Xpath expressions that grant more access than intended.
      </t>
     </list>
    </t>
   </section>
  </section>

  <section title="Model Overview">
   <t>
    This section provides a high-level overview of the
    access control model structure.  It describes the
    NETCONF protocol message processing model, and the conceptual
    access control requirements within that model.
   </t>

   <section title="External Dependencies">
    <t>
     The <xref target="RFC4741">NETCONF</xref> protocol
     is used for all management purposes within this document.
     The agent must support the features identified
     by the 'NETCONF-base' capability.
     It is expected that the mandatory transport mapping
     <xref target="RFC4742">NETCONF Over SSH</xref> is
     also supported by the agent, and that the agent has
     access to the user name associated with each session.
    </t>

    <t>
     The XML Path Specification 
     <xref target="W3C.xpath"/> is used within the NETCONF protocol
     to define filters for configuration data retrieval operations
     and filters for notification suppression.  Support for XPath
     is optional, and only fully supported  if the '#xpath'
     capability is advertised by the agent.  Use of XPath within
     the data model defined in this document is also optional,
     based on the '#xpath' capability.
    </t>

    <t>
     The NETCONF Notifications draft 
     <xref target="I-D.ietf-netconf-notification"/>
     defines notification delivery mechanisms for
     the NETCONF protocol.  An agent must advertise the
     '#notification' capability for notification delivery
     to be supported.  A notification event type for
     an access violation event is defined in this document,
     which may be enabled by the administrator to
     generate a notification message when an access violation
     is detected by the agent.
    </t>

    <t>
     The <xref target="I-D.bierman-ncx-smi">NCX-SMI</xref>
     specification is used for some data modeling
     concepts, such as the 'NCX Name' data type,
     object identifier syntax, and instance identifier syntax.
    </t>
   </section>

   <section title="Message Processing Model">
    <t>
     The following diagram shows the NETCONF message
     flow model, including the points at which access
     control is applied, during NETCONF message processing.
    </t>

    <t>
     <figure anchor="NCX_ACM_model">
      <artwork>
<![CDATA[
                 +-------------------------+
                 |       session           |
                 | (role, identity, I/O)   |
                 +-------------------------+
                    |                 ^
                    V                 |
          +--------------+     +---------------+
          |   message    |     |   message     |
          | dispatcher   |     |   generator   |
          +--------------+     +---------------+
               |                  ^         ^
               V                  |         |
      +===========+     +-------------+   +----------------+
      |   <rpc>   |---> | <rpc-reply> |   | <notification> |
      | acc. ctl  |     |  generator  |   |  generator     |
      +===========+     +-------------+   +----------------+
            |              ^    ^                ^
            V       +------+    |                |
      +-----------+ |   +=============+  +================+
      |   <rpc>   | |   | <rpc-reply> |  | <notification> |
      | processor |-+   |  acc. ctl   |  |  access ctl    |
      +-----------+     +=============+  +================+
            |   |                  ^        ^
            V   +----------------+ |        |
      +===========+              | |        |
      | <config>  |              | |        |
      | acc. ctl  | -----------+ | |        |
      +===========+            | | |        |
            |                  | | |        |
            V                  V V |        |
      +---------------+      +-----------------+
      | configuration | ---> |     agent       |
      |   database    |      | instrumentation |
      |   <running>   | <--- |                 |
      +---------------+      +-----------------+

]]>
      </artwork>
     </figure>
    </t>

    <t>
     The follow sequence of conceptual processing steps
     is executed for each received message:
 
     <list style="symbols">
      <t>
       Access control is applied to all messages
       received by the agent, individually, for each active session,
       unless the administrative role for the session is 'root',
       or the &lt;accessControlMode&gt; field within the
       &lt;profile&gt; object is set to 'off'.
      </t>
      <t>
       A session is bound to an administrative role and a
       group identity for the lifetime of the session.
      </t>
      <t>
       An incoming message is dispatched, based on its
       namespace and element name.
      </t>
      <t>
       Incoming &lt;rpc&gt; requests are received by
       the RPC access control enforcer.
      </t>
      <t>
       If the session is authorized to execute the RPC
       method, then processing continues, otherwise
       the following steps are taken by the agent:
       <list style="numbers">
        <t>
         If the agent is configured to
         generate the 'accessDeniedEvent' notification, then
         one is generated for this access violation event.
         The &lt;eventAccessRequested&gt; field in the notification
         is set to 'rpcRequest'.
        </t>
        <t>
         The RPC request is rejected with an 'access-denied' error.
        </t>
       </list>
      </t>
      <t>
       If access is granted, the incoming RPC request is processed.
      </t>
      <t>
       If the configuration database is accessed by the RPC method,
       then the configuration access control enforcer
       must authorize the requested operation.
      </t>
      <t>
       If the requested access is some sort of read operation,
       and the &lt;accessControlMode&gt; field within the
       &lt;profile&gt; object is set to 'loose', then
       configuration data access control enforcement is skipped.
      </t>
      <t>
       If the session is authorized to perform the requested
       operation on the requested data, then processing continues,
       otherwise the following steps are taken by the agent:
       <list style="numbers">
        <t>
         If the agent is configured to
         generate the 'accessDeniedEvent' notification, then
         one is generated for this access violation event.
         The &lt;eventAccessRequested&gt; field in the notification
         is set to 'dataRead' or 'dataWrite', depending on the
         nature of the requested configuration database operation.
        </t>
        <t>
         The RPC request is rejected with an 
         'access-denied' error.
        </t>
       </list>
      </t>
      <t>
       If the &lt;accessControlMode&gt; field within the
       &lt;profile&gt; object is set to 'loose', then
       RPC reply access control enforcement is skipped.
       Otherwise, the RPC reply access control enforcer checks
       the &lt;data&gt; element (if it exists) within
       the conceptual reply.  It will then prune any data for which
       the session is not authorized to read.  There is no
       additional configuration for this enforcement.
      </t>
      <t>
       The agent should verify that no restricted data
       (as configured for the configuration database)
       is contained in the RPC reply.  This is especially important
       for non-standard RPC methods which may return data
       without properly accessing the configuration database.
      </t>
      <t>
       The &lt;rpc-reply&gt; is generated and sent to the manager.
      </t>
     </list>
    </t>

    <t>
     The follow sequence of conceptual processing steps
     is executed for each generated event notification:
 
     <list style="symbols">
      <t>
       Agent instrumentation generates a conceptual notification,
       for a particular session.
      </t>
      <t>
       If the &lt;accessControlMode&gt; field within the
       &lt;profile&gt; object is set to 'loose', then
       notification access control enforcement is skipped,
       otherwise, processing continues.
      </t>
      <t>
       The notification access control enforcer checks the
       notification, and if it contains any data for which
       the session is not authorized to read, then the
       notification with the access violation 
       is dropped for that session only.
      </t>
      <t>
       If there is no access violation, then the
       &lt;notification&gt; element is generated and sent 
       to the manager.
      </t>
     </list>
    </t>
   </section>
  </section>

  <section title="Model Components">
   <t>
    This section defines the conceptual components
    related to access control model.
   </t>

   <section title="Users">
    <t>
     A 'user' is the conceptual identity, which is associated
     with the access permissions granted to a particular session.
     A user is identified by an NCX Name string, 
     defined in NCX-SMI, which must be unique within the agent.
    </t>

    <t>
     The user name string is usually derived from the
     transport layer during session establishment.
     An agent is required to have an authenticated user name
     for a session before &lt;rpc&gt; requests will be
     accepted.  Otherwise all requests must be rejected
     with an 'access-denied' error-tag value.
    </t>

    <t>
     If groups are not supported by an agent (in the data model),
     then the user name will be used to automatically create
     a group with the same group name.
    </t>

    <t>
     An agent may choose not to provide NETCONF-based
     configuration of the users permitted access to
     the system, via RPC method or configuration database
     access.
    </t>
   </section>

   <section title="Groups">
    <t>
     Access to a specific NETCONF protocol mechanism is granted to
     a session, associated with a group, not a user.
    </t>

    <t>
     A group is identified by its group name, which is an NCX Name string.
     All group names must be unique within the agent.
    </t>

    <t>
     A group member can be identified by either a user name 
     (NCX Name), or an Internet Address (InetAddress).
     An agent may choose not to support Internet Addresses
     as group members however.
    </t>

    <t>
     An agent may choose not to fully support groups.
     At a minimum, all groups will be created by the agent,
     and there will be one group corresponding to each user,
     using the same name.
    </t>

    <t>
     An agent may choose not to support user configuration
     of the groups used within the system.  In this case,
     the groups are configured in some manner outside the scope
     of this document.
    </t>
   </section>

   <section title="Administrative Roles">
    <t>
     An administrative role identifies the type of 
     network operations activity that is expected and permitted
     for a sessions associated with a particular group.
    </t>

    <t>
     An administrative role is identified by a fixed-value string.
     There should be very few roles used within a
     system, in order to reduce complexity.
    </t>

    <t>
     Each group definition within the agent 
     must be associated with a single administrative role,
     which should not be changed while any sessions associated
     with that group are active.
    </t>
     
    <t>
     The following administrative roles are defined within
     the access control model:
     <list style="hanging">
      <t hangText="root:">
        The 'root' role, associated with the
        NETCONF session, is given unlimited access permissions.
        It is exempt from all access control enforcement.
      </t>
      <t hangText="admin:">
        The 'admin' role, associated with the
        NETCONF session, is given specific access permissions,
        as configured in the agent.
        It is subject to all access control enforcement.
      </t>
      <t hangText="guest:">
        The optional 'guest' role, associated with the
        NETCONF session, is given limited access permissions,
        as configured in the agent.
        It is subject to all access control enforcement,
        and must not be given any write access to any
        configuration database.
      </t>
     </list>
    </t>

    <t>
     The agent should support a 'root' administrative role, and
     the user name for this identity should be named 'root'.
     This role (and user identity) should be built into the
     agent and not be configurable on the device.
    </t>

    <t>
     The agent must support the 'admin' session role,
     besides the 'root' role, which is subject
     to all access control enforcement.
    </t>

    <t>
     The agent may choose to support additional
     types administrative roles, besides 
     the 'admin' role, which are subject
     to all access control enforcement.
    </t>

    <t>
     The agent may choose to support the 'guest'
     role, which is subject
     to all access control enforcement, and never allowed
     to write to any configuration data.
    </t>
   </section>

   <section title="Sessions">
    <t>
     A session is simply a NETCONF session, which is the
     entity which is granted access to specific NETCONF
     protocol mechanisms.
    </t>

    <t>
     A session is always associated with a specific
     administrative role, for the
     lifetime of the session.
    </t>

    <t>
     A session is associated with a single group name for the
     lifetime of the session. (The user name may be the group name
     in some cases). It will be used during all access control 
     rule evaluation procedures, performed by the agent.
    </t>
   </section>

   <section title="Security Levels">
    <t>
     There are four security levels built into the
     access control model, which affect the way the
     agent will behave. These security levels will
     override individual access control rules configured on the system.
     They are used to assist in access control deployment
     and debugging, and provide a simple mechanism to configure
     common security profiles with a single data model object.
    </t>
 
    <t>
     An agent should support the following security levels:
     <list style="hanging">
      <t hangText="off:">
       All access control is disabled.
      </t>
      <t hangText="warn:">
       All access control is checked, but instead of enforcing
       an access control rule, the agent will generate a log
       entry and/or an event notification, and allow the
       requested operation to proceed.
      </t>
      <t hangText="loose:">
       During configuration database access control enforcement, 
       only write access is checked.
      </t>
      <t hangText="strict:">
       During configuration database access control enforcement, 
       all access is checked.
      </t>
     </list>
    </t>

    <t>
     An agent implementer must choose a default security level
     that is in effect when the device is shipped.  It is
     suggested that the 'loose' or 'strict' security level
     be selected as the default.
    </t>

    <t>
     An agent should require that the 'root' session role
     be used in order to modify the global security level.
    </t>

    <t>
     Once access control configuration has been tested
     and fully functional, an administrator should
     change the security level to 'strict', and operate
     in this mode during normal network operations.
    </t>
   </section>

   <section title="Access Permissions">
    <t>
     The access permissions are the NETCONF protocol specific
     set of permissions that have
     been assigned to a particular session role or group.
     The same access permissions should stay in affect for
     the lifetime of a session.
    </t>

    <t>
     The access control model treats RPC method execution
     separately from configuration database access
     and outgoing messages:
     <list style="numbers">
      <t>
       Permission to invoke the &lt;rpc&gt; request.
      </t>
      <t>
       Permission to access the configuration database.
      </t>
      <t>
       Permission to send the &lt;rpc-reply&gt; response
       or &lt;notification&gt; message.
      </t>
     </list>       
    </t>
 
    <section title="RPC Method Invocation Access">
     <t>
      Permission to invoke an RPC method is treated separately
      from all other access mechanisms, within the access control
      model and the data model.
      Instead of multiple types of access, an access control
      rule for controlling RPC method access uses a simple
      boolean, determining whether permission to invoke
      the RPC method is granted or not.
     </t>
    </section>

    <section title="Configuration Data Access"
      anchor="Data_Permissions">
     <t>
      There are three access permissions associated with
      configuration database data structures that are defined.
      These coincide with the <xref target="RFC2578">SMIv2</xref> 
      MAX-ACCESS clause values in name and concept.  They also support
      the 'operation' attribute used with the &lt;edit-config&gt;
      protocol operation, which makes a clear distinction between
      create and merge operations.
     </t>

     <t>
      The following fixed access permissions apply only
      to configuration data.  These permissions
      are associated statically via the data model definition
      (e.g., MAX-ACCESS clause) or dynamically via an access control
      configuration data model.
     </t>

     <t>
      <list style="hanging">
       <t hangText="none:">
        <list style="symbols">
         <t>No access is permitted at all.</t>
        </list>       
       </t>
       <t hangText="read-only:">
        <list style="symbols">
         <t>Configuration database retrieval operations are permitted.</t>
         <t>Notification generation is permitted.</t>
        </list>       
       </t>
       <t hangText="read-write:">
        <list style="symbols">
         <t>Configuration database edit operations are permitted.</t>
         <t>Configuration database retrieval operations are permitted.</t>
         <t>Notification generation is permitted.</t>
        </list>       
       </t>
       <t hangText="read-create:">
        <list style="symbols">
         <t>Configuration database create operations are permitted.</t>
         <t>Configuration database delete operations are permitted.</t>
         <t>Configuration database edit operations are permitted.</t>
         <t>Configuration database retrieval operations are permitted.</t>
         <t>Notification generation is permitted.</t>
        </list>       
       </t>
      </list>
     </t>
 
     <t>
      These permissions need to be explicitly mapped to the
      NETCONF operation attribute, used in the &lt;edit-config&gt;
      protocol operation.  The 'read-only' access permission does
      not apply to the 'operation' attribute.  If a manager
      has read-only access to some node &lt;a&gt; in the configuration
      database, it is possible that is may have higher access
      for a child node of &lt;a&gt;.  This is typically the case if
      a user-configurable optional object is contained within
      a fixed node (e.g., &lt;interface&gt; within the &lt;interfaces&gt;
      container).
     </t>

     <t>
      The 'read-write' permission applies to the following
      &lt;edit-config&gt; operation, and indicates access
      permission in the following situations:
      <list style="symbols">
       <t>merge with existing node</t>
       <t>replace an existing node</t>
      </list>
     </t>

     <t>
      The 'read-write' permission can only be granted for writable
      objects which cannot be created by the manager, either directly,
      or as a side effect of the protocol operation.  In other words,
      all the nodes (from root to the target nodes) must already
      exist in the agent for write access to be granted.
     </t>

     <t>
      If an object has a agent-supplied default value,
      the object is considered to be present, even if
      the &lt;get-config&gt; operation does not indicate
      the object is present, due to suppression of default
      values.  In this case, write permission is granted
      as if the object was present with the agent supplied 
      default value.
     </t>

     <t>
      The 'read-create' permission applies to all possible
      &lt;edit-config&gt; operation attribute situations:
      <list style="symbols">
       <t>merge</t>
       <t>replace</t>
       <t>create</t>
       <t>delete</t>
      </list>
      This write permission can only be granted for writable
      objects which can be created and deleted by the manager,
      via direct action within a protocol operation.
     </t>
    </section>

    <section title="RPC Response Access">
     <t>
      A session must have read access to all contents of
      the &lt;data&gt; element, if it is present.
      The agent must prune any data which the session is
      not authorized to receive.
     </t>
     <t>
      If some object within the data corresponds to 
      an object in the configuration database, then the
      agent should use the access control configuration
      for that object to determine if the session should
      be granted access.  If the data does not correspond
      to objects within the configuration database,
      then the agent should use mechanisms (outside the
      scope of this document) to determine if read access
      should be granted.
     </t>
    </section>

    <section title="Notification Access">
     <t>
      A session must have read access to all contents of
      the &lt;notification&gt; element, if any data is present.
      The agent must drop the notification
      (for that session only) if it contains any data 
      which the session is not authorized to receive.
     </t>

     <t>
      If an access control rules exist, which pertain
      to the namespace URI and/or notification event type
      element, then access must denied if the rules
      indicate the group is not authorized to receive
      that notification event type.  If the session
      is authorized to receive the event type, it must
      also be authorized to receive any data within the
      notification as well.
     </t>

     <t>
      If some object within the data corresponds to 
      an object in the configuration database, then the
      agent should use the access control configuration
      for that object to determine if the session should
      be granted access.  If the data does not correspond
      to objects within the configuration database,
      then the agent should use mechanisms (outside the
      scope of this document) to determine if access
      should be granted.
     </t>
    </section>
   </section>

   <section title="Controls">
    <section title="Global Controls">
     <t>
      An agent may choose to allow a manager to configure the
      global security level used to control the overall
      operation of the access control system.  If so,
      then the 'root' administrative role should be required
      to modify this parameter.
     </t>
     <t>
      If notifications are supported then a manager should be able 
      to configure whether or not the 'accessDeniedEvent'
      notification should be generated.  If so,
      then the 'root' administrative role should be required
      to modify this parameter.
     </t>
     <t>
      An agent may choose to allow a manager to configure the
      groups used to control which user names or InetAddresses
      (associated with each session) should
      be given access to the system..   If so,
      then the 'root' administrative role should be required
      to modify this configuration data.
     </t>
    </section>

    <section title="Administrative Role Controls">
     <t>
      The administrative role assigned to a group
      can be used to control course-grained access
      to configuration data, e.g., no restrictions
      for 'root', or no write access for 'guest'.
     </t>
     <t>
      The administrative role is associated with a group
      within the data model in <xref target="DM"/>.
     </t>
    </section>

    <section title="RPC Operation Access Controls">
     <t>
      A manager can specify the scope of the
      access control rule for an RPC method in four ways:
      <list style="numbers">
       <t>
        for all RPC methods defined with the specified RPC method type(s),
        as defined in NCX-SMI (e.g., 'config', 'monitor', 'exec', 'debug').
       </t>
       <t>
        for all RPC methods defined within a specific namespace.
       </t>
       <t>
        for one RPC method defined within a specific namespace.
       </t>
       <t>
        for all RPC methods indicated by a particular boolean
        Xpath expression.
       </t>
      </list>
     </t>
     <t>
      An agent may choose not to support the RPC method type
      form of access control rule definition.
     </t>
     <t>
      An agent must support the Xpath expression form
      of access control rule if it advertises the '#xpath' capability.
     </t>
    </section>

    <section title="Configuration Data Access Controls">
     <t>
      A manager can specify the scope of the
      access control rule for a portion of the configuration database
      in three ways:
      <list style="numbers">
       <t>
        for all configuration data within a specific namespace
       </t>
       <t>
        for all configuration data within a specific XML sub-tree
       </t>
       <t>
        for all configuration indicated by a particular node set
        Xpath expression.
       </t>
      </list>
     </t>
     <t>
      An agent must support the Xpath expression form
      of access control rule if it advertises the '#xpath' capability.
     </t>
    </section>

    <section title="Notification Access Controls">
     <t>
      A manager can specify the scope of the
      access control rule for a notification
      in three ways:
      <list style="numbers">
       <t>
        for all notification event types within a specific namespace
       </t>
       <t>
        for a specific event types within a specific namespace
       </t>
       <t>
        for all notification content indicated by a particular boolean
        Xpath expression.
       </t>
      </list>
     </t>
     <t>
       The 'event type' corresponds to the one and only child
       node of the &lt;notification&gt; element.  The namespace URI
       and element name for this node are used to define the
       notification type.
     </t>
     <t>
      An agent must support the Xpath expression form
      of access control rule if it advertises the '#xpath' capability.
     </t>
    </section>
   </section>

   <section title="Access Violation Events">
    <t>
     If the agent supports the '#notification' capability,
     then it should support generation of the 'accessDeniedEvent'
     notification type, defined within the data model.
    </t>
    <t>
     The 'accessDeniedEvent' event type is controlled
     by a global parameter, used to enable or disable
     notification generation for this event type.
    </t>
    <t>
     If generation of the &lt;accessDeniedEvent&gt; notification is enabled, 
     and the global security level is not 'off', then one 
     &lt;accessDeniedEvent&gt;
     notification is generated for each received message 
     that contains any access violations.
     Logging and delivery of this notification are outside the
     scope of this document.
    </t>
   </section>
  </section>

  <section title="Access Control Procedures">
   <t>
    NCX access control procedures (within the NETCONF agent)
    are specific to the NETCONF message
    processing model, and are based on
    the specific vulnerabilities that can occur during each
    type of message processing procedure.
   </t>

   <t>
    All aspects of data access via NETCONF protocol behavior, 
    including side effects from &lt;rpc&gt; operations,
    and external protocols (such as SNMP or SSH/CLI),
    are considered within the responsibility of the NETCONF
    agent to secure against unauthorized access.
   </t>

   <t>
    There are six separate phases that must be addressed,
    three of which are related to the NETCONF message processing model.
    In addition, the initial start-up mode for an NCX agent,
    session establishment, and 'access-denied' error handling
    must also be considered.
   </t>

   <section title="Initial Operation">
    <t>
     Upon the very first start-up of the NCX agent,
     the access control configuration will probably
     not be present. If not,
     an agent should not allow any write access to
     any session role except 'root' in this state.
    </t>
    <t>
     If the configured (or default) access control profile is 'strict',
     then the agent must not allow any write access to
     any session role except 'root' in this state.
    </t>
    <t>
     If the configured (or default) access control profile is 'strict',
     then the agent must not allow any read access to
     any session role except 'root' in this state.
    </t>
    <t>
     The agent should prompt or alert the operator somehow
     until the access control configuration has been set.
     This initial configuration mode continues until
     the agent deems that the access control configuration
     has been set..
    </t>
   </section>

   <section title="Session Establishment">
    <t>
     The access control model applies specifically
     to the well-formed XML content transferred between a manager
     and an agent, after session establishment has been completed,
     and after the &lt;hello&gt; exchange has been successfully
     completed.
    </t>

    <t>
     An agent must not include any sensitive information
     in any &lt;capability&gt; elements within the 
     &lt;hello&gt; exchange.
    </t>

    <t>
     Once session establishment is completed, and a user identity
     has been authenticated, a NETCONF agent will
     enforce the access control rules, based on the 
     supplied user identity and the configuration data stored
     on the agent.
    </t>
   </section>

   <section title="access-denied Error Handling">
    <t>
     The 'access-denied' error report is generated when
     the access control system denies access to either a
     request to invoke an RPC method or a request to
     perform a particular operation on the configuration
     database.
    </t>

    <t>
     An agent must not include any sensitive information
     in any &lt;error-info&gt; elements within the 
     &lt;rpc-error&gt; response.
    </t>

    <t>
     If the &lt;accessControlMode&gt; field within the
     &lt;profile&gt; object is equal to 'warn', then
     the agent may choose to generate 'access-denied'
     warning reports, in addition to generating
     an 'accessDeniedEvent' notification (if supported).
     In this case, the &lt;error-severity&gt; field
     is set to 'warning' instead of 'error'.
    </t>

    <section title="access-denied Report for RPC Access">
     <t>
      If permission to invoke an RPC method is not granted,
      the following &lt;rpc-error&gt; element is sent
      within the RPC response.
     </t> 

     <t>
      The following example shows an 'access-denied' error report
      that might be returned if access to the &lt;edit-config&gt;
      operation is denied.
     </t>

     <t>
      <figure anchor="access_denied_RPC">
       <artwork>
<![CDATA[

      <rpc-reply message-id="107"
         xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
        <rpc-error>
          <error-type>rpc</error-type>
          <error-tag>access-denied</error-tag>
          <error-severity>error</error-severity>
          <error-path>/rpc/edit-config</error-path>
          <error-message>
            Access to RPC method denied
          </error-message>
        </rpc-error>
      </rpc-reply>

]]>
       </artwork>
      </figure>
     </t>
    </section>

    <section title="access-denied Report for Data Access">
     <t>
      If permission to invoke the requested protocol
      operation (e.g., read, write, create/delete) is not granted
      for the specified configuration data,
      the following &lt;rpc-error&gt; element is sent
      within the RPC response.
     </t> 

     <t>
      The following example shows an 'access-denied' error report
      that might be returned if some access to the interface 
      named 'eth1' is denied.
     </t>

     <t>
      <figure anchor="access_denied_data">
       <artwork>
<![CDATA[

  <rpc-reply message-id="108"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <rpc-error>
      <error-type>application</error-type>
      <error-tag>access-denied</error-tag>
      <error-severity>error</error-severity>
      <error-path
         xmlns:ex="http://example.com/interfaces/1.0">
      /rpc/edit-config/config/ex:interfaces/ex:interface[ex:name='eth1']
      </error-path>
      <error-message>
         Access to configuration data denied
      </error-message>
    </rpc-error>
  </rpc-reply>

]]>
       </artwork>
      </figure>
     </t>

    </section>

   </section>

   <section title="Incoming Message Validation">
    <t>
     The diagram below shows the basic 
     conceptual structure of the access control processing model
     for incoming NETCONF messages, within an agent.
    </t>

    <t>
     <figure anchor="NCX_ACM_incoming">
      <artwork>
<![CDATA[

                NETCONF agent
               +------------+
               |    XML     |
               |   message  |
               | dispatcher |
               +------------+
                      |
                      |
          +-----------+-----------+
          V                       V
    +-------------+         +------------+
    |   acme NS   |         | NC-base NS |
    |   <my-rpc>  |         |   <rpc>    |
    +-------------+         +------------+
           |                  |   |  |
           |                  |   |  +---------------+
           +-----+   +--------+   |                  |
                 V   V            V                  V
            +-----------+   +---------------+ +------------+
            | acme NS   |   | NC-base NS    | | NC-base NS |
            | <my-edit> |   | <edit-config> | | <unlock>   |
            +-----------+   +---------------+ +------------+
                   |           |     |
                   |     +-----+     |
                   V     V           V
                 +----------------------+
                 |                      |
                 |    configuration     |
                 |      database        |
                 +----------------------+

]]>
      </artwork>
     </figure>
    </t>
 
    <t>
     Access control begins with the message dispatcher.
     Only well-formed XML messages should be processed
     by the access control system.
    </t>

    <t>
     An agent should not allow access to configuration
     databases through any top level element except
     the &lt;rpc&gt; element in the NETCONF-base namespace.
     If it does, (e.g., &lt;my-rpc&gt;) the agent should still enforce access
     control to configuration data, even if the access
     is from some mechanism outside the standard protocol 
     operations.
    </t>

    <t>
     After the agent validates the &lt;rpc&gt; element,
     and determines the namespace URI and the element
     name of the RPC method being requested, the RPC access
     control enforcer verifies that the session is authorized
     to invoke the RPC method.
    </t>

    <t>
     If the session is not authorized to invoke the RPC method
     with the given set of parameters,
     then an &lt;rpc-error&gt; is generated with the following 
     information:
     <list style="hanging">
      <t hangText="error-tag:">access-denied</t>
      <t hangText="error-path:">
       /rpc/method-QName, where
       'method-QName' is a qualified name identifying the
       actual RPC method name.  For example, '/rpc/edit-config'
       represents the &lt;edit-config&gt; operation in the 
       NETCONF base namespace..
      </t>
     </list>
    </t>

    <t>
     If the configuration database is accessed,
     either directly or as a side effect of the
     RPC operation, then the configuration database
     access enforcer must intercept the operation
     and make sure the session is authorized to
     perform the requested operation on the specified data.
    </t>

    <t>
     If an 'access-denied' error is generated at this point,
     then no information related to any parameters within
     the &lt;rpc&gt; request should be returned in the 
     &lt;rpc-error&gt; response.  A &lt;data&gt; element
     must not be included in the response.  Only the
     name of the RPC method should be returned in
     &lt;error-path&gt; element or the &lt;error-message&gt;
     element.  The &lt;error-app-tag&gt; should not reveal
     any additional information about the access violation.
    </t>
   </section>  

   <section title="Configuration Database Access Validation">
    <t>
     An agent must ensure that all access to the data within
     the configuration database is authorized,
     no matter which RPC method, top-level construct
     other than &lt;rpc&gt;, or even other protocol than NETCONF,
     is used to access the database.
    </t>

    <t>
     For access control purposes, there is only one
     conceptual configuration database.  The same
     access control rules are used for all configuration
     database instances, such as the &lt;candidate&gt; or
     &lt;running&gt; configurations.
    </t>

    <t>
     Access to configuration data is controlled by assigning
     a access control rule to a specific sub-tree in
     the database, for a conceptual object, using the
     { group-name, max-access, object-identifier }
     values for the sub-tree to be restricted.
    </t>

    <t>
     Access to configuration data can also be controlled by assigning
     a access control rule to a specific namespace URI in
     the database, for all conceptual objects defined within the
     namespace, using the { group-name, max-access, namespace-URI }
     values for the namespace to be restricted.
    </t>

    <t>
     If the '#xpath' capability is advertised by the agent,
     then an Xpath expression can be used to specify
     the configuration data sub-tree(s) associates with
     an access control rule.
    </t>

    <t>
     <figure anchor="NCX_ACM_config">
      <artwork>
<![CDATA[

                          NETCONF agent
                   +------------------------------+
                   |            NETCONF           |
                   |         configuration        |
                   |           database           |
                   +------------------------------+
                     |            |             |
                     V            V             V 
             +------------+  +------------+  +-------------+
             | NC-base NS |  | NCX-SEC NS |  | foo-elem NS |
             | <netconf>  |  | <security> |  |    <foo>    |
             |  app hdr   |  | app hdr    |  |    element  |
             +------------+  +------------+  +-------------+
                     |                  \
              +---------------+          \
              V               V           V
    +----------------+   +-----------+ +------------+
    |   NC-notif NS  |   | NC-mon NS | | NCX-ACM NS |
    | <eventStreams> |   | <monitor> | |  <access>  |
    |    object      |   |  object   | |     object |
    +----------------+   +-----------+ +------------+
                               | 
      +------------------------+----------------------+
      V                        V                      V 
   {Additional layers, e.g., child nodes and nested objects)

]]>
      </artwork>
     </figure>
    </t>
   </section>

   <section title="Outgoing Message Validation">
    <t>
     There are two outbound message types to consider:
     the &lt;rpc-reply&gt; and the &lt;notification&gt;
     messages.
    </t>

    <t>
     The &lt;rpc-reply&gt; message should be checked by the agent
     to make sure no unauthorized data is contained within
     it.  If so, the restricted data must be removed
     from the message before it is sent to the manager.
    </t>
    <t>
     Configuration of access control rules exclusively
     for &lt;rpc-reply&gt; messages is outside the
     scope of this document.  It is suggested that the
     &lt;dataRules&gt; is used for this purpose.
    </t>
    <t>
     The &lt;notification&gt; message should be checked by the agent
     to make sure no unauthorized data is contained within
     it.  If so, the entire notification is dropped for that session.
     The &lt;notificationRules&gt; object is used to configure
     access control rules for notification messages.
    </t>

    <t>
     The following figure shows the conceptual message processing
     model for outgoing messages.
    </t>

    <t>
     <figure anchor="NCX_ACM_outgoing">
      <artwork>
<![CDATA[

                NETCONF agent
               +------------+
               |    XML     |
               |   message  |
               | generator  |
               +------------+
                      ^
                      |
          +-----------+-------------+
          |                         |
    +-------------+         +----------------+
    | <rpc-reply> |         | <notification> |
    |  generator  |         |  generator     |
    +-------------+         +----------------+
           ^                        ^
           |                        |
    +=============+         +=================+
    | <rpc-reply> |         | <notification>  |
    |  acc. ctl.  |         |  access control |
    |   <data>    |         |  <eventType>    |
    +=============+         +=================+ 
              ^                  ^
              |                  |                
              \                 /
               \               /
                \             /
            +-----------------------+
            |                       |
            | agent instrumentation |
            |                       |
            +-----------------------+
                   |     ^
                   |     |
                   V     |
            +----------------------+
            |                      |
            |    configuration     |
            |      database        |
            +----------------------+

]]>
      </artwork>
     </figure>
    </t>
   </section>
  </section>

  <section title="Data Model Definition" anchor="DM">
   <t>
    This section defines the semantics of the 
    conceptual data structures found in the data model
    in <xref target="XSD"/>.
   </t>

   <section title="High Level Procedures">
    <t>
     There are some high level management procedures that
     an administrator needs to consider before using this
     access control model:

     <list style="numbers">
      <t>Set the global security level.</t>
      <t>Enable or disable the &lt;accessDeniedEvent&gt; notification.</t>
      <t>Configure (or pre-configure) the &lt;groups&gt; object.</t>
      <t>
       Configure zero or more access control rules for
       RPC method invocation control.
      </t>
      <t>
       Configure zero or more access control rules for
       configuration database access.
      </t>
      <t>
       Configure zero or more access control rules for
       notification event type access.
      </t>
     </list>
    </t>
    <t>
     Notification delivery must be properly configured
     (outside the scope of this document) in order for
     the &lt;accessDeniedEvent&gt; notification to actually be generated.
    </t>
   </section>

   <section title="Using Access Control Rules">
    <t>
     There are some important considerations for proper
     configuration of the access control rules used
     within the data model.

     <list style="symbols">
      <t>
       The start state for allowing access
       is considered to be undefined.
      </t>
      <t>
       The agent determines the correct set of access control
       rules to use, based on the stage of protocol message
       processing.
       For example, if is processing an RPC request, 
       then the &lt;rpcRules&gt; object is used.
      </t>
      <t>
       Access control rules are processed by the agent
       in ascending order, starting with the lowest numbered
       rule (i.e., lowest value of the ruleNumber key).
      </t>
      <t>
       The agent determines the target of each rule.
       If the target defined within the rule includes
       the target being checked for access permissions,
       then the rule is considered a match, and
       the specific access is either permitted or denied
       based on that rule.
      </t>
      <t>
       The special target rule called &lt;all/&gt; is
       used to match anything.  It is customary
       to use this type of rule as the last rule
       within a sequence of access control rules.
       For example, in order to deny all access except
       a few RPC methods, an operator might set up an
       &lt;rpcRules&gt; object with a few rules to
       permit invocation of certain RPC methods,
       and the very last rule would be a 'catchall'
       rule, which denies access to all RPC methods.
      </t>
      <t>
       If no access rule is found associated with the
       requested operation, then the agent should
       consider the access to be denied.  However, if
       the global security level is 'loose', the agent may
       choose to permit the requested operation instead.
      </t>
     </list>
    </t>
   </section>

   <section title="Data Organization">
    <t>
     The top-level element is called &lt;security&gt;, and it
     is defined the 'NCX-security' namespace. The second level
     container element is named &lt;accessControl&gt; and it
     is also defined in the NCX-security namespace.
    </t>

    <t>
     There are six groups of parameters defined as child nodes
     of the &lt;accessControl&gt; element. Each group is
     defined in detail within this section. The data model
     also contains a notification event definition for
     reporting an access control violation.
  
     <list style="hanging">
      <t hangText="configCapabilities:">
        Indicates access control configuration capabilities of the agent
        (read-only)"
      </t>
      <t hangText="profile:">
       Configures global access control parameters.
      </t>
      <t hangText="groups:">
       Configures the groups used within the access
       control system.
      </t>
      <t hangText="rpcRules:">
       Configures the access control rules for RPC method
       invocation.
      </t>
      <t hangText="dataRules:">
       Configures the access control rules for configuration
       database access.
      </t>
      <t hangText="notificationRules:">
       Configures the access control rules for controlling
       delivery of &lt;notification&gt; messages.
      </t>
     </list>
    </t>

    <t>
     The following figure shows the XML layering used
     within the data model.
    </t>

    <t>
     <figure anchor="NCX_ACM_objects">
      <artwork>
<![CDATA[
           NETCONF Configuration Database

               +-----------------+
               | netconf-BASE NS |
               |    <config>     |
               +-----------------+
                        |
               +-----------------+         +=====================+
               |    NCX-ACM NS   |         |   NCX-ACM NS        |
               |    <security>   |         | <accessDeniedEvent> |
               +-----------------+         |   (Notification)    |
                        |                  +=====================+
               +-----------------+
               |    NCX-ACM NS   |
               | <accessControl> |         
               +-----------------+
                        |
              +----------------------+
              |     NCX-ACM NS       | 
              |    OBJECT NODE       |
              | <configCapabilities> | 
              | <profile>            |
              | <groups>             |
              | <rpcRules>           |
              | <dataRules>          |
              | <notificationRules>  |
              +----------------------+

]]>
      </artwork>
     </figure>
    </t>

   </section>

   <section title="configCapabilities Object">
    <t>
     The &lt;configCapabilities&gt; is a read-only
     element, which contains some boolean fields indicating
     which configuration objects the agent will allow
     user configuration via the NETCONF protocol.
    </t>

    <t>
     Agent implementation of this entire object is mandatory.
    </t>
 
    <section title="globalConfig Field">
     <t>
      Boolean indicating whether the agent allows user configuration
      of the parameters within the &lt;profile&gt; object.
     </t>
    </section>

    <section title="groupConfig Field">
     <t>
      Boolean indicating whether the agent allows user configuration
      of the parameters within the &lt;groups&gt; object.
     </t>
    </section>

    <section title="rpcAccessConfig Field">
     <t >
       Boolean indicating whether the agent allows user configuration
       of access control rules within the &lt;rpcRules&gt; object.
     </t>
    </section>

    <section title="rpcTypeAccessConfig Field">
     <t>
      Boolean indicating whether the agent allows user configuration
      of access control rules bases on the conceptual type
      of an RPC method (as defined in NCX-SMI).  The 'rpcAccessConfig'
      field must be 'true' if this field is 'true'.
     </t>
    </section>

    <section title="rpcAccessConfig Field">
     <t>
      Boolean indicating whether the agent allows user configuration
      of access control rules within the &lt;dataRules&gt; object.
     </t>
    </section>
 
    <section title="notificationAccessConfig Field">
     <t>
      Boolean indicating whether the agent allows user configuration
      of access control rules within the &lt;notificationRules&gt; object.
     </t>
    </section>

    <section title="configCapabilities Example">
     <t>
      The following example shows a &lt;get&gt; operation
      and response for an example &lt;configCapabilities&gt; object.
     </t>
     <t>
      <figure anchor="NETCONF_configCaps_example">
       <artwork>
<![CDATA[

   <rpc message-id="101"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
      <filter type="subtree">
        <security xmlns="http://netconfcentral.org/ncx/security">
          <accessControl>
            <configCapabilities/>
          </accessControl>
        </security>
      </filter>
     </get>
   </rpc>

   <rpc-reply message-id="101"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <security xmlns="http://netconfcentral.org/ncx/security">
         <accessControl>
           <configCapabilities>
             <globalConfig>true</globalConfig>
             <groupConfig>true</groupConfig>
             <rpcAccessConfig>true</rpcAccessConfig>
             <rpcTypeAccessConfig>false</rpcTypeAccessControl>
             <databaseAccessConfig>true</databaseAccessConfig>
             <notificationAccessConfig>
               false
             </notificationAccessConfig>
           </configCapabilities>
         </accessControl>
       </security>
     </data>
   </rpc-reply>
   
]]>
       </artwork>
      </figure>
     </t>
    </section>

   </section>

   <section title="profile Object">
    <t>
     The &lt;profile&gt; object is a container with some read-write
     elements, which are enumerated strings indicating
     the global access control behavior for the agent.
    </t>

    <t>
     Agent implementation of this object is mandatory.
     Write access is required if the 'globalConfig' field
     in the &lt;configCapabilities&gt; object
     is set to 'true'.      However, write access to
     the 'accessDeniedEventEnabled' field is not required
     if the '#notification' capability is not supported.
    </t>

    <section title="accessControlMode Field">
     <t>
      Enumerated string indicating the access control 
      security level that should be applied by the agent.
      <list style="hanging">
       <t hangText="off:">
        All access control is disabled.
       </t>
       <t hangText="warn:">
        All access control is checked, but instead of enforcing
        an access control rule, the agent will generate a log
        entry and/or an event notification, but allow the
        requested operation to proceed.
       </t>
       <t hangText="loose:">
        During configuration database access control enforcement, 
        only write access is checked.
       </t>
       <t hangText="strict:">
        During configuration database access control enforcement, 
        all access is checked.
       </t>
      </list>
     </t>
    </section>

    <section title="accessDeniedEventEnabled Field">
     <t>
      Boolean indicating whether the agent should generate
      the &lt;accessDeniedEvent&gt; notification when
      access violations are detected.
     </t>
    </section>

    <section title="profile Example">
     <t>
      The following example shows a &lt;get&gt; operation
      and response for an example &lt;profile&gt; object.
     </t>
     <t>
      <figure anchor="NETCONF_profile_example">
       <artwork>
<![CDATA[

   <rpc message-id="102"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
      <filter type="subtree">
        <security xmlns="http://netconfcentral.org/ncx/security">
          <accessControl>
            <profile/>
          </accessControl>
        </security>
      </filter>
     </get>
   </rpc>

   <rpc-reply message-id="102"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <security xmlns="http://netconfcentral.org/ncx/security">
         <accessControl>
           <profile>
             <accessControlMode>strict</accessControlMode>
             <accessDeniedEventEnabled>
               true
             </accessDeniedEventEnabled>
           </profile>
       </security>
     </data>
   </rpc-reply>
   
]]>
       </artwork>
      </figure>
     </t>
    </section>

   </section>
   
   <section title="groups Object">
    <t>
     The &lt;groups&gt; object is a container with one
     or more instances of the &lt;group&gt; object within
     it.  Each &lt;group&gt; element instance is indexed
     by the value of its 'name' field.
    </t>
    <t>
     Agent implementation of this object is mandatory.
     Write access is required if the 'groupConfig' field
     in the &lt;configCapabilities&gt; object
     is set to 'true'.  
    </t>
    <section title="name Key">
     <t>
      NCX Name string identifying the name of the group.
      This value must be unique for all instances of the 
      &lt;group&gt; element.
     </t>
    </section>

    <section title="role Field">
     <t>
      String defining the administrative role assigned to this
      group.  This field should not be changed once the group
      is created.
     </t>
    </section>

    <section title="users Object">
     <t>
      Table of user name strings which are considered to be
      part of the group.  This nested object is optional
      to use.  If not used, then the &lt;hosts&gt;
      object may be used instead.
     </t>
     <t>
      This object is a container, which contains indexed
      and ordered entries. It should contain one or more &lt;user&gt;
      elements.  Each one contains an NCX Name string, which must
      be unique for all instances of the &lt;user&gt; element.
     </t>
    </section>

    <section title="hosts Object">
     <t>
      Table of InetAddress strings which represent management
      station addressed, which are considered to be
      part of the group.  This nested object is optional
      to use.  If not used, then the &lt;users&gt;
      object may be used instead.
     </t>
     <t>
      This object is a container, which contains indexed
      and ordered entries. It should contain one or more &lt;host&gt;
      elements.  Each one contains an InetAddress string, which must
      be unique for all instances of the &lt;host&gt; element.
     </t>
    </section>

    <section title="groups Example">
     <t>
      The following example shows a &lt;get&gt; operation
      and response for an example &lt;groups&gt; object.
     </t>
     <t>
      <figure anchor="NETCONF_groups_example">
       <artwork>
<![CDATA[

   <rpc message-id="103"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
      <filter type="subtree">
        <security xmlns="http://netconfcentral.org/ncx/security">
          <accessControl>
            <groups/>
          </accessControl>
        </security>
      </filter>
     </get>
   </rpc>

   <rpc-reply message-id="103"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <security xmlns="http://netconfcentral.org/ncx/security">
         <accessControl>
           <groups>
             <group>
               <name>superuser</name>
               <role>root</role>
               <users>
                 <user>root</user>
               </users>
             </group>
             <group>
               <name>routers</name>
               <role>admin</role>
               <users>
                 <user>fred</user>
               </users>
             </group>
             <group>
               <name>support</name>
               <role>admin</role>
               <users>
                 <user>fred</user>
                 <user>barney</user>
                 <user>wilma</user>
               </users>
               <hosts>
                 <host>192.168.1.1</host>
               </hosts>
             </group>
             <group>
               <name>interns</name>
               <role>guest</role>
               <users>
                 <user>bam-bam</user>
                 <user>pebbles</user>
               </users>
             </group>
           </groups>
         </accessControl>
       </security>
     </data>
   </rpc-reply>
   
]]>
       </artwork>
      </figure>
     </t>
     <t>
      In this example, four groups are defined:
      <list style="symbols">
       <t>
        A group called 'superuser', containing the user 'root',
        using the 'root' administrative role.  No access rules
        are needed for this group, since access control is
        not applied to the 'root' administrative role.
       </t>
       <t>
        A group called 'routers', containing the user 'fred',
        using the 'admin' administrative role.  This group
        is allowed full access to protocol features, depending on
        the access control rules configured for the system.
       </t>
       <t>
        A group called 'support', containing three users and one
        IPv4 address, using the 'admin' administrative role.
       </t>
       <t>
        A group called 'interns', containing two users,
        using the 'guest' administrative role.  This group
        does not have any write permissions to any configuration
        data, regardless of the access control rules configured
        for the system.
       </t>
      </list>
     </t>
    </section>
    
   </section>

   <section title="rpcRules Object">
    <t>
     The &lt;rpcRules&gt; object is a container with one
     or more instances of the &lt;rpcRule&gt; object within
     it.  Each &lt;rpcRule&gt; element instance is indexed
     by the value of its 'ruleNumber' field.  If the
     'rpcAccessConfig' field in the &lt;configCapabilities&gt;
     object is 'true', then the agent supports user creation,
     modification, and deletion of this object.
    </t>

    <t>
     Agent implementation of this object is mandatory.
     Write access is required if the 'rpcAccessConfig' field
     in the &lt;configCapabilities&gt; object
     is set to 'true'.
    </t>

    <section title="ruleNumber Key">
     <t>
      A non-negative integer identifying the relative order
      of this entry among all other instances of the
      &lt;rpcRule&gt; element.
      This value must be unique for all instances of the 
      &lt;rpcRule&gt; element.
      The agent will evaluate RPC method access rules in
      ascending order.  The 'ruleNumber' values do not have to be
      contiguous.
     </t>
    </section>

    <section title="ruleType Field">
     <t>
      Enumerated string defining the type of rule match for
      this access control rule:
      <list style="hanging">
       <t hangText="permit:">
        Rule match indicates that access permission is granted.
       </t>
       <t hangText="deny:">
        Rule match indicates that access permission is denied.
       </t>
      </list>
     </t>
    </section>

    <section title="groupList Field">
     <t>
       List of one or more group names for which this rule applies.
     </t>
    </section>

    <section title="rpcTarget Object">
     <t>
      Represents the RPC method targets that are identified
      by this access control rule.  Contains a choice between
      one &lt;rpcTypeList&gt; object, one &lt;rpcMethodList&gt;
      object, one &lt;xpathExpr&gt; object, or one &lt;all/&gt; element.
     </t>

     <section title="rpcTypeList Field">
      <t>
       If the 'rpcTypeAccessConfig' field in the 
       &lt;configCapabilities&gt; object, then the agent supports
       this field.  This field represents a list of RPC method types,
       which are used to match against the type of RPC method being
       invoked.  If the type of the requested RPC method is in the
       list, then the access control rule is considered a match.
      </t>
     </section>

     <section title="rpcMethodList Object">
      <t>
       This field identifies the RPC methods that are considered
       part of this access control rule. 
      </t>
      <t>
       This nested object contains two fields:
       <list style="hanging">
        <t hangText="namespaceUri:">
         The namespace URI associated with the RPC method(s)
         identified by this access control rule.
        </t>
        <t hangText="elementNames:">
         List of element names of the RPC methods within the
         indicated namespace that are identified by this access
         control rule.  If this field is absent, then all RPC methods
         defined in the indicated namespace are identified by this
         access control rule.
        </t>
       </list>
      </t>
     </section>

     <section title="xpathExpr Field">
      <t>
       This field contains a boolean Xpath expression which the
       agent will use to identify the requested RPC method
       or parameter data within the RPC method,
       to match this access control rule. 
       An agent which advertises
       the '#xpath' capability must support this object.
      </t>
     </section>

     <section title="all Field">
      <t>
       Empty element indicating that the access control rule
       applies to all RPC methods in all namespaces.
      </t>
     </section>
    </section>

    <section title="rpcRules Example">
     <t>
      The following example shows a &lt;get&gt; operation
      and response for an example &lt;rpcRules&gt; object.
     </t>
     <t>
      <figure anchor="NETCONF_rpcRules_example">
       <artwork>
<![CDATA[

   <rpc message-id="104"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
      <filter type="subtree">
        <security xmlns="http://netconfcentral.org/ncx/security">
          <accessControl>
            <rpcRules/>
          </accessControl>
        </security>
      </filter>
     </get>
   </rpc>

   <rpc-reply message-id="104"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <security xmlns="http://netconfcentral.org/ncx/security">
         <accessControl>
           <rpcRules>
             <rpcRule>
               <ruleNumber>1</ruleNumber>
               <ruleType>permit</ruleType>
               <groupList>routers</groupList>
               <rpcTarget>
                 <rpcMethodList>
                   <namespaceUri>
                     urn:ietf:params:xml:ns:netconf:base:1.0
                   <namespaceUri>
                   <elementNames>
                     edit-config copy-config delete-config
                     commit discard-changes
                   </elementNames>
                 <rpcMethodList>
               </rpcTarget>
             </rpcRule>
             <rpcRule>
               <ruleNumber>4</ruleNumber>
               <ruleType>permit</ruleType>
               <groupList>routers support</groupList>
               <rpcTarget>
                 <rpcMethodList>
                   <namespaceUri>
                     urn:ietf:params:xml:ns:netconf:base:1.0
                   <namespaceUri>
                   <elementNames>
                     get-config get validate
                   </elementNames>
                 <rpcMethodList>
               </rpcTarget>
             </rpcRule>
             <rpcRule>
               <ruleNumber>6</ruleNumber>
               <ruleType>permit</ruleType>
               <groupList>interns</groupList>
               <rpcTarget>
                 <rpcMethodList>
                   <namespaceUri>
                     urn:ietf:params:xml:ns:netconf:base:1.0
                   <namespaceUri>
                   <elementNames>
                     get-config get
                   </elementNames>
                 <rpcMethodList>
               </rpcTarget>
             </rpcRule>
             <rpcRule>
               <ruleNumber>99</ruleNumber>
               <ruleType>deny</ruleType>
               <groupList>support interns</groupList>
               <rpcTarget>
                 <all/>
               </rpcTarget>
             </rpcRule>
           </rpcRules>
         </accessControl>
       </security>
     </data>
   </rpc-reply>
   
]]>
       </artwork>
      </figure>
     </t>
     <t>
      <list style="symbols">
       <t>
        Rule '1' allows the 'routers' group permission
        to invoke the &lt;edit-config&gt;,
        &lt;copy-config&gt;,        
        &lt;delete-config&gt;,
        &lt;commit&gt;, and
        &lt;discard-changes&gt; protocol operations.
       </t>
       <t>
        Rule '4' allows the 'routers' and 'support' groups permission
        to invoke the &lt;get-config&gt;,
        &lt;get&gt;, and
        &lt;validate&gt; protocol operations.
       </t>
       <t>
        Rule '6' allows the 'interns' group permission
        to invoke the &lt;get-config&gt; and
        &lt;get&gt; protocol operations.
       </t>
       <t>
        Rule '99' denies access to the 'support' and 'interns'
        groups from invoking any RPC method (not explicitly
        mentioned in a previous rule).
       </t>
      </list>
     </t>
    </section>
   </section>

   <section title="dataRules Object">
    <t>
     The &lt;dataRules&gt; object is a container with one
     or more instances of the &lt;dataRule&gt; object within
     it.  Each &lt;dataRule&gt; element instance is indexed
     by the value of its 'ruleNumber' field.
    </t>

    <t>
     Agent implementation of this object is mandatory. If the
     'databaseAccessConfig' field in the &lt;configCapabilities&gt;
     object is 'true', then the agent supports user creation,
     modification, and deletion of this object.
    </t>

    <section title="ruleNumber Key">
     <t>
      A non-negative integer identifying the relative order
      of this entry among all other instances of the
      &lt;dataRule&gt; element.
      This value must be unique for all instances of the 
      &lt;dataRule&gt; element.
      The agent will evaluate configuration data access rules in
      ascending order.  The 'ruleNumber' values do not have to be
      contiguous.
     </t>
    </section>

    <section title="access Field">
     <t>
      The level of access permissions associated with this
      access control rule.  This object is encodes as an enumerated
      string. The values are defined in <xref target="Data_Permissions"/>.
     </t>
    </section>

    <section title="groupList Field">    
     <t>
      List of one or more group names for which this rule applies.
     </t>
    </section>

    <section title="dataTarget Object">
     <t>
      Represents the objects that are identified by this
      access control rule.  Contains a choice between one
      &lt;dataNodeList&gt; object, one &lt;xpathExpr&gt; object,
      and one &lt;all&gt; object.
     </t>

     <section title="dataNodeList Object">
      <t>
       Contains a list of elements which are used to match 
       against the configuration data elements within the agent,
       or data within an RPC response or notification message.
       If the element is identified within the node list,
       then the access control rule is considered a match.
      </t>

      <t>
       This nested object contains two fields:
       <list style="hanging">
        <t hangText="namespaceUri:">
         The namespace URI associated with the data node(s)
         identified by this access control rule.
        </t>
        <t hangText="elementNames:">
         List of element names of the data nodes within the
         indicated namespace that are identified by this access
         control rule.  If this field is absent, then all data nodes
         defined in the indicated namespace are identified by this
         access control rule.
        </t>
       </list>
      </t>
     </section>

     <section title="xpathExpr Field">
      <t>
       This field contains a node set Xpath expression which the
       agent will use to identify the data nodes which are considered
       to match this access control rule. 
       An agent which advertises
       the '#xpath' capability must support this object.
      </t>
     </section>

     <section title="all Field">
      <t>
       Empty element indicating that the access control rule
       applies to all configuration data in all namespaces.
      </t>
     </section>
    </section>

    <section title="dataRules Example">
     <t>
      The following example shows a &lt;get&gt; operation
      and response for an example &lt;dataRules&gt; object.
     </t>
     <t>
      <figure anchor="NETCONF_dataRules_example">
       <artwork>
<![CDATA[

   <rpc message-id="105"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
      <filter type="subtree">
        <security xmlns="http://netconfcentral.org/ncx/security">
          <accessControl>
            <dataRules/>
          </accessControl>
        </security>
      </filter>
     </get>
   </rpc>

   <rpc-reply message-id="105"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <security xmlns="http://netconfcentral.org/ncx/security">
         <accessControl>
           <dataRules>
             <dataRule>
               <ruleNumber>1</ruleNumber>
               <access>read-create</access>
               <groupList>routers</groupList>
               <dataTarget>
                 <dataNodeList>
                   <namespaceUri>
                     http://netconfcentral.org/ncx/security
                   </namespaceUri>
                 <dataNodeList>
               </dataTarget>
             </dataRule>
             <dataRule>
               <ruleNumber>3</ruleNumber>
               <access>read-create</access>
               <groupList>routers</groupList>
               <dataTarget>
                 <xpathExpr 
                   xmlns:ex="http://example.com/router/config">
                   /ex:routers/ex:config
                 <xpathExpr>
               </dataTarget>
             </dataRule>
             <dataRule>
               <ruleNumber>4</ruleNumber>
               <access>read-only</access>
               <groupList>support</groupList>
               <dataTarget>
                 <dataNodeList>
                   <namespaceUri>
                     http://netconfcentral.org/ncx/security
                   </namespaceUri>
                 <dataNodeList>
               </dataTarget>
             </dataRule>
             <dataRule>
               <ruleNumber>7</ruleNumber>
               <access>read-write</access>
               <groupList>support</groupList>
               <dataTarget>
                 <xpathExpr 
                   xmlns:ex="http://example.com/interfaces/1.0">
                   /ex:interfaces/ex:interface[ex:name='eth0']
                 <xpathExpr>
               </dataTarget>
             </dataRule>
             <dataRule>
               <ruleNumber>10</ruleNumber>
               <access>none</access>
               <groupList>interns</groupList>
               <dataTarget>
                 <dataNodeList>
                   <namespaceUri>
                     http://netconfcentral.org/ncx/security
                   </namespaceUri>
                 <dataNodeList>
               </dataTarget>
             </dataRule>
             <dataRule>
               <ruleNumber>99</ruleNumber>
               <access>read-only</access>
               <groupList>routers support interns</groupList>
               <dataTarget>
                 <all/>
               </dataTarget>
             </dataRule>
           </dataRules>
         </accessControl>
       </security>
     </data>
   </rpc-reply>
   
]]>
       </artwork>
      </figure>
     </t>
     <t>
      <list style="symbols">
       <t>
        Rule '1' allows the 'routers' group permission
        to invoke any operation on all data defined within
        the 'NCX security' namespace.
       </t>
       <t>
        Rule '3' allows the 'routers' group permission
        to invoke any operation on the 'config' element
        within the 'example.com' router data model..
       </t>
       <t>
        Rule '4' allows the 'support' group permission
        to read any data defined in the 'NCX security'
        namespace.
       </t>
       <t>
        Rule '7' allows the 'support' group permission
        to read and write the interface named 'eth0',
        (in the example.com Interfaces data model), but
        not create or delete operations.
       </t>
       <t>
        Rule '10' denies the 'interns' group permission
        to read or write any data defined in the 'NCX security'
        namespace.
       </t>
       <t>
        Rule '99' permits read access to all the groups
        to any data not mentioned in a previous rule.
       </t>
      </list>
     </t>
    </section>

   </section>

   <section title="notificationRules Object">
    <t>
     The &lt;notificationRules&gt; object is a container with one
     or more instances of the &lt;notificationRule&gt; object within
     it.  Each &lt;notificationRule&gt; element instance is indexed
     by the value of its 'ruleNumber' field. 
    </t>

    <t>
      Implementation of this object is mandatory.  If the
     'notificationAccessConfig' field in the &lt;configCapabilities&gt;
     object is 'true', then the agent supports user creation,
     modification, and deletion of this object.
    </t>

    <section title="ruleNumber Key">
     <t>
      A non-negative integer identifying the relative order
      of this entry among all other instances of the
      &lt;notificationRule&gt; element.
      This value must be unique for all instances of the 
      &lt;notificationRule&gt; element.
      The agent will evaluate notification data access rules in
      ascending order.  The 'ruleNumber' values do not have to be
      contiguous.
     </t>
    </section>

    <section title="ruleType Field">
     <t>
      Enumerated string defining the type of rule match for
      this access control rule:
      <list style="hanging">
       <t hangText="permit:">
        Rule match indicates that access is granted.
       </t>
       <t hangText="deny:">
        Rule match indicates that access is denied.
       </t>
      </list>
     </t>
    </section>

    <section title="groupList Field">
     <t>
      List of one or more group names for which this rule applies.
     </t>
    </section>

    <section title="eventTarget Object">
     <t>
      Represents the notification event types that are identified by this
      access control rule.  Contains a choice between one
      &lt;eventNodeList&gt; object, one &lt;xpathExpr&gt; object,
      and one &lt;all/&gt; object.
     </t>

     <t>
      Agent implementation of this object is mandatory.
      Write access is required if the 'rpcAccessConfig' field
      in the &lt;configCapabilities&gt; object
      is set to 'true'.
     </t>

     <section title="eventNodeList Object">
      <t>
       Contains a list of elements which are used to match 
       against the configuration data elements within the agent,
       or data within an RPC response or notification message.
       If the element is identified within the node list,
       then the access control rule is considered a match.
      </t>
      <t>
       This nested object contains two fields:
       <list style="hanging">
        <t hangText="namespaceUri:">
         The namespace URI associated with the notification data node(s)
         identified by this access control rule.
        </t>
        <t hangText="elementNames:">
         List of element names of the notification data nodes within the
         indicated namespace that are identified by this access
         control rule.  If this field is absent, then all notification
         data nodes defined in the indicated namespace are identified 
         by this access control rule.
        </t>
       </list>
      </t>
     </section>

     <section title="xpathExpr Field">
      <t>
       This field identifies a boolean Xpath expression which the
       agent will use to identify the notification 
       data nodes which are considered
       to match this access control rule. 
       An agent which advertises
       the '#xpath' capability must support this object.
      </t>
     </section>

     <section title="all Field">
      <t>
       Empty element indicating that the access control rule
       applies to all notification messages in all namespaces.
      </t>
     </section>
    </section>

    <section title="notificationRules Example">
     <t>
      The following example shows a &lt;get&gt; operation
      and response for an example &lt;notificationRules&gt; object.
     </t>
     <t>
      <figure anchor="NETCONF_notificationRules_example">
       <artwork>
<![CDATA[

   <rpc message-id="106"
       xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <get>
      <filter type="subtree">
        <security xmlns="http://netconfcentral.org/ncx/security">
          <accessControl>
            <notificationRules/>
          </accessControl>
        </security>
      </filter>
     </get>
   </rpc>

   <rpc-reply message-id="105"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <data>
       <security xmlns="http://netconfcentral.org/ncx/security">
         <accessControl>
           <notificationRules>
             <notificationRule>
               <ruleNumber>1</ruleNumber>
               <ruleType>permit</ruleType>
               <groupList>routers support</groupList>
               <eventTarget>
                 <all/>
               </eventTarget>
             </notificationRule>
             <notificationRule>
               <ruleNumber>2</ruleNumber>
               <ruleType>permit</ruleType>
               <groupList>interns</groupList>
               <eventTarget>
                 <eventNodeList>
                   <namespaceUri>
                     urn:ietf:params:xml:ns:netconf:base:1.0
                   </namespaceUri>
                 </eventNodeList>
               </eventTarget>
             </notificationRule>
             <notificationRule>
               <ruleNumber>3</ruleNumber>
               <ruleType>deny</ruleType>
               <groupList>interns</groupList>
               <eventTarget>
                 <all/>
               </eventTarget>
             </notificationRule>
           </notificationRules>
         </accessControl>
       </security>
     </data>
   </rpc-reply>
   
]]>
       </artwork>
      </figure>
     </t>
     <t>
      <list style="symbols">
       <t>
        Rule '1' permits the 'routers' and 'support' groups
        to receive all notification messages in all namespaces.
       </t>
       <t>
        Rule '2' permits the 'interns' group
        to receive all notification messages in the 
        'NETCONF base' namespace.
       </t>
       <t>
        Rule '3' prevents the 'interns' group from
        receiving any other notification messages
        in any other namespace.
       </t>
      </list>
     </t>
    </section>

   </section>

   <section title="accessDeniedEvent Notification">
    <t>
     The access denied event is generated once for each 
     received message which would have caused 
     one or more potential access violations.
    </t>

    <t>
     If the '#notification' capability is supported by the 
     NETCONF agent, and the 'accessDeniedEventEnabled' field
     within the &lt;profile&gt; object is set to 'true',
     then the agent will generate notification messages
     for the &lt;accessDeniedEvent&gt; event type, as needed.
    </t>

    <t>
     The event type namespace is the NCX-ACM data model
     target namespace. The event type element name is
     'accessDeniedEvent'.
    </t>

    <t>
     This notification message contains eight data elements:
     <list style="symbols">
      <t>eventClass</t>
      <t>eventSeverity</t>
      <t>eventTime</t>
      <t>eventSessionId</t>
      <t>eventSessionAddress</t>
      <t>eventGroupName</t>
      <t>eventAccessRequested</t>
      <t>eventErrorPath</t>
     </list>
    </t>
 
    <section title="eventClass Field">
     <t>
      The 'eventClass' field will probably be defined as a standard
      outside the scope of this document.  This field
      is static, and must contain the string 'security'.
     </t>
    </section>

    <section title="eventSeverity Field">
     <t>
      The 'eventSeverity' field will be defined as a standard
      outside the scope of this document.  This field
      is static, and should contain the string 'major'.
     </t>
    </section>

    <section title="eventTime Field">
     <t>
      The 'eventTime' field contains the agent system time when
      the access violation occurred.  This field contains
      a string in 'dateTime' format.
     </t>
    </section>

    <section title="eventSessionId Field">
     <t>
      The 'eventSessionId' field contains the session ID number
      for the session which had the access violation.
      This field contains a positive integer string.
     </t>
    </section>

    <section title="eventSessionAddress Field">
     <t>
      The 'eventSessionAddress' field contains the Internet
      address for the session which had the access violation.
      This field contains an InetAddress string.
     </t>
    </section>

    <section title="eventGroupName Field">
     <t>
      The 'eventGroupName' field identifies the group name associated
      with the session   This field contains a string in NCX Name
      format.
     </t>
    </section>

    <section title="eventAccessRequested Field">
     <t>
      The 'eventAccessRequested' field contains a string
      identifying the type of operation that was requested,
      which was denied access.  This field contains
      an enumerated string with one of the following values:
      <list style="hanging">
       <t hangText="rpcRequest:">
        An RPC method invocation request was denied.
       </t>
       <t hangText="dataRead:">
        A configuration data read request was denied.
       </t>
       <t hangText="dataWrite:">
        A configuration data write request was denied.
       </t>
      </list>
     </t>
    </section>

    <section title="eventErrorPath Field">
     <t>
      The 'eventErrorPath' object contains an absolute Xpath
      expression identifying the RPC method, configuration
      data, RPC response field, or notification field
      that caused the access violation.  This field contains
      a string conforming to the Xpath syntax.
     </t>
    </section>

    <section title="accessDeniedEvent Example">
     <t>
      The following example shows a &lt;notification&gt; message
      for an example &lt;accessDeniedEvent&gt; event.
     </t>
     <t>
      <figure anchor="NETCONF_accessDeniedEvent_example">
       <artwork>
<![CDATA[

   <nc:notification 
       xmlns:nc="urn:ietf:params:xml:ns:netconf:notification:1.0">
     <accessDeniedEvent
        xmlns="http://netconfcentral.org/ncx/security">
       <eventClass>security</eventClass>
       <eventSeverity>major</eventSeverity>
       <eventTime>2007-08-06T13:20:00.000-08:00</eventTime>
       <eventSessionId>42</eventSessionId>
       <eventSessionAddress>192.168.1.12</eventSessionAddress>
       <eventGroupName>interns</eventGroupName>
       <eventAccessRequested>rpcRequest</eventAccessRequested>
       <eventErrorPath>/nc:rpc/nc:edit-config</eventErrorPath>
     </accessDeniedEvent>
   </nc:notification>
   
]]>
       </artwork>
      </figure>
     </t>
     <t>
      This example shows an &lt;accessDeniedEvent&gt; 
      notification for an attempt (by a session for
      a user in the 'interns' group) to invoke the
      &lt;edit-config&gt; operation.
     </t>
    </section>
   </section>
  </section>

  <section title="Data Model XSD" anchor="XSD">
   <t>
    This section contains an XML Schema Definition
    <xref target="W3C.REC-xmlschema-2"/> which
    defines the XML syntax associated with the 
    conceptual data structure semantics found
    in <xref target="DM"/>.
   </t>

   <t>
    <figure anchor="NCX-ACM_XSD">
     <artwork>
<![CDATA[

BEGIN

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://netconfcentral.org/ncx/security"
 targetNamespace="http://netconfcentral.org/ncx/security"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 elementFormDefault="qualified" 
 attributeFormDefault="unqualified"
 xml:lang="en" version="0.6" 
 xmlns:ncx="http://netconfcentral.org/ncx/1.0"
 xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0"
 xmlns:n8="http://netconfcentral.org/ietf/types">
 <xs:annotation>
  <xs:documentation> 

    Module: ncx-acm
    Owner: ncx
    Application: security
    Version: 0.6
    Contact Info: Send comments to ietf@andybierman.com.

    Description:
      NETCONF Access Control Model Parameters
  </xs:documentation>
 </xs:annotation>

 <!--
   import standard XML definitions
  -->
 <xs:import namespace="http://www.w3.org/XML/1998/namespace"
  schemaLocation="http://www.w3.org/2001/xml.xsd"/>

 <!--
   import inetAddress definition
  -->
 <xs:import namespace="http://netconfcentral.org/ietf/types"
  schemaLocation="http://netconfcentral.org/ietf/types
  http://www.netconfcentral.org/xsd/ietf/inetAddress.xsd"/>


 <!--
   Global Access Control Mode Type
  -->
 <xs:simpleType name="NcxAccessControlMode">
  <xs:annotation>
   <xs:documentation>
     NCX System access control mode.
          off == no access control checking enforced 
          warn == warn only if access violation detected
          loose == any RPC method in the netconf namespace can
              be invoked;  read-only data allowed for all
          strict == ncxacl RPC entry must be present to invoke
              an RPC method; ncxacl Data entry must be present
              to access any data. (Except for user == 'root'.)
   </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:enumeration value="off"/>
   <xs:enumeration value="warn"/>
   <xs:enumeration value="loose"/>
   <xs:enumeration value="strict"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   Administrative Role Type
  -->
 <xs:simpleType name="NcxAccessAdminRole">
  <xs:annotation>
   <xs:documentation>
       Type of administrative role assigned to the session
         root == root account, no access control applied
         admin == administrative account, access control applied
         guest == guest account, read-only and configured
                   access control applied.
   </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:enumeration value="root"/>
   <xs:enumeration value="admin"/>
   <xs:enumeration value="guest"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   Request Classification Type
  -->
 <xs:simpleType name="NcxAccessRequestType">
  <xs:annotation>
   <xs:documentation>
        Type of request causing an access violation.
          rpcRequest:
            An RPC method invocation request was denied.
          dataRead:
            A configuration data read request was denied.
          dataWrite:
            A configuration data write request was denied.
   </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:enumeration value="rpcRequest"/>
   <xs:enumeration value="dataRead"/>
   <xs:enumeration value="dataWrite"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   Name Type
  -->
 <xs:simpleType name="NcxAccessName">
  <xs:annotation>
   <xs:documentation>
     NCX Access Name string.
    (Should really be an extension of the 'NcxName' data type.)
   </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:pattern value="[a-z,A-Z][a-z,A-Z,0-9,\-,_]*"/>
   <xs:minLength value="1"/>
   <xs:maxLength value="1023"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   List of Names Type
  -->
 <xs:simpleType name="NcxAccessNameList">
  <xs:annotation>
   <xs:documentation>
     List of NcxAccessName strings.
   </xs:documentation>
   <xs:appinfo>
    <ncx:no-duplicates/>
   </xs:appinfo>
  </xs:annotation>
  <xs:list itemType="NcxAccessName"/>
 </xs:simpleType>

 <!--
   RPC Classification Type
  -->
 <xs:simpleType name="NcxAccessRpcType">
  <xs:annotation>
   <xs:documentation>
     NCX RPC Type Classifications
    </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:enumeration value="other"/>
   <xs:enumeration value="config"/>
   <xs:enumeration value="exec"/>
   <xs:enumeration value="monitor"/>
   <xs:enumeration value="debug"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   List of RPC Classifications Type
  -->
 <xs:simpleType name="NcxAccessRpcTypeList">
  <xs:annotation>
   <xs:documentation>
     List NCX RPC Type Classifications
   </xs:documentation>
   <xs:appinfo>
    <ncx:no-duplicates/>
    <ncx:merge-type>sort</ncx:merge-type>
   </xs:appinfo>
  </xs:annotation>
  <xs:list itemType="NcxAccessRpcType"/>
 </xs:simpleType>

 <!--
   Data Access Type
  -->
 <xs:simpleType name="NcxAccessType">
  <xs:annotation>
   <xs:documentation>
      NETCONF Data Access Types:
          none == no access allowed at all.
               This value is used in ACLs, not max-access clauses.
          read-only == read access allowed in all operations.
               This value implies notify access as well.
          read-write == all but create/delete allowed.
               Values can be read and edited.
               Merge and replace operations will be permitted, even
               (e.g., create the instance if it does not exist.
               This allows a manager to save static or agent-created
               entries in copy-config operations, and then reload 
               them later.
          read-create == all access allowed
               Instances can be read, created, edited, and deleted.
   </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:enumeration value="none"/>
   <xs:enumeration value="read-only"/>
   <xs:enumeration value="read-write"/>
   <xs:enumeration value="read-create"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   Access Rule Type (not for data access)
  -->
 <xs:simpleType name="NcxAccessRuleType">
  <xs:annotation>
   <xs:documentation>
     NCX Access Control Rule Type
   </xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
   <xs:enumeration value="permit"/>
   <xs:enumeration value="deny"/>
  </xs:restriction>
 </xs:simpleType>

 <!--
   Access Node List Type
  -->
 <xs:complexType name="NcxAccessNodeList">
  <xs:annotation>
   <xs:documentation>
     NCX Access Control Node Identifier Type
    </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="namespaceUri" type="xs:anyURI"/>
   <xs:element name="elementNames" minOccurs="0">
    <xs:simpleType>
     <xs:list itemType="NcxAccessName"/>
    </xs:simpleType>
   </xs:element>
  </xs:sequence>
 </xs:complexType>

 <!--
   accessDeniedEvent Notification Contents Type
  -->
 <xs:complexType name="NcxAccessDeniedEvent">
  <xs:annotation>
   <xs:documentation>
     Access Denied Event Notification Contents
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="eventClass" type="xs:string"/>
   <xs:element name="eventSeverity" type="xs:string"/>
   <xs:element name="eventTime" type="xs:dateTime"/>
   <xs:element name="eventSessionId" type="xs:unsignedInt"/>
   <xs:element name="eventSessionAddress" type="n8:InetAddress"/>
   <xs:element name="eventGroupName" type="NcxAccessName"/>
   <xs:element name="eventAccessRequested" type="NcxAccessRequestType"/>
   <xs:element name="eventErrorPath" type="xs:string"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   configCapabilities Type
  -->
 <xs:complexType name="NcxAccessConfigCapabilities">
  <xs:annotation>
   <xs:documentation>
     Read-only parameters indicating some agent access control
     capabilities.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="globalConfig" type="xs:boolean"/>
   <xs:element name="groupConfig" type="xs:boolean"/>
   <xs:element name="rpcAccessConfig" type="xs:boolean"/>
   <xs:element name="rpcTypeAccessConfig" type="xs:boolean"/>
   <xs:element name="databaseAccessConfig" type="xs:boolean"/>
   <xs:element name="notificationAccessConfig" type="xs:boolean"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   profile Type
  -->
 <xs:complexType name="NcxAccessGlobalProfile">
  <xs:annotation>
   <xs:documentation>
     Read-write parameters controlling some global 
     agent access control behavior.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="accessControlMode" type="NcxAccessControlMode"/>
   <xs:element name="accessDeniedEventEnabled" type="xs:boolean"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   group Type
  -->
 <xs:complexType name="NcxAccessGroupRec">
  <xs:annotation>
   <xs:documentation>
       One NCX Group Membership Record
         The 'role' parameter should not be changed
         after it is set.

         If a user name is present in the 'users' table then it
         is a member of the group identified by 'name'.

         If a host address is present in the 'hosts' table then it
         is a member of the group identified by 'name'. 

         If both 'users' and 'hosts' are missing then the group
         will be considered empty.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="name" type="NcxAccessName"/>
   <xs:element name="role" type="NcxAccessAdminRole"/>
   <xs:element name="users" minOccurs="0">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="user" type="NcxAccessName"/>
     </xs:sequence>
    </xs:complexType>
    <xs:key name="usersKey">
     <xs:selector xpath="user"/>
     <xs:field xpath="user"/>
    </xs:key>
   </xs:element>
   <xs:element name="hosts" minOccurs="0">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="host" type="n8:InetAddress" minOccurs="0"
       maxOccurs="unbounded"/>
     </xs:sequence>
    </xs:complexType>
    <xs:key name="hostsKey">
     <xs:selector xpath="host"/>
     <xs:field xpath="host"/>
    </xs:key>
   </xs:element>
  </xs:sequence>
 </xs:complexType>

 <!--
   groups Type
  -->
 <xs:complexType name="NcxAccessGroupTable">
  <xs:annotation>
   <xs:documentation>
      NCX Group Membership Table
         Users and hosts can belong to any number of groups.
         The group name must be unique.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="group" type="NcxAccessGroupRec" minOccurs="0"
    maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   rpcRule Type
  -->
 <xs:complexType name="NcxAccessRpcRule">
  <xs:annotation>
   <xs:documentation>
     One NCX RPC Method Access Control Rule
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="ruleNumber" type="xs:unsignedInt"/>
   <xs:element name="ruleType" type="NcxAccessRuleType"/>
   <xs:element name="groupList" type="NcxAccessNameList"/>
   <xs:element name="rpcTarget">
    <xs:complexType>
     <xs:choice>
      <xs:element name="rpcTypeList" type="NcxAccessRpcType"/>
      <xs:element name="rpcMethodList" type="NcxAccessNodeList"/>
      <xs:element name="xpathExpr" type="xs:string"/>
      <xs:element name="all"/>
     </xs:choice>
    </xs:complexType>
   </xs:element>
  </xs:sequence>
 </xs:complexType>

 <!--
   rpcRules Type
  -->
 <xs:complexType name="NcxAccessRpcTable">
  <xs:annotation>
   <xs:documentation>
     NCX Access Control Rules for RPC Methods.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="rpcRule" type="NcxAccessRpcRule" minOccurs="0"
    maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   dataRule Type
  -->
 <xs:complexType name="NcxAccessDataRule">
  <xs:annotation>
   <xs:documentation>
     One NCX Data Access Control Rule
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="ruleNumber" type="xs:unsignedInt"/>
   <xs:element name="access" type="NcxAccessType" default="none"/>
   <xs:element name="groupList" type="NcxAccessNameList"/>
   <xs:element name="dataTarget">
    <xs:complexType>
     <xs:choice>
      <xs:element name="dataNodeList" type="NcxAccessNodeList"/>
      <xs:element name="xpathExpr" type="xs:string"/>
      <xs:element name="all"/>
     </xs:choice>
    </xs:complexType>
   </xs:element>
  </xs:sequence>
 </xs:complexType>

 <!--
   dataRules Type
  -->
 <xs:complexType name="NcxAccessDataTable">
  <xs:annotation>
   <xs:documentation>
     NCX Access Control Rules for Configuration Data
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="dataRule" type="NcxAccessDataRule" minOccurs="0"
    maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   notificationRule Type
  -->
 <xs:complexType name="NcxAccessNotificationRule">
  <xs:annotation>
   <xs:documentation>
     One NCX Notification Access Control Rule
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="ruleNumber" type="xs:unsignedInt"/>
   <xs:element name="ruleType" type="NcxAccessRuleType"/>
   <xs:element name="groupList" type="NcxAccessNameList"/>
   <xs:element name="eventTarget">
    <xs:complexType>
     <xs:choice>
      <xs:element name="eventNodeList" type="NcxAccessNodeList"/>
      <xs:element name="xpathExpr" type="xs:string"/>
      <xs:element name="all"/>
     </xs:choice>
    </xs:complexType>
   </xs:element>
  </xs:sequence>
 </xs:complexType>

 <!--
   notificationRules Type
  -->
 <xs:complexType name="NcxAccessNotificationTable">
  <xs:annotation>
   <xs:documentation>
     NCX Access Control Rules for Notifications.
   </xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="notificationRule" type="NcxAccessNotificationRule"
    minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   blank type template for a security object
  -->
 <xs:complexType name="securityPSType"/>

 <!--
   abstract template for the security element
  -->
 <xs:element name="securityPS" type="securityPSType" abstract="true"/>

 <!--
   abstract template for the security application contents
  -->
 <xs:complexType name="securityAppType">
  <xs:sequence>
   <xs:element ref="securityPS" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <!--
   accessControl Type
  -->
 <xs:complexType name="accessControlPSType">
  <xs:annotation>
   <xs:documentation>
    Parameters for NETCONF Access Control.
   </xs:documentation>
  </xs:annotation>
  <xs:complexContent>
   <xs:extension base="securityPSType">
    <xs:sequence>
     <xs:element name="configCapabilities"
      type="NcxAccessConfigCapabilities">
      <xs:annotation>
       <xs:documentation>
        NCX ACM configuration supported by the agent
       </xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-only</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="profile" type="NcxAccessConfigCapabilities">
      <xs:annotation>
       <xs:documentation>
        NCX Global Access Control Profile Parameters
       </xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-only</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="groups" type="NcxAccessGroupTable">
      <xs:annotation>
       <xs:documentation>
        NCX Group Membership Table
       </xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="groupsKey">
       <xs:selector xpath="group"/>
       <xs:field xpath="group/name"/>
      </xs:key>
     </xs:element>
     <xs:element name="rpcRules" type="NcxAccessRpcTable">
      <xs:annotation>
       <xs:documentation>
        NCX RPC Execution Access Control Table
       </xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="rpcRulesKey">
       <xs:selector xpath="rpcRule"/>
       <xs:field xpath="rpcRule/ruleNumber"/>
      </xs:key>
     </xs:element>
     <xs:element name="dataRules" type="NcxAccessDataTable">
      <xs:annotation>
       <xs:documentation>
         NCX Data Model Access Control Table
       </xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="dataRulesKey">
       <xs:selector xpath="dataRule"/>
       <xs:field xpath="dataRule/ruleNumber"/>
      </xs:key>
     </xs:element>
     <xs:element name="notificationRules"
      type="NcxAccessNotificationTable">
      <xs:annotation>
       <xs:documentation>
         NCX Data Model Access Control Table
       </xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="notificationRulesKey">
       <xs:selector xpath="notificationRule"/>
       <xs:field xpath="notificationRule/ruleNumber"/>
      </xs:key>
     </xs:element>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <!--
   element definition for the accessControl object
  -->
 <xs:element name="accessControl" type="accessControlPSType"
  substitutionGroup="securityPS"/>

 <!--
   element definition for the accessDeniedEvent notification
   not really accessible via the data model!!!
   Just contained in the 'notification' element!!!
  -->
 <xs:element name="accessDeniedEvent" type="NcxAccessDeniedEvent"/>

</xs:schema>

END

]]>
     </artwork>
    </figure>
   </t>
  </section>

   <!-- Possibly a 'Contributors' section ... -->

  <section anchor="IANA" title="IANA Considerations">
   <t>
    There are two actions that are requested of IANA:
    <list style="numbers">
     <t>register data model schema namespace URI</t>
     <t>register data model schema URL and store associated XSD</t>
    </list> 
   </t>
   <t>
    [namespace URI TBD]
   </t>
   <t>
    [namespace URL TBD]
   </t>
  </section>

  <section anchor="Security" title="Security Considerations">
   <t>
    This entire document discusses access control
    requirements and mechanisms for restricting
    NETCONF protocol behavior within a given session.
   </t>

   <t>
    Configuration of the access control system is
    highly sensitive to system security.  An agent may
    choose not to allow any user configuration to
    some portions of it, such as the global security level,
    or the groups which allowed access to system resources.
   </t>

   <t>
    If the agent chooses to allow user configuration of
    the access control system, then only sessions using
    the 'root' administrative role should be allowed to
    have write access to the data model.
   </t>

   <t>
    If the agent chooses to allow user retrieval of
    the access control system configuration, then only sessions using
    the 'root' administrative role should be allowed to
    have read access to the data model.
   </t>
     
   <t>
    Xpath expressions can be used for configuration 
    of most access control rules.  Care must be taken
    by the administrator to understand the ramifications
    of all terms within the Xpath expression, and make sure
    that it represents the intended evaluation criteria.
   </t>

   <t>
    There is a risk that invocation of 
    non-standard RPC methods will have undocumented side effects.
    An administrator should construct access control rules
    such that the configuration database is protected
    from such side effects.  Also, such RPC methods
    should never be invoked by a session using the 'root'
    administrative role.
   </t>

   <t>
    There is a risk that attackers may exploit bugs
    or side effects related to Xpath expression evaluation,
    which open security holes (i.e., grant access to groups
    that are not intended to have access) on a
    periodic or predictable basis, allowing an attacker more
    access than intended for short periods of time.
   </t>

   <t>
    There is a risk that non-standard RPC methods, or
    even the standard &lt;get&gt; operation, may
    return data which 'aliases' or 'copies' sensitive data
    from a different data object.
    In this case, the namespace and/or the element name
    will not match the values for the sensitive data,
    which is then fully or partially copied into a different
    namespace and/or element.  An administrator should
    avoid using data models which use this practice.
   </t>

   <t>
    An administrator should restrict write access to all
    configurable objects within this data model.  It is suggested
    that only sessions using the 'root' administrative role
    be permitted to configure the data model defined in this document.
   </t>

   <t>
    If write access is allowed for configuration of
    access control rules, then care must be taken
    not to disrupt the access control security,
    such as deleting an access control rule
    which denies access to 'all'.  It is suggested
    that the entire sent of rules (e.g., &lt;dataRules&gt;
    object, be replaced in one operation. For example,
    the &lt;dataRules&gt; object could be replaced by using the
    &lt;edit-config&gt; operation with a 'replace' operation
    attribute in the &lt;dataRules&gt; element.
   </t>

   <t>
    An administrator should restrict read access to the
    following objects within this data model, which reveal
    access control configuration:which could be considered
    sensitive.
    <list style="symbols">
     <t>groups</t>
     <t>rpcRules</t>
     <t>dataRules</t>
     <t>notificationRules</t>
    </list>
   </t>
  </section>

 </middle>

  <!--  ***** BACK MATTER ***** -->
 <back>
  <references title="Normative References">
    &rfc2119;
    &rfc4741;
    &rfc4742;
    &xmlspec;
    &xpathspec;
    &xsdspec;
    &notifspec;
    <reference anchor="I-D.bierman-ncx-smi">
     <front>
      <title>
       Network Configuration Extensions:
       Structure of Management Information
      </title>
      <author initials="A." surname="Bierman"
          fullname="Andy Bierman">
       <organization>netconfcentral.org</organization>
      </author>
      <date month="August" year="2007"/>
     </front>
     <seriesInfo name="Internet-Draft"
       value="draft-bierman-ncx-smi-00"/>
    </reference>
  </references>

  <references title="Informative References">
    &rfc2578;
  </references>

 </back>

</rfc>

