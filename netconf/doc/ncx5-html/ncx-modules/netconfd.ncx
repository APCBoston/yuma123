ncx-module netconfd {
  header {
    description "NCX Agent Configuration Parameters and Statistics";
    version 0.4;
    owner ncx;
    application netconfd;
    copyright "Copyright (C) 2006-2007, Andy Bierman.";
    contact-info "Send comments to <ietf@andybierman.com>.";
    last-update "2007-04-17";
    revision-history {
       0.4 "Add stats and change name from ncxagtboot to netconfd";
       0.3 "Changed nc-boot and expand as nc-cli parmset.";
       0.2 "Added load-config RPC method";
       0.1 "Initial version";
    }
  }

  imports {
    import ncxtypes;
    import netconf;
    import xsd;
    import smi;
  }

  definitions {

    type NcAgentMode {
      description 
        "NETCONF Agent Operation Mode 
           standalone == single monolithic agent
           other == TBD; sub-agent mode or SNMP proxy mode";
      syntax { 
         string = { standalone other }; 
      }
      default "standalone";
    }

    type NcPort {
      description "Placeholder for a TCP/UDP port number data type";
      syntax { 
         uint (0 .. 65535);
      }
    }

    type NcSshPort {
      description "NETCONF Agent SSH Port Binding";
      syntax { NcPort; }
      default "830";
    }

    type FileSpecList {
      description 
        "PATHSPEC formatted string indicating the machine-dependent
         search path for the ncx-modules directory";
      syntax { 
        list { string };
      }
    }

    type NcStartupType {
      description "NETCONF Agent Native Startup Update Mode";
      syntax { 
         string = { mirror distinct }; 
      }
      default "distinct";
    }

    type DefaultOwner {
      description "Default owner used in protocol operations";
      syntax { NcxName; }
      default "ncx";
    }

    type NcTransOrderType {
      description "NETCONF Transport Binding Order Type";
      syntax { 
         string = { beep ssh soap-beep soap-https };
      }
      default "ssh";
    }

    type NcTransOrderList {
      description "NETCONF Transport Binding Order List";
      syntax { 
         list (1..4) { NcTransOrderType };
      }
      appinfo {
        no-duplicates;
        merge-type last;
      }
    }

    type NcBinding {
      description "NETCONF Transport Binding";
      syntax {
        struct {
          NcIndex id;
          string protocol;
          NcPortNumber port;
        }
      }
    }

    type NcBindingTable {
      description 
         "Containerized Table of NETCONF Transport Bindings.";
      syntax {
        container [binding.id] {
          NcBinding  binding;
        }
      }
    }

    parmset nc-cli {
      description
         "CLI Parameter Set for the NETCONF Agent Application.";
      order loose;
      parms {
        parm agent-mode {
          description
             "Agent operation mode.";
          type NcAgentMode;
          max-access read-write;
	  usage mandatory;
        }

        parm startup-type {
          description "Agent startup commit type.";
          type NcStartupType;
          max-access read-write;
	  usage mandatory;
        }

	parm ssh-port {
          description
             "Port number to use for the SSH transport mapping.";
          type NcSshPort;
          max-access read-write;
	  usage mandatory;
        }

        parm cfg-path {
          description
             "Internal file search path for configuration modules.";
          type FileSpecList;
          max-access read-write;
          usage optional;
        }
      }
    }

    parmset nc-transport {
      description
         "Parameters for the NETCONF Transport Mappings.";
      order loose;
      parms {
        parm binding-order {
          description
             "Transport binding order used during NETCONF session startup.";
          type NcTransOrderList;
          max-access read-write;
          usage optional;
        }
        parm default-owner {
          type DefaultOwner;
          max-access read-write;
          usage mandatory;
        }
        parm bindings {
          type NcBindingTable;
          max-access read-create;
        }
      }
    }

    #
    # Internal NCX RPC to load the startup config
    #
    parmset LoadConfigPS {
      description 
        "Internal NCX extension to load XML config files.";
      order strict;
      type rpc;
      parms {
        parm config {
          description "XML Config contents.";
          type ConfigInlineType;
        }
      }
    }

    rpc load-config {
      description "NCX load-config operation.";
      rpc-type config;
      input LoadConfigPS;
      output RpcOkReplyType;
    }
  }
}
