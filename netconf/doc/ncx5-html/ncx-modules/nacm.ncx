ncx-module nacm {
  header {
    description 
      "NETCONF Access Control Model Parameters

       Usage:

       0) Module definitions will create (owner, namespace) tuples
          for entire data model (i.e., loaded modules)

       1) Add 1 or more users and/or hosts to the NcxGroupTable

       - Group Table 
         - A user or host is allowed to belong to multiple groups
         - Access in each of the access control tables is 
           by group name, not user name or host address
         - the user 'rrot' always has access to all RPC methods 
           and all data

       2) Add 1 or more Access Control Entries
          to the access control tables below:

       3) First, a user must be granted access in one of these 2
          RPC access control tables:

         - RPC Type Access Table
           - listed group names are allowed to access any RPC
             method of a particular type, such as 'config' , 'exec'
             or 'monitor'

         - RPC Method Access Table
           - listed group names are allowed to invoke the 
             specified RPC method

         If the user does not have permission to access
         the RPC method, then permission is denied and
         an access-denied error is generated.

         If the agent is not configures to require strict access,
         then all RPC types and all RPC methods can
         be accessed by all users.

       4) If the system access control is configured as 'strict',
          and the RPC method accesses any data elements within
          the conceptual configuration database,
          then a user must be granted access in the
          Data access control tables:

         - Data Access Table
           - listed group names are allowed the indicated max-access
             to any instance of the specified data object

       5) If the system access control is configured as 'strict',
          then this parmset must be used to configure all access 
          control parameters must be setup by 'root' before the 
          agent can be used

         - Parmset ncx-access
           - parameter set to configure the access control tables

      ";
    version 0.4;
    owner ncx;
    application security;
    copyright "Copyright (C) 2006-2007, Andy Bierman.";
    contact-info "Send comments to <ietf@andybierman.com>.";
    last-update "2007-03-30";
  }

  imports {
    import ncxtypes;
    import xsd;
    import smi { Counter64 };
    import inetAddress;
  }

  definitions {

    type NcxAccessControlMode {
      description 
        "NCX Agent Access Control Mode";
      syntax {
        string = { off loose strict };
      }
    }

    #
    # One Group Record
    # Membership by user name or host address
    #

    type NcxGroupRec {
      description 
        "One NCX Group Membership Record

         If a user name is present in the 'users' table then it
         is a member of the group identified by 'name'.

         If a host address is present in the 'hosts' table then it
         is a member of the group identified by 'name'. 

         If both 'users' and 'hosts' are missing then the group
         will be considered empty.";

      syntax {
        struct {
          NcxGroupName name;
          container users [user] {
            NcxUserName user; 
          }?

          # structs containing (structs containing)
          # only simple types can be used as an index directly
          container hosts [host] {
            InetAddress host;
          }?
        }
      }
    }

    #
    # Group Table
    #

    type NcxGroupTable {
      description 
        "NCX Group Membership Table
         Users and hosts can belong to any number of groups.
         The group name must be unique.";
      syntax {
        # scoped names can be local (child of one of the 
        # table members) or remote (just like SMI but scoped)
        container [group.name] {
          NcxGroupRec group;
        }
      }
    }

    #
    # Group Execution for RPC by RPC Type Record
    #

    type NcxRpcTypeAccessRec {
      description 
        "NCX Access Control Entry for a Group by RPC Method Type.
         If an rpc-type is present in the 'rpc-types' list then the
         'group' is granted execution access to any RPC method with 
         the same value of the rpc-type values.";
      syntax {
        struct {
	  NcxGroupName group;
          NcxRpcTypeList rpc-types;
        }
      }
    }

    #
    # Group Execution for RPC by RPC Type Table
    #

    type NcxRpcTypeAccessTable {
      description 
        "NCX Access Control Table for RPC Type";
      syntax {
        container [rpc-type-acl.group] {
          NcxRpcTypeAccessRec rpc-type-acl;
        }
      }
    }

    #
    # Group Execution for RPC by Name Record
    #

    type NcxRpcAccessRec {
      description 
        "NCX Access Control Entry for a Group by RPC Method Name.

         If a method identified by a (owner, rpc) tuple is present 
         in the 'ace' table, then the 'group' is granted execution 
         access to that RPC method with the same (owner, rpc) values.";
      syntax {
        struct {
          NcxName group; 
          struct aces {
            table ace [owner, rpc] {
              NcxName owner;
              NcxName rpc;
            }
          }
        }
      }
    }

    #
    # Group Execution for RPC by Name Table
    #

    type NcxRpcAccessTable {
      description 
        "NCX Access Control Table for RPC Method Name";
      syntax {
        container [rpc-acl.group] {
          NcxRpcAccessRec rpc-acl;
        }
      }
    }

    #
    # Group Max Access to Data by Data Name Record
    #

    type NcxDataAccessRec {
      description 
        "NCX Access Control Entry for a Group by Data Object Name.

         If data identified by an Xpath absolute expression is present 
         in the 'ace' table, then the 'group' is granted at most
         'maxacc' level of access to the data named by the 
         (owner, data) values. 

          Multiple 'ace' elements are processed in order, and the
          first match is used.";
      syntax {
        struct {
          NcxName group;
          struct aces {
            struct ace {
              string data;   # Xpath expression
	      NcxAccessType maxacc;
            }+
          }
        }
      }
    }

    #
    # Group Max Access to Data by Data Name Table
    #

    type NcxDataAccessTable {
      description 
        "NCX Access Control Table for Data Objects";
      syntax {
        container [data-acl.group] {
          NcxDataAccessRec data-acl;
        }
      }
    }

    #
    # Parameter Set to Configure NCX Access Control
    #

    parmset ncx-access {
      description
         "Parameters for NETCONF Access Control.";
      order loose;
      parms {
        parm groups {
          description "NCX Group Membership Table";
          type NcxGroupTable;
          usage mandatory;
        }

        parm rpc-type-acls {
          description "NCX RPC Type Access Control Table ";
          type NcxRpcTypeAccessTable;
          usage optional;
        }

        parm rpc-acls {
          description "NCX RPC Execution Access Control Table ";
          type NcxRpcAccessTable;
          usage optional;
        }

        parm data-acls {
          description "NCX Data Model Access Control Table ";
          type NcxDataAccessTable;
          usage optional;
        }
      }
    }

  }
}
