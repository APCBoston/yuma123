ncx-module ncxtypes {
  header {
    description "NCX Common Data Types";
    version 0.2;
    owner ncx;
    application types;
    copyright "Copyright (C) 2006-2007, Andy Bierman.";
    contact-info "Send comments to <ietf@andybierman.com>.";
    last-update "2007-03-02";
    revision-history {
       0.1 "Initial version.";
       0.2 "Changed application to types";
    }
  }

  imports {}

  definitions {

    type NcxName {
      description "General Purpose NCX Name string.";
      syntax { 
	string (1..1023) pattern = "[a-z,A-Z][a-z,A-Z,0-9,\-,_]*"; 
      }
    }

    type NcxQName {
      description 
        "Qualified Name:
            module-name:NcxName OR owner-name:NcxName.";
      syntax {
	string (1..2046) pattern =
          "(([a-z,A-Z][a-z,A-Z,0-9,\-,_]*):)?([a-z,A-Z][a-z,A-Z,0-9,\-,_]*)";
      }
    }

    type NcxSimpleId {
      description "Simple Definition Identifier string.";
      syntax { NcxName; }
    }

    type NcxScopedId {
      description "Scoped Definition Identifier string.";
      syntax {
	string (3..) pattern =
          "([a-z,A-Z][a-z,A-Z,0-9,\-,_]*)\.(([a-z,A-Z][a-z,A-Z,0-9,\-,_]*)+)";
      }
    }

    type NcxModQualId {
      description "Module Qualified Simple Definition Identifier string.";
      syntax {
	string (3..) pattern =
          "([a-z,A-Z][a-z,A-Z,0-9,\-,_]*):([a-z,A-Z][a-z,A-Z,0-9,\-,_]*)";
      }
    }

    type NcxModScopedId {
      description "Module Qualified Scoped Definition Identifier string.";
      syntax {
	string (5..) pattern =
          "([a-z,A-Z][a-z,A-Z,0-9,\-,_]*):([a-z,A-Z][a-z,A-Z,0-9,\-,_]*)\."
          "(([a-z,A-Z][a-z,A-Z,0-9,\-,_]*)+)";
      }
    }

    type NcxIdentifier {
      description "Union of all the Identifier types.";
      syntax {
        union { NcxSimpleId NcxScopedId NcxModQualId NcxModScopedId };
      }
    }

    type NcxSessionId {
      description "NCX Session ID number";
      syntax { uint (1..); }
    }

    type NcxLineLength {
      description "Requested Maximum Line Length";
      syntax { uint (32..65535); }
    }

    type NcxUserName {
      description "NCX User Name string.";
      syntax { NcxName; }
    }

    type NcxGroupName {
      description "NCX Group Name string.";
      syntax { NcxName; }
    }

    type NcxModuleList {
      description "List of NCX Module names.";
      syntax { list { NcxName }; }
    }

    type NcxLockList {
      description "List of config named that are currently locked.";
      syntax { list { NcxName }; }
    }

    type NcLogControlType {
      description 
        "NCX Session logging control enumeration.
         Each successive value includes all the previous
         messages from lower value enumeration values,
         plus the messages for the specified value.

          off == no logging of RPC or data access is done
          error == log error messages
          info == log info messages 
          debug == log debug level 1 messages
          debug2 == log debug level 2 messages
          debug3 == log debug level 3 messages
         ";
      syntax {
         enum = { off error info debug debug2 debug3 };
      }
      default "off";
    }

    type NcPortNumber { 
      description "Transport layer port number.";
      syntax { uint ( 1 .. 65535 ); }
    }

    type NcIndex { 
      description "Non-negative index value";
      syntax { uint ( 1 ..  ); }
    }
    
  }
}

