<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://netconfcentral.org/ncx/test"
 targetNamespace="http://netconfcentral.org/ncx/test"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 elementFormDefault="qualified" attributeFormDefault="unqualified"
 xml:lang="en" version="1.0" xmlns:ncx="http://netconfcentral.org/ncx/1.0"
 xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
 xmlns:n8="http://netconfcentral.org/ietf/types">
 <xs:annotation>
  <xs:documentation> Converted from NCX module by ncxdump v0.2

    Module: test
    Owner: ncx
    Application: test
    Version: 1.0
    Copyright 2006 andybierman.com
    Contact Info: Send comments to &lt;ietf@andybierman.com&gt;.

    Description:
      Test module

    Revision History:

      Revision: 1.0
      Initial version
</xs:documentation>
 </xs:annotation>

 <xs:import namespace="http://www.w3.org/XML/1998/namespace"
  schemaLocation="http://www.w3.org/2001/xml.xsd"/>

 <xs:import namespace="http://netconfcentral.org/ietf/types"
  schemaLocation="http://netconfcentral.org/ietf/types
  http://www.netconfcentral.org/xsd/ietf/smi.xsd"/>

 <xs:import namespace="urn:ietf:params:xml:ns:netconf:base:1.0"
  schemaLocation="urn:ietf:params:xml:ns:netconf:base:1.0
  http://www.netconfcentral.org/xsd/ietf/netconf.xsd"/>

 <xs:simpleType name="String1">
  <xs:restriction base="xs:string">
   <xs:pattern value="/c+"/>
  </xs:restriction>
 </xs:simpleType>

 <xs:simpleType name="String2">
  <xs:restriction base="xs:string">
   <xs:enumeration value="x"/>
   <xs:enumeration value="testing one two"/>
   <xs:enumeration value="testing 3 4"/>
  </xs:restriction>
 </xs:simpleType>

 <xs:complexType name="String3">
  <xs:simpleContent>
   <xs:extension base="String2">
    <xs:attribute name="m1" type="String1" use="required"/>
    <xs:attribute name="mstr" type="xs:string" use="required"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>

 <xs:simpleType name="Enum1">
  <xs:restriction base="xs:string">
   <xs:enumeration value="fred"/>
   <xs:enumeration value="wilma"/>
   <xs:enumeration value="barney"/>
  </xs:restriction>
 </xs:simpleType>

 <xs:complexType name="DateTimeStamp">
  <xs:annotation>
   <xs:documentation>Readonly timestamp in dateTime format.</xs:documentation>
  </xs:annotation>
  <xs:simpleContent>
   <xs:extension base="xs:dateTime"/>
  </xs:simpleContent>
 </xs:complexType>

 <xs:complexType name="Counter1">
  <xs:annotation>
   <xs:documentation>A description string needs quotes only if it contains 
          whitespace.</xs:documentation>
   <xs:appinfo>
    <ncx:condition>capability(acme:bigcounters)</ncx:condition>
   </xs:appinfo>
  </xs:annotation>
  <xs:simpleContent>
   <xs:extension base="n8:Counter64">
    <xs:attribute name="lastChangeTime" type="DateTimeStamp"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>

 <xs:complexType name="ZCounter">
  <xs:simpleContent>
   <xs:extension base="Counter1"/>
  </xs:simpleContent>
 </xs:complexType>

 <xs:complexType name="Struct1">
  <xs:annotation>
   <xs:appinfo>
    <ncx:fred>flintstone</ncx:fred>
    <ncx:barney>rubble</ncx:barney>
   </xs:appinfo>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="a" type="xs:int"/>
   <xs:element name="b" type="xs:unsignedInt"/>
   <xs:element name="c" type="xs:long"/>
   <xs:element name="d" type="xs:unsignedLong"/>
   <xs:element name="e" type="xs:float"/>
   <xs:element name="f" type="xs:double"/>
   <xs:element name="g" type="xs:string"/>
   <xs:element name="h" type="xs:hexBinary"/>
   <xs:element name="i">
    <xs:simpleType>
     <xs:list itemType="xs:string"/>
    </xs:simpleType>
   </xs:element>
   <xs:element name="j">
    <xs:simpleType>
     <xs:list itemType="xs:int"/>
    </xs:simpleType>
   </xs:element>
   <xs:element name="k" type="xs:anyType"/>
   <xs:element name="m"/>
   <xs:element name="n">
    <xs:simpleType>
     <xs:restriction base="xs:string">
      <xs:enumeration value="foo"/>
      <xs:enumeration value="bar"/>
      <xs:enumeration value="baz"/>
      <xs:enumeration value="goo"/>
     </xs:restriction>
    </xs:simpleType>
   </xs:element>
   <xs:element name="o">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="x">
       <xs:simpleType>
        <xs:restriction base="xs:int">
         <xs:minInclusive value="1"/>
         <xs:maxInclusive value="10"/>
        </xs:restriction>
       </xs:simpleType>
      </xs:element>
      <xs:element name="y">
       <xs:simpleType>
        <xs:restriction base="xs:string">
         <xs:enumeration value="up"/>
         <xs:enumeration value="down"/>
         <xs:enumeration value="testing"/>
        </xs:restriction>
       </xs:simpleType>
      </xs:element>
     </xs:sequence>
    </xs:complexType>
   </xs:element>
   <xs:element name="p">
    <xs:complexType>
     <xs:choice>
      <xs:element name="cnt" type="n8:Counter64"/>
      <xs:group>
       <xs:element name="locnt" type="n8:Counter32"/>
       <xs:element name="hicnt" type="n8:Counter32"/>
      </xs:group>
     </xs:choice>
    </xs:complexType>
   </xs:element>
   <xs:element name="q" minOccurs="0" maxOccurs="unbounded">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="inline-index1" type="xs:int"/>
      <xs:element name="index2" type="xs:string"/>
      <xs:element name="column1">
       <xs:simpleType>
        <xs:restriction base="xs:string">
         <xs:pattern value="\c+"/>
        </xs:restriction>
       </xs:simpleType>
      </xs:element>
     </xs:sequence>
    </xs:complexType>
    <xs:key name="qKey">
     <xs:selector xpath="."/>
     <xs:field xpath="inline-index1"/>
     <xs:field xpath="index2"/>
    </xs:key>
   </xs:element>
   <xs:element name="names">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="name">
       <xs:simpleType>
        <xs:simpleContent>
         <xs:restriction base="xs:string">
          <xs:minLength value="1"/>
          <xs:maxLength value="255"/>
         </xs:restriction>
        </xs:simpleContent>
       </xs:simpleType>
      </xs:element>
     </xs:sequence>
    </xs:complexType>
    <xs:key name="namesKey">
     <xs:selector xpath="name"/>
     <xs:field xpath="name"/>
    </xs:key>
   </xs:element>
  </xs:sequence>
  <xs:attribute name="test" type="xs:string"/>
 </xs:complexType>

 <xs:complexType name="Test1Row">
  <xs:annotation>
   <xs:documentation>Test 1 Table</xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="str1" type="String1"/>
   <xs:element name="str2" type="String2" minOccurs="0"
    maxOccurs="unbounded"/>
   <xs:element name="foo">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="x" type="xs:int"/>
      <xs:element name="y" type="xs:int" minOccurs="0"/>
      <xs:element name="z" type="xs:string" minOccurs="0"
       maxOccurs="unbounded"/>
     </xs:sequence>
    </xs:complexType>
   </xs:element>
   <xs:element name="longval" type="xs:long"/>
  </xs:sequence>
  <xs:attribute name="m1" type="xs:string" use="required"/>
  <xs:attribute name="m2" type="xs:unsignedInt"/>
 </xs:complexType>

 <xs:complexType name="Ename1">
  <xs:annotation>
   <xs:documentation>The ename type is a simplified way to define
         a choice between multiple empty elements, such
         as the configName in NETCONF (running, candidate, startup).</xs:documentation>
  </xs:annotation>
  <xs:choice>
   <xs:element name="elem1"/>
   <xs:element name="elem2"/>
  </xs:choice>
 </xs:complexType>

 <xs:complexType name="EnameStruct">
  <xs:annotation>
   <xs:documentation>Ename done as a choice of flags.</xs:documentation>
  </xs:annotation>
  <xs:choice>
   <xs:element name="elem1"/>
   <xs:element name="elem2"/>
  </xs:choice>
 </xs:complexType>

 <xs:complexType name="Row1">
  <xs:annotation>
   <xs:documentation>Test 1 Row</xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="str1">
    <xs:simpleType>
     <xs:restriction base="xs:string">
      <xs:enumeration value="foo"/>
      <xs:enumeration value="bar"/>
      <xs:enumeration value="baz"/>
     </xs:restriction>
    </xs:simpleType>
   </xs:element>
   <xs:element name="name">
    <xs:simpleType>
     <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="255"/>
     </xs:restriction>
    </xs:simpleType>
   </xs:element>
   <xs:element name="bytes" type="xs:unsignedLong" minOccurs="0"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="CounterSet">
  <xs:annotation>
   <xs:documentation>Sample Counters</xs:documentation>
   <xs:appinfo>
    <ncx:counter-reset-events>reboot</ncx:counter-reset-events>
    <ncx:discontinuity-object>sysUpTime.0</ncx:discontinuity-object>
   </xs:appinfo>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="bytes" type="n8:Counter64"/>
   <xs:element name="zbytes" type="ZCounter" default="0"/>
   <xs:element name="c3" type="n8:Counter64" minOccurs="0"
    maxOccurs="unbounded"/>
   <xs:element name="c4" type="n8:Counter64" maxOccurs="unbounded"/>
  </xs:sequence>
  <xs:attribute name="lastChangeTime" type="xs:dateTime" use="required"/>
 </xs:complexType>

 <xs:complexType name="Table1">
  <xs:annotation>
   <xs:documentation>Test 1 Table with 1 local index and maxrows==60</xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="str1">
    <xs:simpleType>
     <xs:restriction base="xs:string">
      <xs:enumeration value="foo"/>
      <xs:enumeration value="bar"/>
      <xs:enumeration value="baz"/>
     </xs:restriction>
    </xs:simpleType>
   </xs:element>
   <xs:element name="name">
    <xs:simpleType>
     <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="255"/>
     </xs:restriction>
    </xs:simpleType>
   </xs:element>
   <xs:element name="bytes" type="xs:unsignedLong"/>
   <xs:element name="childtable" minOccurs="0" maxOccurs="unbounded">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="x" type="xs:int"/>
      <xs:element name="y" type="xs:int"/>
     </xs:sequence>
    </xs:complexType>
    <xs:key name="childtableKey">
     <xs:selector xpath="."/>
     <xs:field xpath="x"/>
    </xs:key>
   </xs:element>
  </xs:sequence>
  <xs:attribute name="t" type="xs:int" use="required"/>
 </xs:complexType>

 <xs:complexType name="Table1a">
  <xs:annotation>
   <xs:documentation>Test 1A Table</xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="name" type="String3" default="x" minOccurs="0"
    maxOccurs="unbounded"/>
   <xs:element name="num" type="xs:int"/>
   <xs:element name="str1">
    <xs:simpleType>
     <xs:restriction base="xs:string">
      <xs:enumeration value="foo"/>
      <xs:enumeration value="bar"/>
      <xs:enumeration value="baz"/>
     </xs:restriction>
    </xs:simpleType>
   </xs:element>
   <xs:element name="bytes" type="xs:unsignedLong"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="Container1">
  <xs:annotation>
   <xs:documentation>Test 1 Container</xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="testrow" type="Row1" minOccurs="0" maxOccurs="60"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="Table2">
  <xs:annotation>
   <xs:documentation>Nested Containers</xs:documentation>
  </xs:annotation>
  <xs:sequence>
   <xs:element name="x" type="xs:int"/>
   <xs:element name="testrows">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="testrow" type="Row1" minOccurs="0"
       maxOccurs="unbounded"/>
     </xs:sequence>
    </xs:complexType>
    <xs:key name="testrowsKey">
     <xs:selector xpath="testrow"/>
     <xs:field xpath="testrow/name"/>
     <xs:field xpath="testrow/str1"/>
    </xs:key>
   </xs:element>
   <xs:element name="names">
    <xs:complexType>
     <xs:sequence>
      <xs:element name="name">
       <xs:simpleType>
        <xs:simpleContent>
         <xs:restriction base="xs:string">
          <xs:minLength value="1"/>
          <xs:maxLength value="255"/>
         </xs:restriction>
        </xs:simpleContent>
       </xs:simpleType>
      </xs:element>
     </xs:sequence>
    </xs:complexType>
    <xs:key name="namesKey">
     <xs:selector xpath="name"/>
     <xs:field xpath="name"/>
    </xs:key>
   </xs:element>
   <xs:element name="tab1" type="Table1" minOccurs="0" maxOccurs="60">
    <xs:key name="tab1Key">
     <xs:selector xpath="."/>
     <xs:field xpath="str1"/>
    </xs:key>
   </xs:element>
   <xs:element name="tab1a" type="Table1a" minOccurs="0" maxOccurs="60">
    <xs:key name="tab1aKey">
     <xs:selector xpath="."/>
     <xs:field xpath="name"/>
     <xs:field xpath="num"/>
    </xs:key>
   </xs:element>
   <xs:element name="con1" type="Container1">
    <xs:key name="con1Key">
     <xs:selector xpath="testrow"/>
     <xs:field xpath="testrow/str1"/>
    </xs:key>
   </xs:element>
   <xs:element name="y" type="xs:int"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="Parmset1">
  <xs:annotation>
   <xs:documentation>Parameter Set Definitions contain writable parameters
         and read-only objects, 

         Data parmsets are collected in an application node
         in the XML (from the module header)
         RPC Parmsets are extensions of the rpcOperationType
         and are used directly (no container node) by 1 or more
         RPC methods.

         Parmsets for RPC input must not contain read-only
         mandatory parameters or parsing will always fail
         for that parameter.</xs:documentation>
   <xs:appinfo>
    <ncx:condition>condition string syntax not checked yet</ncx:condition>
    <ncx:fooparm>Set to any string</ncx:fooparm>
    <ncx:fooflag/>
   </xs:appinfo>
  </xs:annotation>
  <xs:complexContent>
   <xs:extension base="nc:rpcOperationType">
    <xs:sequence>
     <xs:element name="p1" type="Container1">
      <xs:annotation>
       <xs:documentation>Parameters can be conditional. 
              Runtime Condition Language TBD.</xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
        <ncx:condition>capability(acme:wifi-extensions)</ncx:condition>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="p1Key">
       <xs:selector xpath="testrow"/>
       <xs:field xpath="testrow/str1"/>
      </xs:key>
     </xs:element>
     <xs:element name="p2" type="Ename1">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="p3" type="String3" minOccurs="0"
      maxOccurs="unbounded">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="p4" type="Row1">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="p5" type="Table1" minOccurs="0" maxOccurs="60">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
        <ncx:condition>capability(acme:config-package)</ncx:condition>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="p5Key">
       <xs:selector xpath="."/>
       <xs:field xpath="str1"/>
      </xs:key>
     </xs:element>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:complexType name="testPSType"/>

 <xs:element name="testPS" type="testPSType" abstract="true"/>

 <xs:complexType name="testAppType">
  <xs:sequence>
   <xs:element ref="testPS" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="Parmset2PSType">
  <xs:complexContent>
   <xs:extension base="testPSType">
    <xs:sequence>
     <xs:element name="p6" type="Table1a" minOccurs="0" maxOccurs="60">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="p6Key">
       <xs:selector xpath="."/>
       <xs:field xpath="name"/>
       <xs:field xpath="num"/>
      </xs:key>
     </xs:element>
     <xs:element name="p7" type="Container1">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="p7Key">
       <xs:selector xpath="testrow"/>
       <xs:field xpath="testrow/str1"/>
      </xs:key>
     </xs:element>
     <xs:element name="p8" type="Table2" minOccurs="0"
      maxOccurs="unbounded">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="p8Key">
       <xs:selector xpath="."/>
       <xs:field xpath="x"/>
      </xs:key>
     </xs:element>
     <xs:element name="stats" type="CounterSet">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-only</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:element name="Parmset2" type="Parmset2PSType"
  substitutionGroup="testPS"/>

 <xs:complexType name="Test1Psd">
  <xs:annotation>
   <xs:documentation>Optional PSD Description</xs:documentation>
  </xs:annotation>
  <xs:complexContent>
   <xs:extension base="nc:rpcOperationType">
    <xs:sequence>
     <xs:element name="p1" type="Enum1">
      <xs:annotation>
       <xs:documentation>Parameters can be conditional. 
              Runtime Condition Language TBD.</xs:documentation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
        <ncx:condition>capability(acme:wifi-extensions)</ncx:condition>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="p2" type="Enum1">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="p3" type="String1">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:choice>
      <xs:element name="p4" type="Row1">
       <xs:annotation>
        <xs:appinfo>
         <ncx:max-access>read-create</ncx:max-access>
        </xs:appinfo>
       </xs:annotation>
      </xs:element>
      <xs:group>
       <xs:element name="p5" type="String2" minOccurs="0"
        maxOccurs="unbounded">
        <xs:annotation>
         <xs:appinfo>
          <ncx:max-access>read-create</ncx:max-access>
         </xs:appinfo>
        </xs:annotation>
       </xs:element>
       <xs:element name="p6" type="xs:float">
        <xs:annotation>
         <xs:appinfo>
          <ncx:max-access>read-create</ncx:max-access>
         </xs:appinfo>
        </xs:annotation>
       </xs:element>
      </xs:group>
      <xs:element name="p7" type="xs:ename">
       <xs:annotation>
        <xs:appinfo>
         <ncx:max-access>read-create</ncx:max-access>
        </xs:appinfo>
       </xs:annotation>
      </xs:element>
     </xs:choice>
     <xs:element name="p8" type="Test1Row" minOccurs="0" maxOccurs="60">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
      <xs:key name="p8Key">
       <xs:selector xpath="."/>
       <xs:field xpath="str1"/>
       <xs:field xpath="str2"/>
      </xs:key>
     </xs:element>
     <xs:element name="p9" type="xs:flag">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
     <xs:element name="p10" type="xs:any">
      <xs:annotation>
       <xs:appinfo>
        <ncx:max-access>read-create</ncx:max-access>
       </xs:appinfo>
      </xs:annotation>
     </xs:element>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>

 <xs:element name="rpc-one" type="Test1Psd"
  substitutionGroup="nc:rpcOperation">
  <xs:annotation>
   <xs:documentation>An RPC method is represented as an element which 
        replaces the abstract 'rpcType' and 'rpcOperationType'
        in the NETCONF schema.</xs:documentation>
   <xs:appinfo>
    <ncx:rpc-type>debug</ncx:rpc-type>
    <ncx:rpc-output>RpcDataReplyType</ncx:rpc-output>
    <ncx:test-version>1.7</ncx:test-version>
   </xs:appinfo>
  </xs:annotation>
 </xs:element>

</xs:schema>
