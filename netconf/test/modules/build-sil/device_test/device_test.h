
#ifndef _H_device_test
#define _H_device_test
/* 

 * Copyright (c) 2009 - 2011, Andy Bierman
 * All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.1.1460M

    Combined SIL header
    module device_test
    revision 2011-09-07
    namespace http://netconfcentral.org/ns/device_test

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_device_test_M_device_test (const xmlChar *)"device_test"
#define y_device_test_R_device_test (const xmlChar *)"2011-09-07"

#define y_device_test_N_activeProfile (const xmlChar *)"activeProfile"
#define y_device_test_N_alarmConfig (const xmlChar *)"alarmConfig"
#define y_device_test_N_alarmConfigBitMask (const xmlChar *)"alarmConfigBitMask"
#define y_device_test_N_bitrate (const xmlChar *)"bitrate"
#define y_device_test_N_configBitMask (const xmlChar *)"configBitMask"
#define y_device_test_N_configuration (const xmlChar *)"configuration"
#define y_device_test_N_copyResult (const xmlChar *)"copyResult"
#define y_device_test_N_copy_profile (const xmlChar *)"copy-profile"
#define y_device_test_N_copy_stream (const xmlChar *)"copy-stream"
#define y_device_test_N_daughterPart2 (const xmlChar *)"daughterPart2"
#define y_device_test_N_definition (const xmlChar *)"definition"
#define y_device_test_N_destinationId (const xmlChar *)"destinationId"
#define y_device_test_N_destinationPinId (const xmlChar *)"destinationPinId"
#define y_device_test_N_destinationProfile (const xmlChar *)"destinationProfile"
#define y_device_test_N_destinationProfileId (const xmlChar *)"destinationProfileId"
#define y_device_test_N_destinationStreamId (const xmlChar *)"destinationStreamId"
#define y_device_test_N_destintionStreamIdList (const xmlChar *)"destintionStreamIdList"
#define y_device_test_N_dictionary (const xmlChar *)"dictionary"
#define y_device_test_N_echoConfiguration (const xmlChar *)"echoConfiguration"
#define y_device_test_N_editStreamAlarmConfigResult (const xmlChar *)"editStreamAlarmConfigResult"
#define y_device_test_N_editStreamConfigResult (const xmlChar *)"editStreamConfigResult"
#define y_device_test_N_editStreamStatusConfigResult (const xmlChar *)"editStreamStatusConfigResult"
#define y_device_test_N_getDictionaryReferenceResult (const xmlChar *)"getDictionaryReferenceResult"
#define y_device_test_N_getDictionaryResult (const xmlChar *)"getDictionaryResult"
#define y_device_test_N_getStatusResult (const xmlChar *)"getStatusResult"
#define y_device_test_N_get_dictionary (const xmlChar *)"get-dictionary"
#define y_device_test_N_get_dictionary_reference (const xmlChar *)"get-dictionary-reference"
#define y_device_test_N_get_resource_capability (const xmlChar *)"get-resource-capability"
#define y_device_test_N_get_resource_types (const xmlChar *)"get-resource-types"
#define y_device_test_N_get_status (const xmlChar *)"get-status"
#define y_device_test_N_get_time (const xmlChar *)"get-time"
#define y_device_test_N_id (const xmlChar *)"id"
#define y_device_test_N_identification (const xmlChar *)"identification"
#define y_device_test_N_ipAddress (const xmlChar *)"ipAddress"
#define y_device_test_N_itemDescription (const xmlChar *)"itemDescription"
#define y_device_test_N_itemType (const xmlChar *)"itemType"
#define y_device_test_N_language (const xmlChar *)"language"
#define y_device_test_N_modify_stream_alarm_config (const xmlChar *)"modify-stream-alarm-config"
#define y_device_test_N_modify_stream_config (const xmlChar *)"modify-stream-config"
#define y_device_test_N_modify_stream_status_config (const xmlChar *)"modify-stream-status-config"
#define y_device_test_N_name (const xmlChar *)"name"
#define y_device_test_N_notificationListeners (const xmlChar *)"notificationListeners"
#define y_device_test_N_packageValid (const xmlChar *)"packageValid"
#define y_device_test_N_packageVersion (const xmlChar *)"packageVersion"
#define y_device_test_N_part1 (const xmlChar *)"part1"
#define y_device_test_N_part1Version (const xmlChar *)"part1Version"
#define y_device_test_N_part2 (const xmlChar *)"part2"
#define y_device_test_N_pcbModificationState (const xmlChar *)"pcbModificationState"
#define y_device_test_N_permission1Information (const xmlChar *)"permission1Information"
#define y_device_test_N_permission1s (const xmlChar *)"permission1s"
#define y_device_test_N_permissionActive (const xmlChar *)"permissionActive"
#define y_device_test_N_physicalPath (const xmlChar *)"physicalPath"
#define y_device_test_N_profile (const xmlChar *)"profile"
#define y_device_test_N_profileId (const xmlChar *)"profileId"
#define y_device_test_N_quantity (const xmlChar *)"quantity"
#define y_device_test_N_redundantPart1 (const xmlChar *)"redundantPart1"
#define y_device_test_N_referenceId (const xmlChar *)"referenceId"
#define y_device_test_N_replaceExisting (const xmlChar *)"replaceExisting"
#define y_device_test_N_resourceConnection (const xmlChar *)"resourceConnection"
#define y_device_test_N_resourceNode (const xmlChar *)"resourceNode"
#define y_device_test_N_resourceNodeId (const xmlChar *)"resourceNodeId"
#define y_device_test_N_resourceType (const xmlChar *)"resourceType"
#define y_device_test_N_resource_capability (const xmlChar *)"resource-capability"
#define y_device_test_N_resource_type (const xmlChar *)"resource-type"
#define y_device_test_N_sNumber (const xmlChar *)"sNumber"
#define y_device_test_N_serialNumber (const xmlChar *)"serialNumber"
#define y_device_test_N_setTimeResult (const xmlChar *)"setTimeResult"
#define y_device_test_N_set_time (const xmlChar *)"set-time"
#define y_device_test_N_snmpTrapListeners (const xmlChar *)"snmpTrapListeners"
#define y_device_test_N_socket1 (const xmlChar *)"socket1"
#define y_device_test_N_socket1Version (const xmlChar *)"socket1Version"
#define y_device_test_N_sourceId (const xmlChar *)"sourceId"
#define y_device_test_N_sourcePinId (const xmlChar *)"sourcePinId"
#define y_device_test_N_sourceProfileId (const xmlChar *)"sourceProfileId"
#define y_device_test_N_sourceStreamId (const xmlChar *)"sourceStreamId"
#define y_device_test_N_statusConfig (const xmlChar *)"statusConfig"
#define y_device_test_N_statusConfigBitMask (const xmlChar *)"statusConfigBitMask"
#define y_device_test_N_statusId (const xmlChar *)"statusId"
#define y_device_test_N_statusListeners (const xmlChar *)"statusListeners"
#define y_device_test_N_statusValue (const xmlChar *)"statusValue"
#define y_device_test_N_stream (const xmlChar *)"stream"
#define y_device_test_N_streamConnection (const xmlChar *)"streamConnection"
#define y_device_test_N_streamId (const xmlChar *)"streamId"
#define y_device_test_N_streamIdList (const xmlChar *)"streamIdList"
#define y_device_test_N_time (const xmlChar *)"time"
#define y_device_test_N_timeUntilExpiry (const xmlChar *)"timeUntilExpiry"
#define y_device_test_N_typeOfPermission1 (const xmlChar *)"typeOfPermission1"
#define y_device_test_N_unitLocation (const xmlChar *)"unitLocation"
#define y_device_test_N_unitName (const xmlChar *)"unitName"
#define y_device_test_N_valid (const xmlChar *)"valid"
#define y_device_test_N_version (const xmlChar *)"version"
#define y_device_test_N_versionNumber (const xmlChar *)"versionNumber"
#define y_device_test_N_virtualResourceId (const xmlChar *)"virtualResourceId"
#define y_device_test_N_xpo (const xmlChar *)"xpo"

/* container /part1/part1Version */
typedef struct y_device_test_T_part1_part1Version_ {
    xmlChar *packageVersion;
    boolean packageValid;
} y_device_test_T_part1_part1Version;

/* list /part1/permission1Information/permission1s */
typedef struct y_device_test_T_part1_permission1Information_permission1s_ {
    dlq_hdr_t qhdr;
    uint32 id;
    xmlChar *name;
    uint32 quantity;
    xmlChar *typeOfPermission1;
    uint32 timeUntilExpiry;
    boolean permissionActive;
} y_device_test_T_part1_permission1Information_permission1s;

/* container /part1/permission1Information */
typedef struct y_device_test_T_part1_permission1Information_ {
    dlq_hdr_t permission1s;
} y_device_test_T_part1_permission1Information;

/* leaf-list /part1/notificationListeners/statusListeners */
typedef struct y_device_test_T_part1_notificationListeners_statusListeners_ {
    dlq_hdr_t qhdr;
    uint32 statusListeners;
} y_device_test_T_part1_notificationListeners_statusListeners;

/* leaf-list /part1/notificationListeners/snmpTrapListeners */
typedef struct y_device_test_T_part1_notificationListeners_snmpTrapListeners_ {
    dlq_hdr_t qhdr;
    uint32 snmpTrapListeners;
} y_device_test_T_part1_notificationListeners_snmpTrapListeners;

/* container /part1/notificationListeners/redundantPart1 */
typedef struct y_device_test_T_part1_notificationListeners_redundantPart1_ {
    uint32 ipAddress;
    uint32 destinationProfile;
    boolean echoConfiguration;
} y_device_test_T_part1_notificationListeners_redundantPart1;

/* container /part1/notificationListeners */
typedef struct y_device_test_T_part1_notificationListeners_ {
    dlq_hdr_t statusListeners;
    dlq_hdr_t snmpTrapListeners;
    y_device_test_T_part1_notificationListeners_redundantPart1 redundantPart1;
} y_device_test_T_part1_notificationListeners;

/* list /part1/resourceNode */
typedef struct y_device_test_T_part1_resourceNode_ {
    dlq_hdr_t qhdr;
    uint32 id;
    uint32 resourceType;
    xmlChar *configuration;
    xmlChar *statusConfig;
    xmlChar *alarmConfig;
    xmlChar *physicalPath;
} y_device_test_T_part1_resourceNode;

/* list /part1/socket1/socket1Version/part2/version */
typedef struct y_device_test_T_part1_socket1_socket1Version_part2_version_ {
    dlq_hdr_t qhdr;
    uint32 id;
    xmlChar *itemDescription;
    xmlChar *versionNumber;
    xmlChar *itemType;
    boolean valid;
} y_device_test_T_part1_socket1_socket1Version_part2_version;

/* list /part1/socket1/socket1Version/part2/daughterPart2/version */
typedef struct y_device_test_T_part1_socket1_socket1Version_part2_daughterPart2_version_ {
    dlq_hdr_t qhdr;
    uint32 id;
    xmlChar *itemDescription;
    xmlChar *versionNumber;
    xmlChar *itemType;
    boolean valid;
} y_device_test_T_part1_socket1_socket1Version_part2_daughterPart2_version;

/* list /part1/socket1/socket1Version/part2/daughterPart2 */
typedef struct y_device_test_T_part1_socket1_socket1Version_part2_daughterPart2_ {
    dlq_hdr_t qhdr;
    uint32 id;
    xmlChar *name;
    xmlChar *sNumber;
    xmlChar *packageVersion;
    boolean packageValid;
    xmlChar *pcbModificationState;
    xmlChar *serialNumber;
    dlq_hdr_t version;
} y_device_test_T_part1_socket1_socket1Version_part2_daughterPart2;

/* list /part1/socket1/socket1Version/part2 */
typedef struct y_device_test_T_part1_socket1_socket1Version_part2_ {
    dlq_hdr_t qhdr;
    uint32 id;
    xmlChar *name;
    xmlChar *sNumber;
    xmlChar *packageVersion;
    boolean packageValid;
    xmlChar *pcbModificationState;
    xmlChar *serialNumber;
    dlq_hdr_t version;
    dlq_hdr_t daughterPart2;
} y_device_test_T_part1_socket1_socket1Version_part2;

/* container /part1/socket1/socket1Version */
typedef struct y_device_test_T_part1_socket1_socket1Version_ {
    dlq_hdr_t part2;
} y_device_test_T_part1_socket1_socket1Version;

/* list /part1/socket1/resourceNode */
typedef struct y_device_test_T_part1_socket1_resourceNode_ {
    dlq_hdr_t qhdr;
    uint32 id;
    uint32 resourceType;
    xmlChar *configuration;
    xmlChar *statusConfig;
    xmlChar *alarmConfig;
    xmlChar *physicalPath;
} y_device_test_T_part1_socket1_resourceNode;

/* list /part1/socket1 */
typedef struct y_device_test_T_part1_socket1_ {
    dlq_hdr_t qhdr;
    uint32 id;
    y_device_test_T_part1_socket1_socket1Version socket1Version;
    dlq_hdr_t resourceNode;
} y_device_test_T_part1_socket1;

/* container /part1/identification */
typedef struct y_device_test_T_part1_identification_ {
    xmlChar *unitLocation;
    xmlChar *unitName;
} y_device_test_T_part1_identification;

/* container /part1 */
typedef struct y_device_test_T_part1_ {
    y_device_test_T_part1_part1Version part1Version;
    y_device_test_T_part1_permission1Information permission1Information;
    y_device_test_T_part1_notificationListeners notificationListeners;
    dlq_hdr_t resourceNode;
    dlq_hdr_t socket1;
    y_device_test_T_part1_identification identification;
} y_device_test_T_part1;

/* list /xpo/profile/stream/resourceNode */
typedef struct y_device_test_T_xpo_profile_stream_resourceNode_ {
    dlq_hdr_t qhdr;
    uint32 id;
    uint32 resourceType;
    xmlChar *configuration;
    xmlChar *statusConfig;
    xmlChar *alarmConfig;
    xmlChar *physicalPath;
} y_device_test_T_xpo_profile_stream_resourceNode;

/* list /xpo/profile/stream/resourceConnection */
typedef struct y_device_test_T_xpo_profile_stream_resourceConnection_ {
    dlq_hdr_t qhdr;
    uint32 id;
    uint32 sourceId;
    uint32 sourcePinId;
    uint32 destinationId;
    uint32 destinationPinId;
    uint32 bitrate;
} y_device_test_T_xpo_profile_stream_resourceConnection;

/* list /xpo/profile/stream */
typedef struct y_device_test_T_xpo_profile_stream_ {
    dlq_hdr_t qhdr;
    uint32 id;
    dlq_hdr_t resourceNode;
    dlq_hdr_t resourceConnection;
} y_device_test_T_xpo_profile_stream;

/* list /xpo/profile/streamConnection */
typedef struct y_device_test_T_xpo_profile_streamConnection_ {
    dlq_hdr_t qhdr;
    uint32 id;
    uint32 sourceStreamId;
    uint32 destinationStreamId;
    uint32 sourceId;
    uint32 sourcePinId;
    uint32 destinationId;
    uint32 destinationPinId;
    uint32 bitrate;
} y_device_test_T_xpo_profile_streamConnection;

/* list /xpo/profile */
typedef struct y_device_test_T_xpo_profile_ {
    dlq_hdr_t qhdr;
    uint32 id;
    dlq_hdr_t stream;
    dlq_hdr_t streamConnection;
} y_device_test_T_xpo_profile;

/* container /xpo */
typedef struct y_device_test_T_xpo_ {
    dlq_hdr_t profile;
    uint32 activeProfile;
} y_device_test_T_xpo;

/* leaf-list /get-resource-types/output/resource-type */
typedef struct y_device_test_T_get_resource_types_output_resource_type_ {
    dlq_hdr_t qhdr;
    uint32 resource_type;
} y_device_test_T_get_resource_types_output_resource_type;

/* container /get-resource-types/output */
typedef struct y_device_test_T_get_resource_types_output_ {
    dlq_hdr_t resource_type;
} y_device_test_T_get_resource_types_output;

/* container /get-resource-types/input */
typedef struct y_device_test_T_get_resource_types_input_ {
} y_device_test_T_get_resource_types_input;

/* rpc /get-resource-types */
typedef struct y_device_test_T_get_resource_types_ {
    y_device_test_T_get_resource_types_output output;
    y_device_test_T_get_resource_types_input input;
} y_device_test_T_get_resource_types;

/* container /get-resource-capability/input */
typedef struct y_device_test_T_get_resource_capability_input_ {
    uint32 resource_type;
} y_device_test_T_get_resource_capability_input;

/* container /get-resource-capability/output */
typedef struct y_device_test_T_get_resource_capability_output_ {
    xmlChar *resource_capability;
} y_device_test_T_get_resource_capability_output;

/* rpc /get-resource-capability */
typedef struct y_device_test_T_get_resource_capability_ {
    y_device_test_T_get_resource_capability_input input;
    y_device_test_T_get_resource_capability_output output;
} y_device_test_T_get_resource_capability;

/* container /get-dictionary/input */
typedef struct y_device_test_T_get_dictionary_input_ {
    xmlChar *language;
} y_device_test_T_get_dictionary_input;

/* container /get-dictionary/output */
typedef struct y_device_test_T_get_dictionary_output_ {
    xmlChar *getDictionaryResult;
    xmlChar *dictionary;
} y_device_test_T_get_dictionary_output;

/* rpc /get-dictionary */
typedef struct y_device_test_T_get_dictionary_ {
    y_device_test_T_get_dictionary_input input;
    y_device_test_T_get_dictionary_output output;
} y_device_test_T_get_dictionary;

/* container /get-dictionary-reference/input */
typedef struct y_device_test_T_get_dictionary_reference_input_ {
    xmlChar *language;
    uint32 referenceId;
} y_device_test_T_get_dictionary_reference_input;

/* container /get-dictionary-reference/output */
typedef struct y_device_test_T_get_dictionary_reference_output_ {
    xmlChar *getDictionaryReferenceResult;
    xmlChar *definition;
} y_device_test_T_get_dictionary_reference_output;

/* rpc /get-dictionary-reference */
typedef struct y_device_test_T_get_dictionary_reference_ {
    y_device_test_T_get_dictionary_reference_input input;
    y_device_test_T_get_dictionary_reference_output output;
} y_device_test_T_get_dictionary_reference;

/* container /copy-profile/input */
typedef struct y_device_test_T_copy_profile_input_ {
    uint32 sourceProfileId;
    uint32 destinationProfileId;
    boolean replaceExisting;
} y_device_test_T_copy_profile_input;

/* container /copy-profile/output */
typedef struct y_device_test_T_copy_profile_output_ {
    xmlChar *copyResult;
} y_device_test_T_copy_profile_output;

/* rpc /copy-profile */
typedef struct y_device_test_T_copy_profile_ {
    y_device_test_T_copy_profile_input input;
    y_device_test_T_copy_profile_output output;
} y_device_test_T_copy_profile;

/* leaf-list /copy-stream/input/destintionStreamIdList */
typedef struct y_device_test_T_copy_stream_input_destintionStreamIdList_ {
    dlq_hdr_t qhdr;
    uint32 destintionStreamIdList;
} y_device_test_T_copy_stream_input_destintionStreamIdList;

/* container /copy-stream/input */
typedef struct y_device_test_T_copy_stream_input_ {
    uint32 sourceProfileId;
    uint32 sourceStreamId;
    uint32 destinationProfileId;
    dlq_hdr_t destintionStreamIdList;
    boolean replaceExisting;
} y_device_test_T_copy_stream_input;

/* container /copy-stream/output */
typedef struct y_device_test_T_copy_stream_output_ {
    xmlChar *copyResult;
} y_device_test_T_copy_stream_output;

/* rpc /copy-stream */
typedef struct y_device_test_T_copy_stream_ {
    y_device_test_T_copy_stream_input input;
    y_device_test_T_copy_stream_output output;
} y_device_test_T_copy_stream;

/* leaf-list /modify-stream-config/input/streamIdList */
typedef struct y_device_test_T_modify_stream_config_input_streamIdList_ {
    dlq_hdr_t qhdr;
    uint32 streamIdList;
} y_device_test_T_modify_stream_config_input_streamIdList;

/* container /modify-stream-config/input */
typedef struct y_device_test_T_modify_stream_config_input_ {
    uint32 profileId;
    dlq_hdr_t streamIdList;
    uint32 resourceNodeId;
    xmlChar *configBitMask;
    xmlChar *configuration;
} y_device_test_T_modify_stream_config_input;

/* container /modify-stream-config/output */
typedef struct y_device_test_T_modify_stream_config_output_ {
    xmlChar *editStreamConfigResult;
} y_device_test_T_modify_stream_config_output;

/* rpc /modify-stream-config */
typedef struct y_device_test_T_modify_stream_config_ {
    y_device_test_T_modify_stream_config_input input;
    y_device_test_T_modify_stream_config_output output;
} y_device_test_T_modify_stream_config;

/* leaf-list /modify-stream-alarm-config/input/streamIdList */
typedef struct y_device_test_T_modify_stream_alarm_config_input_streamIdList_ {
    dlq_hdr_t qhdr;
    uint32 streamIdList;
} y_device_test_T_modify_stream_alarm_config_input_streamIdList;

/* container /modify-stream-alarm-config/input */
typedef struct y_device_test_T_modify_stream_alarm_config_input_ {
    uint32 profileId;
    dlq_hdr_t streamIdList;
    uint32 resourceNodeId;
    xmlChar *alarmConfigBitMask;
    xmlChar *alarmConfig;
} y_device_test_T_modify_stream_alarm_config_input;

/* container /modify-stream-alarm-config/output */
typedef struct y_device_test_T_modify_stream_alarm_config_output_ {
    xmlChar *editStreamAlarmConfigResult;
} y_device_test_T_modify_stream_alarm_config_output;

/* rpc /modify-stream-alarm-config */
typedef struct y_device_test_T_modify_stream_alarm_config_ {
    y_device_test_T_modify_stream_alarm_config_input input;
    y_device_test_T_modify_stream_alarm_config_output output;
} y_device_test_T_modify_stream_alarm_config;

/* leaf-list /modify-stream-status-config/input/streamIdList */
typedef struct y_device_test_T_modify_stream_status_config_input_streamIdList_ {
    dlq_hdr_t qhdr;
    uint32 streamIdList;
} y_device_test_T_modify_stream_status_config_input_streamIdList;

/* container /modify-stream-status-config/input */
typedef struct y_device_test_T_modify_stream_status_config_input_ {
    uint32 profileId;
    dlq_hdr_t streamIdList;
    uint32 resourceNodeId;
    xmlChar *statusConfigBitMask;
    xmlChar *statusConfig;
} y_device_test_T_modify_stream_status_config_input;

/* container /modify-stream-status-config/output */
typedef struct y_device_test_T_modify_stream_status_config_output_ {
    xmlChar *editStreamStatusConfigResult;
} y_device_test_T_modify_stream_status_config_output;

/* rpc /modify-stream-status-config */
typedef struct y_device_test_T_modify_stream_status_config_ {
    y_device_test_T_modify_stream_status_config_input input;
    y_device_test_T_modify_stream_status_config_output output;
} y_device_test_T_modify_stream_status_config;

/* container /get-status/input */
typedef struct y_device_test_T_get_status_input_ {
    uint32 streamId;
    uint32 virtualResourceId;
    uint32 statusId;
} y_device_test_T_get_status_input;

/* container /get-status/output */
typedef struct y_device_test_T_get_status_output_ {
    xmlChar *getStatusResult;
    xmlChar *statusValue;
} y_device_test_T_get_status_output;

/* rpc /get-status */
typedef struct y_device_test_T_get_status_ {
    y_device_test_T_get_status_input input;
    y_device_test_T_get_status_output output;
} y_device_test_T_get_status;

/* container /get-time/output */
typedef struct y_device_test_T_get_time_output_ {
    xmlChar *time;
} y_device_test_T_get_time_output;

/* container /get-time/input */
typedef struct y_device_test_T_get_time_input_ {
} y_device_test_T_get_time_input;

/* rpc /get-time */
typedef struct y_device_test_T_get_time_ {
    y_device_test_T_get_time_output output;
    y_device_test_T_get_time_input input;
} y_device_test_T_get_time;

/* container /set-time/input */
typedef struct y_device_test_T_set_time_input_ {
    xmlChar *time;
} y_device_test_T_set_time_input;

/* container /set-time/output */
typedef struct y_device_test_T_set_time_output_ {
    xmlChar *setTimeResult;
} y_device_test_T_set_time_output;

/* rpc /set-time */
typedef struct y_device_test_T_set_time_ {
    y_device_test_T_set_time_input input;
    y_device_test_T_set_time_output output;
} y_device_test_T_set_time;

/********************************************************************
* FUNCTION y_device_test_init
* 
* initialize the device_test server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_device_test_init (
    const xmlChar *modname,
    const xmlChar *revision);


/********************************************************************
* FUNCTION y_device_test_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_device_test_init2 (void);


/********************************************************************
* FUNCTION y_device_test_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_device_test_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif