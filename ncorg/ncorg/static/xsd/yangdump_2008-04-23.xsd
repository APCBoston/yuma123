<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns="http://netconfcentral.com/ncx/yangdump"
   targetNamespace="http://netconfcentral.com/ncx/yangdump"
   elementFormDefault="qualified" attributeFormDefault="unqualified"
   xml:lang="en" version="2008-04-23"
   xmlns:ncx="http://netconfcentral.com/ncx"
   xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0"
   xmlns:n8="http://netconfcentral.com/ncx/ncxtypes">
   <xs:annotation>
      <xs:documentation>
         Converted from NCX file 'yangdump.ncx' by yangdump version 0.9.2
         
         Module: yangdump
         Version: 2008-04-23
         Copyright: Copyright (C) 2006-2008, Andy Bierman.
         Contact: Send comments to &lt;support@netconfcentral.com&gt;.
      </xs:documentation>
      <xs:documentation>
         yangdump provides validation and translation of YANG data models.
         Information about a module or submodule can be generated as well.
         
         INPUT FILES
         
            Operations can be performed on one or more files with
            the 'module' parameter, or an entire directory tree
            with the 'subtree' parameter.  Unless the 'help' or
            'version' parameters is entered, one of these input
            parameters must be present.
         
         SEARCH PATH
         
             When a module name is entered as input, or when a
             module or submodule name is specified in an import or include
             statement within the file, the following search algorithm
             is used to find the file:
         
             1) file is in the current directory
             2) YANG_MODPATH environment var (or set by modpath parameter)
             3) $HOME/modules directory
             4) $YANG_HOME/modules directory
             5) $YANG_INSTALL/modules directory OR
                default install module location, '/usr/share/yang/modules'
         
             By default, the entire directory tree for all locations
             (except step 1) will be searched, not just the specified
             directory.  The 'no-subdirs' parameter can be used to
             prevent sub-directories from being searched.
         
             Any directory name beginning with a dot character '.'
             will be skipped.  Also, any directory named 'CVS' will
             be skipped in directory searches.
         
         TRANSLATION MODES
         
             The 'format' parameter is used to select a translation output mode.
             If it is missing, then no translation will be done.
             This parameter can be used with the module reports parameters,
             but the translation output should be directed to a file
             instead of STDOUT to keep them separated.
         
             For XSD 1.0 translation, use the 'format=xsd' parameter.
         
             For XHTML 1.0 translation, use the 'format=html' parameter.
         
         MODULE REPORTS
         
             For a 1 line output of the module name and version,
             use the 'modversion' parameter.
         
             For a listing of all the symbols that the file exports
             to other files, use the 'exports' parameter.
         
             For a listing of all the files that the file depends on,
             to compile, use the 'dependencies' parameter.
         
             For a listing of all the accessible object identifiers that
             the file contains, use the 'identifiers' parameter.
         
         OUTPUT MODES
         
             By default, any translation output will be sent to STDOUT.
         
             The 'output' parameter can be used to specify the
             full filespec of the output file,  or a
             partial directory specification to be combined
             with a default filename.
         
             The 'defnames' parameter can be used to generate a default
             filename in the current directory for the output, or
             in the 'output' directory, if one is specified.
         
             By default, an output filename will have the form:
         
         	  &lt;module-name&gt;_&lt;module-version&gt;.&lt;ext&gt;
         
             If the 'no-versionnames' parameter is used, then the
             default filename will have the form:
         
         	  &lt;module-name&gt;.&lt;ext&gt;
         
             This parameter will also affect URL generation during
             HTML translation.
         
             When the 'subtree' input parameter is used for XSD or HTML
             translation, the 'defnames' parameter will be automatically
             selected, to maintain well-formed XML documents when
             multiple translations are possible.
         
             If the 'unified' parameter is present, then all submodules will
             be processed when the input is a main module that includes
             any submodules.  For XSD and HTML translation, the
             submodule content will be generated instead of an 'include'
             statement.  Submodule files will be skipped in 'subtree' mode.
         
         
         ERROR LOGGING
         
             By default, warnings and errors are sent to STDOUT.
         
             A log file can be specified instead with the 'log' parameter.
             Existing log files can be reused with the 'logappend'
             parameter, otherwise log files are overwritten.
         
             The logging level can be controlled with the 'log-level'
             parameter.  The default log level is 'info'.  The
             log-levels are additive:
         
                off:    suppress all errors (not recommended!)
         	       A program return code of '1' indicates some error.
                error:  print errors
                warn:   print warnings
                info:   print generally interesting trace info
                debug:  print general debugging trace info
                debug2: print verbose debugging trace info
         
         ENVIRONMENT VARIABLES
         
             The following optional environment variables can be used
             to control module and data search behavior:
         
             HOME:  the user's home directory  (e.g., /home/andy)
         
             YANG_HOME:  The root of the user's YANG work directory
         		(e.g., /home/andy/swdev/netconf)
         
             YANG_INSTALL:  The root of the directory that yangdump
         		    is installed on this system
         		   (default is, /usr/share/yang)
         
             YANG_MODPATH: Colon-separated list of directories to
         		  search for modules and submodules.
         		  (e.g.: './workdir/modules:/home/andy/test-modules')
         		  The 'modpath' parameter will override this
         		  environment variable, if both are present.
         
         CONFIGURATION FILES
         
               * config file
         	default: /etc/yang.conf
         
             An ASCII configuration file format is supported to
             store command line parameters.  The 'config' parameter
             is used to specify a specific config file, otherwise
             the default config file will be checked.
         
             - A hash mark until EOLN is treated as a comment
             - All text is case-sensitive
             - Whitespace within a line is not significant
             - Whitespace to end a line is significant/
               Unless the line starts a multi-line string,
               an escaped EOLN (backslash EOLN) is needed
               to enter a leaf on multiple lines.
             - For parmsets that define lists, the key components
               are listed just after the parameter name, without
               any name,  e.g.,
         
         	interface eth0 {
         	  # name = eth0 is not listed inside the braces
         	  ifMtu 1500
         	  ifName mySystem
         	}
         
             A config file can contain any number of parameter
             sets for different programs.  Each program
             must have its own section, identifies by its name:
         
         	# this is a comment
         	yangdump {
         	  log-level debug
         	  output "~/swdev/testfiles"
         	}
         
         	netconfd {
         	  ...
         	}
         
         FILES
         
             The following data files must be present in the module
             search path in order for this program to function:
         
               * yangdump.ncx (this file)
         	default: /usr/share/yang/modules/apps/yangdump.ncx
         
               * ncxtypes.ncx
         	default: /usr/share/yang/modules/base/ncxtypes.ncx
         
             The following data files must be present in the data file
             search path in order for HTML translation to function properly:
         
               * yangdump-css-contents.txt
         	default: /usr/share/yang/data/yangdump-css-contents.txt
         
         
             This version of yangdump supports the version of YANG
             defined in draft-bjorklund-netconf-yang-02.txt.
         
         BUGS
            - keyref Xpath expressions are not validated
            - must-stmt Xpath expressions are not validated
         
              Internal diagnostics may generate the following
              type of message if any bugs are detected at runtime:
         
              [E0]
         	 filename.c:linenum error-number (error-msg)
         
              Please send a bug report to support@netconfcentral.com
              if any messages of this type appear in the error log.
         
      </xs:documentation>
      <xs:appinfo>
         <ncx:source>
            /home/andy/swdev/trunk/netconf/modules/netconfcentral/yangdump.ncx
         </ncx:source>
         <ncx:contact>
            Send comments to &lt;support@netconfcentral.com&gt;.
         </ncx:contact>
      </xs:appinfo>
   </xs:annotation>

   <xs:simpleType name="FormatType">
      <xs:annotation>
         <xs:documentation>
            Conversion Output Formats.
         </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="xsd"/>
         <xs:enumeration value="sql"/>
         <xs:enumeration value="sqldb"/>
         <xs:enumeration value="html"/>
         <xs:enumeration value="yang"/>
         <xs:enumeration value="copy"/>
         <xs:enumeration value="h"/>
      </xs:restriction>
   </xs:simpleType>

   <xs:simpleType name="IndentType">
      <xs:annotation>
         <xs:documentation>
            Requested indent amount.
            Only a limited range of line indent values are allowed.
         </xs:documentation>
         <xs:appinfo>
            <ncx:default>3</ncx:default>
         </xs:appinfo>
      </xs:annotation>
      <xs:restriction base="xs:unsignedInt">
         <xs:maxInclusive value="9"/>
      </xs:restriction>
   </xs:simpleType>

   <xs:simpleType name="TocType">
      <xs:annotation>
         <xs:documentation>
            Requested table of contents type.
         </xs:documentation>
         <xs:appinfo>
            <ncx:default>menu</ncx:default>
         </xs:appinfo>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="none"/>
         <xs:enumeration value="plain"/>
         <xs:enumeration value="menu"/>
      </xs:restriction>
   </xs:simpleType>

   <xs:simpleType name="ObjViewType">
      <xs:annotation>
         <xs:documentation>
            Requested view format for objects.
            
            raw -- output includes augment and uses clauses, not the
                   expanded results of those clauses.
            
            cooked -- output does not include augment or uses clauses,
                   just the objects generated from thoses clauses (if any).
         </xs:documentation>
         <xs:appinfo>
            <ncx:default>raw</ncx:default>
         </xs:appinfo>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="raw"/>
         <xs:enumeration value="cooked"/>
      </xs:restriction>
   </xs:simpleType>

   <xs:simpleType name="NcModuleSpecs">
      <xs:annotation>
         <xs:documentation>
            Multiple module parameter instances allowed.
         </xs:documentation>
      </xs:annotation>
      <xs:restriction base="n8:NcModuleSpec"/>
   </xs:simpleType>

   <xs:complexType name="yangdumpPSType"/>

   <xs:element name="yangdumpPS" type="yangdumpPSType" abstract="true"/>

   <xs:complexType name="yangdumpAppType">
      <xs:sequence>
         <xs:element ref="yangdumpPS" minOccurs="0"
            maxOccurs="unbounded"/>
      </xs:sequence>
   </xs:complexType>

   <xs:complexType name="yangdumpPSType">
      <xs:annotation>
         <xs:documentation>
            CLI Parameter Set for the YANG Converter Application.
         </xs:documentation>
      </xs:annotation>
      <xs:complexContent>
         <xs:extension base="yangdumpPSType">
            <xs:sequence>
               <xs:element name="config" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>
                        The name of the configuration file to use.
                        Any parameter except this one can be set in the config file.
                        The default config file will be not be checked if this
                        parameter is present.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:choice>
                  <xs:element name="module" type="NcModuleSpecs"
                     minOccurs="0" maxOccurs="unbounded">
                     <xs:annotation>
                        <xs:documentation>
                           YANG or NCX source module name to convert.
                        </xs:documentation>
                        <xs:appinfo>
                           <ncx:max-access>read-create</ncx:max-access>
                        </xs:appinfo>
                     </xs:annotation>
                  </xs:element>
                  <xs:element name="subtree" type="n8:NcModuleSpec">
                     <xs:annotation>
                        <xs:documentation>
                           Path specification of the directory subtree to convert.
                           All of the YANG and NCX source modules contained in the
                           specified directory sub-tree will be processed.
                           
                           If the 'output' parameter is present, and identifies
                           an existing directory, then any translation output
                           files will be generated in that directory.  If this
                           parameter identifies a file, then that one file will
                           be used for output.
                           
                           If the 'format' parameter is present, then one file
                           with the default name will be generated for each
                           YANG or NCX file found in the sub-tree.
                           
                           Note that symbolic links are not followed
                           during the directory traversal.  Only real directories
                           will be searched and regular files will be checked as
                           modules.  Processing will continue to the next file
                           if a module contains errors.
                        </xs:documentation>
                        <xs:appinfo>
                           <ncx:max-access>read-create</ncx:max-access>
                        </xs:appinfo>
                     </xs:annotation>
                  </xs:element>
               </xs:choice>
               <xs:element name="output" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>
                        Output directory or file name to use. 
                        Default is STDOUT if none specified and the
                        'defnames' parameter is also missing.
                        
                        If this parameter represents an existing directory,
                        then the 'defnames' parameter will be assumed by
                        default, and the translation output file(s) will be
                        generated in the specified directory.
                        
                        If this parameter represents a file name,
                        then the 'defnames' parameter will be ignored,
                        and all translation output will be directed
                        to the specified file.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="defnames" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        Output to a file with the default name for the format,
                        usually to the current directory.  
                        Not used if the format parameter is missing.
                        
                        If the 'output' parameter is present and represents
                        an existing directory, then the default filename
                        will be created in that directory, instead of the
                        current directory.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="format" type="FormatType">
                  <xs:annotation>
                     <xs:documentation>
                        Type of conversion desired, if any. If this
                        parameter is missing, then no translation
                        will be done, but the module will be validated,
                        and any requested reports will be generated.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="modversion" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        Validate the file, write the [sub]module 
                        name, version and source filespec, then exit.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="exports" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        Validate the file, write information for the symbols
                        that this [sub]module exports, then exit.  Report
                        includes the following info for the specific file,
                        not the entire module, if submodules are used:
                            - [sub]module name
                            - version
                            - source filespec
                            - namespace (module only)
                            - prefix (module only)
                            - belongs-to (submodule only)
                            - typedefs
                            - groupings
                            - objects, rpcs, notifications
                            - extensions.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="dependencies" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        Validate the file, write the module name, version 
                        and module source for each file that this [sub]module
                        imports and includes, then exit.
                        
                        Each dependency type, name, version, and source
                        is listed once. 
                        
                        If the dependency version and source are missing,
                        then that import or include file was not found.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="identifiers" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        Validate the file, write the list of object identifiers,
                        that this [sub]module contains, then exit.
                        
                        Each accessible object node is listed once,
                        including all child nodes.  Notifications and
                        RPC methods are considered top-level objects,
                        and have object identifiers as well as configuration
                        and state data..
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="help" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        Print yangdump help file and exit.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="html-div" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        If HTML translation is requested, then this parameter will
                        cause the output to be a single &lt;div&gt; element, instead of
                        an entire HTML file.  This allows the HTML translation
                        to be easily integrated within more complex WEB pages,
                        but the proper CSS definitions need to be present for the 
                        HTML to render properly. 
                        
                        The default filename extension will be '.div' instead of '.html'
                        if this parameter is present.  The contents will be well-formed
                        XHTML 1.0, but without any namespace declarations.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="html-toc" type="TocType"
                  default="menu">
                  <xs:annotation>
                     <xs:documentation>
                        The HTML Table of Contents output mode.
                        Ignored unless the 'format' parameter is
                        set to 'html'.  Default is 'menu'.
                        Values:
                          - none: no ToC generated
                          - plain: plain list ToC generated
                          - menu: drop-down menu ToC generated.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="indent" type="IndentType" default="3">
                  <xs:annotation>
                     <xs:documentation>
                        Number of spaces to indent (0..9) in formatted output.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="log" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>
                        Filespec for the log file to use instead of STDOUT.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="log-append" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        If present, the log will be appended not over-written.
                        If not, the log will be over-written.
                        Only meaningful if the 'log' parameter is
                        also present.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="log-level" type="n8:NcDebugType"
                  default="info">
                  <xs:annotation>
                     <xs:documentation>
                        Sets the debug logging level for the program.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="modpath" type="n8:NcPathList">
                  <xs:annotation>
                     <xs:documentation>
                        Directory search path for YANG and NCX modules.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="objview" type="ObjViewType"
                  default="raw">
                  <xs:annotation>
                     <xs:documentation>
                        Determines how objects are generated in HTML and YANG outputs.
                        The default mode is the 'raw' view.
                        XSD output is always 'cooked', since refined groupings
                        and locally-scoped definitions are not supported in XSD.
                        
                        raw -- output includes augment and uses clauses, not the
                               expanded results of those clauses.
                        
                        cooked -- output does not include augment or uses clauses,
                              just the objects generated from those clauses.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="no-subdirs" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        If present, the file search paths for modules, scripts, and data
                        files will not include sub-directories if they exist in the
                        specified path.
                        
                        If missing, then these file search paths will include
                        sub-directories, if present.  Any directory name beginning
                        with a dot '.' character, or named 'CVS', will be ignored.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="no-versionnames" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        If present, the default filenames will not contain
                        the module version string.  Normally, the [sub]module
                        name and version string are both used to generate
                        a default file name, when the 'defnames' output parameter
                        is used.  This flag will cause filenames and links
                        to be generated which do not contain the version string.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="simurls" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        If HTML translation is requested, then this parameter will
                        cause the format of URLs within links to be generated
                        in simplified form, for WEB development engines such
                        as CherryPy, which support this format.
                        
                        Normal URL format:
                           example.html?parm1=foo&amp;parm2=bar#frag
                        
                        Simplified URL format:
                          example/foo/bar#frag
                        
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="unified" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        If present, then submodules will be processed within
                        the main module, in a unified report, 
                        instead of separately, one report for each file.
                        
                        For translation purposes, this parameter will cause
                        any sub-modules to be treated as if they were defined in
                        the main module.  Actual definitions will be generated
                        instead of an 'include' directive, for each submodule.
                        
                        Normally, a separate output file is generated for each
                        input file, so that XSD output and other reports
                        for a main module will not include information for
                        submodules.
                        
                        If this mode is selected, then submodules entered
                        with the 'module' parameter will be ignored.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="urlstart" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>
                        If present, then this string will be used to prepend
                        to HREF links and URLs generated for SQL and HTML
                        translation.  It is expected to be a URL ending
                        with a directory path.  The trailing separator '/'
                        will be added if it is missing.
                        
                        If not present (the default), then relative URLs,
                        starting with the file name will be generated instead.
                        
                        For example, if this parameter is set to
                        
                           'http://acme.com/public'
                        
                        then the URL generated for the 'bar' type on line 53,
                        in the module FOO (version 2008-01-01) would be:
                        
                        if no-versionnames set:
                        
                           'http://acme.com/public/FOO.html#bar.53'  
                        
                        OR
                        
                        if no-versionnames not set (default):
                        
                           'http://acme.com/public/FOO_2008-01-01.html#bar.53' 
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="version" type="xs:empty">
                  <xs:annotation>
                     <xs:documentation>
                        Print yangdump version string and exit.
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
               <xs:element name="xsd-schemaloc" type="xs:string">
                  <xs:annotation>
                     <xs:documentation>
                        If present, then this string will be used to prepend
                        to output XSD filenames, when generating schemaLocation
                        clauses.  It is expected to be a URL ending
                        with a directory path.  The trailing separator '/'
                        will be added if it is missing.  This parameter
                        is also prepended to URLs generated fpr include and import
                        directives within the XSD. 
                        
                        If not present (the default), then the schemaLocation
                        element is not generated during XSD translation.
                        Relative URLs for include and import directives will
                        be generated, starting with the file name.
                        
                        For example, if this parameter is set to
                        
                           'http://acme.com/public'
                        
                        then the schemaLocation XSD for the module FOO 
                        (version 01-01-2008) would be:
                        
                        if no-versionnames set:
                        
                           'http://acme.com/public/FOO.xsd'  
                        
                        OR
                        
                        if no-versionnames not set (default):
                        
                           'http://acme.com/public/FOO_2008-01-01.xsd' 
                     </xs:documentation>
                     <xs:appinfo>
                        <ncx:max-access>read-create</ncx:max-access>
                     </xs:appinfo>
                  </xs:annotation>
               </xs:element>
            </xs:sequence>
         </xs:extension>
      </xs:complexContent>
   </xs:complexType>

   <xs:element name="yangdump" type="yangdumpPSType"
      substitutionGroup="yangdumpPS"/>

</xs:schema>
