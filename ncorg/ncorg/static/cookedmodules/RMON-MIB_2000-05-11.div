
<div>
   <h1 class="yang">RMON-MIB.yang</h1>

   <ul id="nav">
      <li><a href="#">Typedefs</a>
         <ul>
            <li><a href="#OwnerString.100">OwnerString</a></li>
            <li><a href="#EntryStatus.129">EntryStatus</a></li>
         </ul>
      </li>
      <li><a href="#">Objects</a>
         <ul>
            <li class="daddy"><a href="#statistics.213">statistics</a>
               <ul>
                  <li class="daddy"><a href="#etherStatsEntry.218">etherStatsEntry</a>
                     <ul>
                        <li><a href="#etherStatsIndex.228">etherStatsIndex</a></li>
                        <li><a href="#etherStatsDataSource.239">etherStatsDataSource</a></li>
                        <li><a href="#etherStatsDropEvents.269">etherStatsDropEvents</a></li>
                        <li><a href="#etherStatsOctets.281">etherStatsOctets</a></li>
                        <li><a href="#etherStatsPkts.310">etherStatsPkts</a></li>
                        <li><a href="#etherStatsBroadcastPkts.320">etherStatsBroadcastPkts</a></li>
                        <li><a href="#etherStatsMulticastPkts.331">etherStatsMulticastPkts</a></li>
                        <li><a href="#etherStatsCRCAlignErrors.344">etherStatsCRCAlignErrors</a></li>
                        <li><a href="#etherStatsUndersizePkts.359">etherStatsUndersizePkts</a></li>
                        <li><a href="#etherStatsOversizePkts.371">etherStatsOversizePkts</a></li>
                        <li><a href="#etherStatsFragments.383">etherStatsFragments</a></li>
                        <li><a href="#etherStatsJabbers.401">etherStatsJabbers</a></li>
                        <li><a href="#etherStatsCollisions.422">etherStatsCollisions</a></li>
                        <li><a href="#etherStatsPkts64Octets.459">etherStatsPkts64Octets</a></li>
                        <li><a href="#etherStatsPkts65to127Octets.470">etherStatsPkts65to127Octets</a></li>
                        <li><a href="#etherStatsPkts128to255Octets.482">etherStatsPkts128to255Octets</a></li>
                        <li><a href="#etherStatsPkts256to511Octets.494">etherStatsPkts256to511Octets</a></li>
                        <li><a href="#etherStatsPkts512to1023Octets.506">etherStatsPkts512to1023Octets</a></li>
                        <li><a href="#etherStatsPkts1024to1518Octets.518">etherStatsPkts1024to1518Octets</a></li>
                        <li><a href="#etherStatsOwner.530">etherStatsOwner</a></li>
                        <li><a href="#etherStatsStatus.539">etherStatsStatus</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#history.550">history</a>
               <ul>
                  <li class="daddy"><a href="#historyControlEntry.555">historyControlEntry</a>
                     <ul>
                        <li><a href="#historyControlIndex.566">historyControlIndex</a></li>
                        <li><a href="#historyControlDataSource.579">historyControlDataSource</a></li>
                        <li><a href="#historyControlBucketsRequested.612">historyControlBucketsRequested</a></li>
                        <li><a href="#historyControlBucketsGranted.631">historyControlBucketsGranted</a></li>
                        <li><a href="#historyControlInterval.677">historyControlInterval</a></li>
                        <li><a href="#historyControlOwner.711">historyControlOwner</a></li>
                        <li><a href="#historyControlStatus.720">historyControlStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#etherHistoryEntry.736">etherHistoryEntry</a>
                     <ul>
                        <li><a href="#etherHistoryIndex.749">etherHistoryIndex</a></li>
                        <li><a href="#etherHistorySampleIndex.762">etherHistorySampleIndex</a></li>
                        <li><a href="#etherHistoryIntervalStart.776">etherHistoryIntervalStart</a></li>
                        <li><a href="#etherHistoryDropEvents.794">etherHistoryDropEvents</a></li>
                        <li><a href="#etherHistoryOctets.808">etherHistoryOctets</a></li>
                        <li><a href="#etherHistoryPkts.820">etherHistoryPkts</a></li>
                        <li><a href="#etherHistoryBroadcastPkts.830">etherHistoryBroadcastPkts</a></li>
                        <li><a href="#etherHistoryMulticastPkts.841">etherHistoryMulticastPkts</a></li>
                        <li><a href="#etherHistoryCRCAlignErrors.853">etherHistoryCRCAlignErrors</a></li>
                        <li><a href="#etherHistoryUndersizePkts.868">etherHistoryUndersizePkts</a></li>
                        <li><a href="#etherHistoryOversizePkts.880">etherHistoryOversizePkts</a></li>
                        <li><a href="#etherHistoryFragments.892">etherHistoryFragments</a></li>
                        <li><a href="#etherHistoryJabbers.912">etherHistoryJabbers</a></li>
                        <li><a href="#etherHistoryCollisions.934">etherHistoryCollisions</a></li>
                        <li><a href="#etherHistoryUtilization.972">etherHistoryUtilization</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#alarm.987">alarm</a>
               <ul>
                  <li class="daddy"><a href="#alarmEntry.992">alarmEntry</a>
                     <ul>
                        <li><a href="#alarmIndex.1002">alarmIndex</a></li>
                        <li><a href="#alarmInterval.1015">alarmInterval</a></li>
                        <li><a href="#alarmVariable.1034">alarmVariable</a></li>
                        <li><a href="#alarmSampleType.1067">alarmSampleType</a></li>
                        <li><a href="#alarmValue.1090">alarmValue</a></li>
                        <li><a href="#alarmStartupAlarm.1110">alarmStartupAlarm</a></li>
                        <li><a href="#alarmRisingThreshold.1134">alarmRisingThreshold</a></li>
                        <li><a href="#alarmFallingThreshold.1159">alarmFallingThreshold</a></li>
                        <li><a href="#alarmRisingEventIndex.1183">alarmRisingEventIndex</a></li>
                        <li><a href="#alarmFallingEventIndex.1205">alarmFallingEventIndex</a></li>
                        <li><a href="#alarmOwner.1226">alarmOwner</a></li>
                        <li><a href="#alarmStatus.1235">alarmStatus</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#hosts.1246">hosts</a>
               <ul>
                  <li class="daddy"><a href="#hostControlEntry.1251">hostControlEntry</a>
                     <ul>
                        <li><a href="#hostControlIndex.1263">hostControlIndex</a></li>
                        <li><a href="#hostControlDataSource.1278">hostControlDataSource</a></li>
                        <li><a href="#hostControlTableSize.1308">hostControlTableSize</a></li>
                        <li><a href="#hostControlLastDeleteTime.1317">hostControlLastDeleteTime</a></li>
                        <li><a href="#hostControlOwner.1328">hostControlOwner</a></li>
                        <li><a href="#hostControlStatus.1337">hostControlStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#hostEntry.1353">hostEntry</a>
                     <ul>
                        <li><a href="#hostAddress.1364">hostAddress</a></li>
                        <li><a href="#hostCreationOrder.1372">hostCreationOrder</a></li>
                        <li><a href="#hostIndex.1401">hostIndex</a></li>
                        <li><a href="#hostInPkts.1415">hostInPkts</a></li>
                        <li><a href="#hostOutPkts.1425">hostOutPkts</a></li>
                        <li><a href="#hostInOctets.1435">hostInOctets</a></li>
                        <li><a href="#hostOutOctets.1447">hostOutOctets</a></li>
                        <li><a href="#hostOutErrors.1459">hostOutErrors</a></li>
                        <li><a href="#hostOutBroadcastPkts.1469">hostOutBroadcastPkts</a></li>
                        <li><a href="#hostOutMulticastPkts.1480">hostOutMulticastPkts</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#hostTimeEntry.1497">hostTimeEntry</a>
                     <ul>
                        <li><a href="#hostTimeAddress.1510">hostTimeAddress</a></li>
                        <li><a href="#hostTimeCreationOrder.1518">hostTimeCreationOrder</a></li>
                        <li><a href="#hostTimeIndex.1552">hostTimeIndex</a></li>
                        <li><a href="#hostTimeInPkts.1566">hostTimeInPkts</a></li>
                        <li><a href="#hostTimeOutPkts.1576">hostTimeOutPkts</a></li>
                        <li><a href="#hostTimeInOctets.1586">hostTimeInOctets</a></li>
                        <li><a href="#hostTimeOutOctets.1598">hostTimeOutOctets</a></li>
                        <li><a href="#hostTimeOutErrors.1610">hostTimeOutErrors</a></li>
                        <li><a href="#hostTimeOutBroadcastPkts.1620">hostTimeOutBroadcastPkts</a></li>
                        <li><a href="#hostTimeOutMulticastPkts.1632">hostTimeOutMulticastPkts</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#hostTopN.1648">hostTopN</a>
               <ul>
                  <li class="daddy"><a href="#hostTopNControlEntry.1653">hostTopNControlEntry</a>
                     <ul>
                        <li><a href="#hostTopNControlIndex.1664">hostTopNControlIndex</a></li>
                        <li><a href="#hostTopNHostIndex.1677">hostTopNHostIndex</a></li>
                        <li><a href="#hostTopNRateBase.1694">hostTopNRateBase</a></li>
                        <li><a href="#hostTopNTimeRemaining.1714">hostTopNTimeRemaining</a></li>
                        <li><a href="#hostTopNDuration.1740">hostTopNDuration</a></li>
                        <li><a href="#hostTopNRequestedSize.1762">hostTopNRequestedSize</a></li>
                        <li><a href="#hostTopNGrantedSize.1777">hostTopNGrantedSize</a></li>
                        <li><a href="#hostTopNStartTime.1799">hostTopNStartTime</a></li>
                        <li><a href="#hostTopNOwner.1810">hostTopNOwner</a></li>
                        <li><a href="#hostTopNStatus.1819">hostTopNStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#hostTopNEntry.1834">hostTopNEntry</a>
                     <ul>
                        <li><a href="#hostTopNReport.1844">hostTopNReport</a></li>
                        <li><a href="#hostTopNIndex.1858">hostTopNIndex</a></li>
                        <li><a href="#hostTopNAddress.1875">hostTopNAddress</a></li>
                        <li><a href="#hostTopNRate.1883">hostTopNRate</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#matrix.1897">matrix</a>
               <ul>
                  <li class="daddy"><a href="#matrixControlEntry.1902">matrixControlEntry</a>
                     <ul>
                        <li><a href="#matrixControlIndex.1914">matrixControlIndex</a></li>
                        <li><a href="#matrixControlDataSource.1929">matrixControlDataSource</a></li>
                        <li><a href="#matrixControlTableSize.1960">matrixControlTableSize</a></li>
                        <li><a href="#matrixControlLastDeleteTime.1971">matrixControlLastDeleteTime</a></li>
                        <li><a href="#matrixControlOwner.1983">matrixControlOwner</a></li>
                        <li><a href="#matrixControlStatus.1992">matrixControlStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#matrixSDEntry.2008">matrixSDEntry</a>
                     <ul>
                        <li><a href="#matrixSDSourceAddress.2020">matrixSDSourceAddress</a></li>
                        <li><a href="#matrixSDDestAddress.2028">matrixSDDestAddress</a></li>
                        <li><a href="#matrixSDIndex.2036">matrixSDIndex</a></li>
                        <li><a href="#matrixSDPkts.2050">matrixSDPkts</a></li>
                        <li><a href="#matrixSDOctets.2061">matrixSDOctets</a></li>
                        <li><a href="#matrixSDErrors.2073">matrixSDErrors</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#matrixDSEntry.2087">matrixDSEntry</a>
                     <ul>
                        <li><a href="#matrixDSSourceAddress.2099">matrixDSSourceAddress</a></li>
                        <li><a href="#matrixDSDestAddress.2107">matrixDSDestAddress</a></li>
                        <li><a href="#matrixDSIndex.2115">matrixDSIndex</a></li>
                        <li><a href="#matrixDSPkts.2129">matrixDSPkts</a></li>
                        <li><a href="#matrixDSOctets.2140">matrixDSOctets</a></li>
                        <li><a href="#matrixDSErrors.2152">matrixDSErrors</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#filter.2165">filter</a>
               <ul>
                  <li class="daddy"><a href="#filterEntry.2170">filterEntry</a>
                     <ul>
                        <li><a href="#filterIndex.2180">filterIndex</a></li>
                        <li><a href="#filterChannelIndex.2193">filterChannelIndex</a></li>
                        <li><a href="#filterPktDataOffset.2206">filterPktDataOffset</a></li>
                        <li><a href="#filterPktData.2224">filterPktData</a></li>
                        <li><a href="#filterPktDataMask.2261">filterPktDataMask</a></li>
                        <li><a href="#filterPktDataNotMask.2282">filterPktDataNotMask</a></li>
                        <li><a href="#filterPktStatus.2306">filterPktStatus</a></li>
                        <li><a href="#filterPktStatusMask.2364">filterPktStatusMask</a></li>
                        <li><a href="#filterPktStatusNotMask.2384">filterPktStatusNotMask</a></li>
                        <li><a href="#filterOwner.2409">filterOwner</a></li>
                        <li><a href="#filterStatus.2418">filterStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#channelEntry.2430">channelEntry</a>
                     <ul>
                        <li><a href="#channelIndex.2440">channelIndex</a></li>
                        <li><a href="#channelIfIndex.2458">channelIfIndex</a></li>
                        <li><a href="#channelAcceptType.2488">channelAcceptType</a></li>
                        <li><a href="#channelDataControl.2514">channelDataControl</a></li>
                        <li><a href="#channelTurnOnEventIndex.2529">channelTurnOnEventIndex</a></li>
                        <li><a href="#channelTurnOffEventIndex.2551">channelTurnOffEventIndex</a></li>
                        <li><a href="#channelEventIndex.2573">channelEventIndex</a></li>
                        <li><a href="#channelEventStatus.2595">channelEventStatus</a></li>
                        <li><a href="#channelMatches.2627">channelMatches</a></li>
                        <li><a href="#channelDescription.2638">channelDescription</a></li>
                        <li><a href="#channelOwner.2648">channelOwner</a></li>
                        <li><a href="#channelStatus.2657">channelStatus</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#capture.2668">capture</a>
               <ul>
                  <li class="daddy"><a href="#bufferControlEntry.2673">bufferControlEntry</a>
                     <ul>
                        <li><a href="#bufferControlIndex.2684">bufferControlIndex</a></li>
                        <li><a href="#bufferControlChannelIndex.2698">bufferControlChannelIndex</a></li>
                        <li><a href="#bufferControlFullStatus.2715">bufferControlFullStatus</a></li>
                        <li><a href="#bufferControlFullAction.2745">bufferControlFullAction</a></li>
                        <li><a href="#bufferControlCaptureSliceSize.2761">bufferControlCaptureSliceSize</a></li>
                        <li><a href="#bufferControlDownloadSliceSize.2781">bufferControlDownloadSliceSize</a></li>
                        <li><a href="#bufferControlDownloadOffset.2807">bufferControlDownloadOffset</a></li>
                        <li><a href="#bufferControlMaxOctetsRequested.2824">bufferControlMaxOctetsRequested</a></li>
                        <li><a href="#bufferControlMaxOctetsGranted.2845">bufferControlMaxOctetsGranted</a></li>
                        <li><a href="#bufferControlCapturedPackets.2894">bufferControlCapturedPackets</a></li>
                        <li><a href="#bufferControlTurnOnTime.2903">bufferControlTurnOnTime</a></li>
                        <li><a href="#bufferControlOwner.2912">bufferControlOwner</a></li>
                        <li><a href="#bufferControlStatus.2921">bufferControlStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#captureBufferEntry.2933">captureBufferEntry</a>
                     <ul>
                        <li><a href="#captureBufferControlIndex.2943">captureBufferControlIndex</a></li>
                        <li><a href="#captureBufferIndex.2954">captureBufferIndex</a></li>
                        <li><a href="#captureBufferPacketID.2972">captureBufferPacketID</a></li>
                        <li><a href="#captureBufferPacketData.2988">captureBufferPacketData</a></li>
                        <li><a href="#captureBufferPacketLength.3005">captureBufferPacketLength</a></li>
                        <li><a href="#captureBufferPacketTime.3015">captureBufferPacketTime</a></li>
                        <li><a href="#captureBufferPacketStatus.3026">captureBufferPacketStatus</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#event.3064">event</a>
               <ul>
                  <li class="daddy"><a href="#eventEntry.3069">eventEntry</a>
                     <ul>
                        <li><a href="#eventIndex.3080">eventIndex</a></li>
                        <li><a href="#eventDescription.3093">eventDescription</a></li>
                        <li><a href="#eventType.3103">eventType</a></li>
                        <li><a href="#eventCommunity.3120">eventCommunity</a></li>
                        <li><a href="#eventLastTimeSent.3131">eventLastTimeSent</a></li>
                        <li><a href="#eventOwner.3142">eventOwner</a></li>
                        <li><a href="#eventStatus.3157">eventStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#logEntry.3172">logEntry</a>
                     <ul>
                        <li><a href="#logEventIndex.3182">logEventIndex</a></li>
                        <li><a href="#logIndex.3196">logIndex</a></li>
                        <li><a href="#logTime.3216">logTime</a></li>
                        <li><a href="#logDescription.3224">logDescription</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
         </ul>
      </li>
      <li><a href="#">Notifications</a>
         <ul>
            <li><a href="#risingAlarm.3238">risingAlarm</a></li>
            <li><a href="#fallingAlarm.3400">fallingAlarm</a></li>
         </ul>
      </li>
   </ul>

<br />
<div class="yang">
<pre>

   <span class="yang_kw">module</span> <span class="yang_id">RMON-MIB</span> {

      <span class="yang_kw">yang-version</span> <span class="yang_str">1</span>;

      <span class="yang_kw">namespace</span>
         <span class="yang_str">"urn:ietf:params:xml:ns:yang:smiv2:RMON-MIB"</span>;

      <span class="yang_kw">prefix</span> <span class="yang_str">"rmon-mib"</span>;

      <span class="yang_kw">import</span> <a href="/modules/SNMPv2-TC/1999-04-01">SNMPv2-TC</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"smiv2"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/yang-smi/2008-03-20">yang-smi</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"smi"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/yang-types/2007-10-02">yang-types</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"yang"</span>;
      }

      <span class="yang_kw">organization</span> <span class="yang_str">"IETF RMON MIB Working Group"</span>;

      <span class="yang_kw">contact</span>
         <span class="yang_str">"Steve Waldbusser
         Phone: +1-650-948-6500
         Fax:   +1-650-745-0671
         Email: waldbusser@nextbeacon.com"</span>;

      <span class="yang_kw">description</span>
         <span class="yang_str">"Remote network monitoring devices, often called
         monitors or probes, are instruments that exist for
         the purpose of managing a network. This MIB defines
         objects for managing remote network monitoring devices."</span>;

      <span class="yang_kw">revision</span> <span class="yang_str">"2000-05-11"</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Reformatted into SMIv2 format.
            
            This version published as RFC 2819."</span>;
      }

      <span class="yang_kw">revision</span> <span class="yang_str">"1995-02-01"</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Bug fixes, clarifications and minor changes based on
            implementation experience, published as RFC1757 [18].
            
            Two changes were made to object definitions:
            
            1) A new status bit has been defined for the
            captureBufferPacketStatus object, indicating that the
            packet order within the capture buffer may not be identical to
            the packet order as received off the wire.  This bit may only
            
            be used for packets transmitted by the probe.  Older NMS
            applications can safely ignore this status bit, which might be
            used by newer agents.
            
            2) The packetMatch trap has been removed.  This trap was never
            actually 'approved' and was not added to this document along
            with the risingAlarm and fallingAlarm traps. The packetMatch
            trap could not be throttled, which could cause disruption of
            normal network traffic under some circumstances. An NMS should
            configure a risingAlarm threshold on the appropriate
            channelMatches instance if a trap is desired for a packetMatch
            event. Note that logging of packetMatch events is still
            supported--only trap generation for such events has been
            removed.
            
            In addition, several clarifications to individual object
            definitions have been added to assist agent and NMS
            implementors:
            
            - global definition of 'good packets' and 'bad packets'
            
            - more detailed text governing conceptual row creation and
              modification
            
            - instructions for probes relating to interface changes and
              disruptions
            
            - clarification of some ethernet counter definitions
            
            - recommended formula for calculating network utilization
            
            - clarification of channel and captureBuffer behavior for some
              unusual conditions
            
            - examples of proper instance naming for each table"</span>;
      }

      <span class="yang_kw">revision</span> <span class="yang_str">"1991-11-01"</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"The original version of this MIB, published as RFC1271."</span>;
      }


      <a name="OwnerString.100"/><span class="yang_kw">typedef</span> <span class="yang_id">OwnerString</span> {
         <span class="yang_kw">type</span> <span class="yang_id">binary</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"0..127"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"This data type is used to model an administratively
            assigned name of the owner of a resource. Implementations
            must accept values composed of well-formed NVT ASCII
            sequences. In addition, implementations should accept
            values composed of well-formed UTF-8 sequences.
            
            It is suggested that this name contain one or more of
            the following: IP address, management station name,
            network manager's name, location, or phone number.
            In some cases the agent itself will be the owner of
            an entry.  In these cases, this string shall be set
            to a string starting with 'monitor'.
            
            SNMP access control is articulated entirely in terms
            of the contents of MIB views; access to a particular
            SNMP object instance depends only upon its presence
            or absence in a particular MIB view and never upon
            its value or the value of related object instances.
            Thus, objects of this type afford resolution of
            resource contention only among cooperating
            managers; they realize no access control function
            with respect to uncooperative parties."</span>;
      }

      <a name="EntryStatus.129"/><span class="yang_kw">typedef</span> <span class="yang_id">EntryStatus</span> {
         <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
            <span class="yang_kw">enum</span> <span class="yang_str">"valid"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">1</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"createRequest"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">2</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"underCreation"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">3</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"invalid"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">4</span>;
            }
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"The status of a table entry.
            
            Setting this object to the value invalid(4) has the
            effect of invalidating the corresponding entry.
            That is, it effectively disassociates the mapping
            identified with said entry.
            It is an implementation-specific matter as to whether
            the agent removes an invalidated entry from the table.
            Accordingly, management stations must be prepared to
            receive tabular information from agents that corresponds
            to entries currently not in use.  Proper
            interpretation of such entries requires examination
            of the relevant EntryStatus object.
            
            An existing instance of this object cannot be set to
            createRequest(2).  This object may only be set to
            createRequest(2) when this instance is created.  When
            this object is created, the agent may wish to create
            supplemental object instances with default values
            to complete a conceptual row in this table.  Because the
            
            creation of these default objects is entirely at the option
            of the agent, the manager must not assume that any will be
            created, but may make use of any that are created.
            Immediately after completing the create operation, the agent
            must set this object to underCreation(3).
            
            When in the underCreation(3) state, an entry is allowed to
            exist in a possibly incomplete, possibly inconsistent state,
            usually to allow it to be modified in multiple PDUs.  When in
            this state, an entry is not fully active.
            Entries shall exist in the underCreation(3) state until
            the management station is finished configuring the entry
            and sets this object to valid(1) or aborts, setting this
            object to invalid(4).  If the agent determines that an
            entry has been in the underCreation(3) state for an
            abnormally long time, it may decide that the management
            station has crashed.  If the agent makes this decision,
            it may set this object to invalid(4) to reclaim the
            entry.  A prudent agent will understand that the
            management station may need to wait for human input
            and will allow for that possibility in its
            determination of this abnormally long period.
            
            An entry in the valid(1) state is fully configured and
            consistent and fully represents the configuration or
            operation such a row is intended to represent.  For
            example, it could be a statistical function that is
            configured and active, or a filter that is available
            in the list of filters processed by the packet capture
            process.
            
            A manager is restricted to changing the state of an entry in
            the following ways:
            
                 To:       valid  createRequest  underCreation  invalid
            From:
            valid             OK             NO             OK       OK
            createRequest    N/A            N/A            N/A      N/A
            underCreation     OK             NO             OK       OK
            invalid           NO             NO             NO       OK
            nonExistent       NO             OK             NO       OK
            
            In the table above, it is not applicable to move the state
            from the createRequest state to any other state because the
            manager will never find the variable in that state.  The
            nonExistent state is not a value of the enumeration, rather
            it means that the entryStatus variable does not exist at all.
            
            An agent may allow an entryStatus variable to change state in
            additional ways, so long as the semantics of the states are
            followed.  This allowance is made to ease the implementation of
            the agent and is made despite the fact that managers should
            never exercise these additional state transitions."</span>;
      }

      <a name="statistics.213"/><span class="yang_kw">container</span> <span class="yang_id">statistics</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1"</span>;

         <a name="etherStatsEntry.218"/><span class="yang_kw">list</span> <span class="yang_id">etherStatsEntry</span> {
            <span class="yang_kw">key</span> "<a href="#etherStatsIndex.228">etherStatsIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A collection of statistics kept for a particular
               Ethernet interface.  As an example, an instance of the
               etherStatsPkts object might be named etherStatsPkts.1"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1"</span>;

            <a name="etherStatsIndex.228"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of this object uniquely identifies this
                  etherStats entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.1"</span>;
            }

            <a name="etherStatsDataSource.239"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsDataSource</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object identifies the source of the data that
                  this etherStats entry is configured to analyze.  This
                  source can be any ethernet interface on this device.
                  In order to identify a particular interface, this object
                  shall identify the instance of the ifIndex object,
                  defined in RFC 2233 [17], for the desired interface.
                  For example, if an entry were to receive data from
                  interface #1, this object would be set to ifIndex.1.
                  
                  The statistics in this group reflect all packets
                  on the local network segment attached to the identified
                  interface.
                  
                  An agent may or may not be able to tell if fundamental
                  changes to the media of the interface have occurred and
                  necessitate an invalidation of this entry.  For example, a
                  hot-pluggable ethernet card could be pulled out and replaced
                  by a token-ring card.  In such a case, if the agent has such
                  knowledge of the change, it is recommended that it
                  invalidate this entry.
                  
                  This object may not be modified if the associated
                  etherStatsStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.2"</span>;
            }

            <a name="etherStatsDropEvents.269"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsDropEvents</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of events in which packets
                  were dropped by the probe due to lack of resources.
                  Note that this number is not necessarily the number of
                  packets dropped; it is just the number of times this
                  condition has been detected."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.3"</span>;
            }

            <a name="etherStatsOctets.281"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of octets of data (including
                  those in bad packets) received on the
                  network (excluding framing bits but including
                  FCS octets).
                  
                  This object can be used as a reasonable estimate of
                  10-Megabit ethernet utilization.  If greater precision is
                  desired, the etherStatsPkts and etherStatsOctets objects
                  should be sampled before and after a common interval.  The
                  differences in the sampled values are Pkts and Octets,
                  respectively, and the number of seconds in the interval is
                  Interval.  These values are used to calculate the Utilization
                  as follows:
                  
                  		 Pkts * (9.6 + 6.4) + (Octets * .8)
                   Utilization = -------------------------------------
                  			 Interval * 10,000
                  
                  The result of this equation is the value Utilization which
                  is the percent utilization of the ethernet segment on a
                  scale of 0 to 100 percent."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.4"</span>;
            }

            <a name="etherStatsPkts.310"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets (including bad packets,
                  broadcast packets, and multicast packets) received."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.5"</span>;
            }

            <a name="etherStatsBroadcastPkts.320"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsBroadcastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of good packets received that were
                  directed to the broadcast address.  Note that this
                  does not include multicast packets."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.6"</span>;
            }

            <a name="etherStatsMulticastPkts.331"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsMulticastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of good packets received that were
                  directed to a multicast address.  Note that this number
                  does not include packets directed to the broadcast
                  
                  address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.7"</span>;
            }

            <a name="etherStatsCRCAlignErrors.344"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsCRCAlignErrors</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets received that
                  had a length (excluding framing bits, but
                  including FCS octets) of between 64 and 1518
                  octets, inclusive, but had either a bad
                  Frame Check Sequence (FCS) with an integral
                  number of octets (FCS Error) or a bad FCS with
                  a non-integral number of octets (Alignment Error)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.8"</span>;
            }

            <a name="etherStatsUndersizePkts.359"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsUndersizePkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets received that were
                  less than 64 octets long (excluding framing bits,
                  but including FCS octets) and were otherwise well
                  formed."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.9"</span>;
            }

            <a name="etherStatsOversizePkts.371"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsOversizePkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets received that were
                  longer than 1518 octets (excluding framing bits,
                  but including FCS octets) and were otherwise
                  well formed."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.10"</span>;
            }

            <a name="etherStatsFragments.383"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsFragments</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets received that were less than
                  64 octets in length (excluding framing bits but including
                  FCS octets) and had either a bad Frame Check Sequence
                  (FCS) with an integral number of octets (FCS Error) or a
                  bad FCS with a non-integral number of octets (Alignment
                  Error).
                  
                  Note that it is entirely normal for etherStatsFragments to
                  increment.  This is because it counts both runts (which are
                  normal occurrences due to collisions) and noise hits."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.11"</span>;
            }

            <a name="etherStatsJabbers.401"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsJabbers</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets received that were
                  longer than 1518 octets (excluding framing bits,
                  but including FCS octets), and had either a bad
                  Frame Check Sequence (FCS) with an integral number
                  of octets (FCS Error) or a bad FCS with a non-integral
                  number of octets (Alignment Error).
                  
                  Note that this definition of jabber is different
                  than the definition in IEEE-802.3 section 8.2.1.5
                  (10BASE5) and section 10.3.1.4 (10BASE2).  These
                  documents define jabber as the condition where any
                  packet exceeds 20 ms.  The allowed range to detect
                  jabber is between 20 ms and 150 ms."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.12"</span>;
            }

            <a name="etherStatsCollisions.422"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsCollisions</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Collisions"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The best estimate of the total number of collisions
                  on this Ethernet segment.
                  
                  The value returned will depend on the location of the
                  RMON probe. Section 8.2.1.3 (10BASE-5) and section
                  10.3.1.3 (10BASE-2) of IEEE standard 802.3 states that a
                  station must detect a collision, in the receive mode, if
                  three or more stations are transmitting simultaneously.  A
                  repeater port must detect a collision when two or more
                  
                  stations are transmitting simultaneously.  Thus a probe
                  placed on a repeater port could record more collisions
                  than a probe connected to a station on the same segment
                  would.
                  
                  Probe location plays a much smaller role when considering
                  10BASE-T.  14.2.1.4 (10BASE-T) of IEEE standard 802.3
                  defines a collision as the simultaneous presence of signals
                  on the DO and RD circuits (transmitting and receiving
                  at the same time).  A 10BASE-T station can only detect
                  collisions when it is transmitting.  Thus probes placed on
                  a station and a repeater, should report the same number of
                  collisions.
                  
                  Note also that an RMON probe inside a repeater should
                  ideally report collisions between the repeater and one or
                  more other hosts (transmit collisions as defined by IEEE
                  802.3k) plus receiver collisions observed on any coax
                  segments to which the repeater is connected."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.13"</span>;
            }

            <a name="etherStatsPkts64Octets.459"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsPkts64Octets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets (including bad
                  packets) received that were 64 octets in length
                  (excluding framing bits but including FCS octets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.14"</span>;
            }

            <a name="etherStatsPkts65to127Octets.470"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsPkts65to127Octets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets (including bad
                  packets) received that were between
                  65 and 127 octets in length inclusive
                  (excluding framing bits but including FCS octets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.15"</span>;
            }

            <a name="etherStatsPkts128to255Octets.482"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsPkts128to255Octets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets (including bad
                  packets) received that were between
                  128 and 255 octets in length inclusive
                  (excluding framing bits but including FCS octets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.16"</span>;
            }

            <a name="etherStatsPkts256to511Octets.494"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsPkts256to511Octets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets (including bad
                  packets) received that were between
                  256 and 511 octets in length inclusive
                  (excluding framing bits but including FCS octets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.17"</span>;
            }

            <a name="etherStatsPkts512to1023Octets.506"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsPkts512to1023Octets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets (including bad
                  packets) received that were between
                  512 and 1023 octets in length inclusive
                  (excluding framing bits but including FCS octets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.18"</span>;
            }

            <a name="etherStatsPkts1024to1518Octets.518"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsPkts1024to1518Octets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets (including bad
                  packets) received that were between
                  1024 and 1518 octets in length inclusive
                  (excluding framing bits but including FCS octets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.19"</span>;
            }

            <a name="etherStatsOwner.530"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.20"</span>;
            }

            <a name="etherStatsStatus.539"/><span class="yang_kw">leaf</span> <span class="yang_id">etherStatsStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The status of this etherStats entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.1.1.1.21"</span>;
            }
         }  <span class="yang_cmt">// list etherStatsEntry</span>
      }  <span class="yang_cmt">// container statistics</span>

      <a name="history.550"/><span class="yang_kw">container</span> <span class="yang_id">history</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2"</span>;

         <a name="historyControlEntry.555"/><span class="yang_kw">list</span> <span class="yang_id">historyControlEntry</span> {
            <span class="yang_kw">key</span> "<a href="#historyControlIndex.566">historyControlIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A list of parameters that set up a periodic sampling of
               statistics.  As an example, an instance of the
               historyControlInterval object might be named
               historyControlInterval.2"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1"</span>;

            <a name="historyControlIndex.566"/><span class="yang_kw">leaf</span> <span class="yang_id">historyControlIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in the
                  historyControl table.  Each such entry defines a
                  set of samples at a particular interval for an
                  interface on the device."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1.1"</span>;
            }

            <a name="historyControlDataSource.579"/><span class="yang_kw">leaf</span> <span class="yang_id">historyControlDataSource</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object identifies the source of the data for
                  which historical data was collected and
                  placed in a media-specific table on behalf of this
                  historyControlEntry.  This source can be any
                  interface on this device.  In order to identify
                  
                  a particular interface, this object shall identify
                  the instance of the ifIndex object, defined
                  in  RFC 2233 [17], for the desired interface.
                  For example, if an entry were to receive data from
                  interface #1, this object would be set to ifIndex.1.
                  
                  The statistics in this group reflect all packets
                  on the local network segment attached to the identified
                  interface.
                  
                  An agent may or may not be able to tell if fundamental
                  changes to the media of the interface have occurred and
                  necessitate an invalidation of this entry.  For example, a
                  hot-pluggable ethernet card could be pulled out and replaced
                  by a token-ring card.  In such a case, if the agent has such
                  knowledge of the change, it is recommended that it
                  invalidate this entry.
                  
                  This object may not be modified if the associated
                  historyControlStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1.2"</span>;
            }

            <a name="historyControlBucketsRequested.612"/><span class="yang_kw">leaf</span> <span class="yang_id">historyControlBucketsRequested</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The requested number of discrete time intervals
                  over which data is to be saved in the part of the
                  media-specific table associated with this
                  historyControlEntry.
                  
                  When this object is created or modified, the probe
                  should set historyControlBucketsGranted as closely to
                  this object as is possible for the particular probe
                  implementation and available resources."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"50"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1.3"</span>;
            }

            <a name="historyControlBucketsGranted.631"/><span class="yang_kw">leaf</span> <span class="yang_id">historyControlBucketsGranted</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of discrete sampling intervals
                  over which data shall be saved in the part of
                  the media-specific table associated with this
                  historyControlEntry.
                  
                  When the associated historyControlBucketsRequested
                  object is created or modified, the probe
                  should set this object as closely to the requested
                  value as is possible for the particular
                  probe implementation and available resources.  The
                  probe must not lower this value except as a result
                  of a modification to the associated
                  historyControlBucketsRequested object.
                  
                  There will be times when the actual number of
                  buckets associated with this entry is less than
                  the value of this object.  In this case, at the
                  end of each sampling interval, a new bucket will
                  be added to the media-specific table.
                  
                  When the number of buckets reaches the value of
                  this object and a new bucket is to be added to the
                  media-specific table, the oldest bucket associated
                  with this historyControlEntry shall be deleted by
                  the agent so that the new bucket can be added.
                  
                  When the value of this object changes to a value less
                  than the current value, entries are deleted
                  from the media-specific table associated with this
                  historyControlEntry.  Enough of the oldest of these
                  entries shall be deleted by the agent so that their
                  number remains less than or equal to the new value of
                  this object.
                  
                  When the value of this object changes to a value greater
                  than the current value, the number of associated media-
                  specific entries may be allowed to grow."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1.4"</span>;
            }

            <a name="historyControlInterval.677"/><span class="yang_kw">leaf</span> <span class="yang_id">historyControlInterval</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..3600"</span>;
               }
               <span class="yang_kw">units</span> <span class="yang_str">"Seconds"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The interval in seconds over which the data is
                  sampled for each bucket in the part of the
                  media-specific table associated with this
                  historyControlEntry.  This interval can
                  be set to any number of seconds between 1 and
                  3600 (1 hour).
                  
                  Because the counters in a bucket may overflow at their
                  
                  maximum value with no indication, a prudent manager will
                  take into account the possibility of overflow in any of
                  the associated counters.  It is important to consider the
                  minimum time in which any counter could overflow on a
                  particular media type and set the historyControlInterval
                  object to a value less than this interval.  This is
                  typically most important for the 'octets' counter in any
                  media-specific table.  For example, on an Ethernet
                  network, the etherHistoryOctets counter could overflow
                  in about one hour at the Ethernet's maximum
                  utilization.
                  
                  This object may not be modified if the associated
                  historyControlStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"1800"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1.5"</span>;
            }

            <a name="historyControlOwner.711"/><span class="yang_kw">leaf</span> <span class="yang_id">historyControlOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1.6"</span>;
            }

            <a name="historyControlStatus.720"/><span class="yang_kw">leaf</span> <span class="yang_id">historyControlStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The status of this historyControl entry.
                  
                  Each instance of the media-specific table associated
                  with this historyControlEntry will be deleted by the agent
                  if this historyControlEntry is not equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.1.1.7"</span>;
            }
         }  <span class="yang_cmt">// list historyControlEntry</span>

         <a name="etherHistoryEntry.736"/><span class="yang_kw">list</span> <span class="yang_id">etherHistoryEntry</span> {
            <span class="yang_kw">key</span> "<a href="#etherHistoryIndex.749">etherHistoryIndex</a>, <a href="#etherHistorySampleIndex.762">etherHistorySampleIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"An historical sample of Ethernet statistics on a particular
               Ethernet interface.  This sample is associated with the
               historyControlEntry which set up the parameters for
               a regular collection of these samples.  As an example, an
               instance of the etherHistoryPkts object might be named
               etherHistoryPkts.2.89"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1"</span>;

            <a name="etherHistoryIndex.749"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The history of which this entry is a part.  The
                  history identified by a particular value of this
                  index is the same history as identified
                  by the same value of historyControlIndex."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.1"</span>;
            }

            <a name="etherHistorySampleIndex.762"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistorySampleIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..2147483647"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies the particular
                  sample this entry represents among all samples
                  associated with the same historyControlEntry.
                  This index starts at 1 and increases by one
                  as each new sample is taken."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.2"</span>;
            }

            <a name="etherHistoryIntervalStart.776"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryIntervalStart</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#timeticks.231">yang:timeticks</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of sysUpTime at the start of the interval
                  over which this sample was measured.  If the probe
                  keeps track of the time of day, it should start
                  the first sample of the history at a time such that
                  when the next hour of the day begins, a sample is
                  started at that instant.  Note that following this
                  rule may require the probe to delay collecting the
                  first sample of the history, as each sample must be
                  of the same interval.  Also note that the sample which
                  is currently being collected is not accessible in this
                  table until the end of its interval."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.3"</span>;
            }

            <a name="etherHistoryDropEvents.794"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryDropEvents</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of events in which packets
                  were dropped by the probe due to lack of resources
                  during this sampling interval.  Note that this number
                  is not necessarily the number of packets dropped, it
                  is just the number of times this condition has been
                  
                  detected."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.4"</span>;
            }

            <a name="etherHistoryOctets.808"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of octets of data (including
                  those in bad packets) received on the
                  network (excluding framing bits but including
                  FCS octets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.5"</span>;
            }

            <a name="etherHistoryPkts.820"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets (including bad packets)
                  received during this sampling interval."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.6"</span>;
            }

            <a name="etherHistoryBroadcastPkts.830"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryBroadcastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets received during this
                  sampling interval that were directed to the
                  broadcast address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.7"</span>;
            }

            <a name="etherHistoryMulticastPkts.841"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryMulticastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets received during this
                  sampling interval that were directed to a
                  multicast address.  Note that this number does not
                  include packets addressed to the broadcast address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.8"</span>;
            }

            <a name="etherHistoryCRCAlignErrors.853"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryCRCAlignErrors</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets received during this
                  sampling interval that had a length (excluding
                  framing bits but including FCS octets) between
                  64 and 1518 octets, inclusive, but had either a bad Frame
                  Check Sequence (FCS) with an integral number of octets
                  (FCS Error) or a bad FCS with a non-integral number
                  of octets (Alignment Error)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.9"</span>;
            }

            <a name="etherHistoryUndersizePkts.868"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryUndersizePkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets received during this
                  sampling interval that were less than 64 octets
                  long (excluding framing bits but including FCS
                  octets) and were otherwise well formed."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.10"</span>;
            }

            <a name="etherHistoryOversizePkts.880"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryOversizePkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets received during this
                  sampling interval that were longer than 1518
                  octets (excluding framing bits but including
                  FCS octets) but were otherwise well formed."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.11"</span>;
            }

            <a name="etherHistoryFragments.892"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryFragments</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The total number of packets received during this
                  sampling interval that were less than 64 octets in
                  length (excluding framing bits but including FCS
                  
                  octets) had either a bad Frame Check Sequence (FCS)
                  with an integral number of octets (FCS Error) or a bad
                  FCS with a non-integral number of octets (Alignment
                  Error).
                  
                  Note that it is entirely normal for etherHistoryFragments to
                  increment.  This is because it counts both runts (which are
                  normal occurrences due to collisions) and noise hits."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.12"</span>;
            }

            <a name="etherHistoryJabbers.912"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryJabbers</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets received during this
                  sampling interval that were longer than 1518 octets
                  (excluding framing bits but including FCS octets),
                  and  had either a bad Frame Check Sequence (FCS)
                  with an integral number of octets (FCS Error) or
                  a bad FCS with a non-integral number of octets
                  (Alignment Error).
                  
                  Note that this definition of jabber is different
                  than the definition in IEEE-802.3 section 8.2.1.5
                  (10BASE5) and section 10.3.1.4 (10BASE2).  These
                  documents define jabber as the condition where any
                  packet exceeds 20 ms.  The allowed range to detect
                  jabber is between 20 ms and 150 ms."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.13"</span>;
            }

            <a name="etherHistoryCollisions.934"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryCollisions</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Collisions"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The best estimate of the total number of collisions
                  on this Ethernet segment during this sampling
                  interval.
                  
                  The value returned will depend on the location of the
                  RMON probe. Section 8.2.1.3 (10BASE-5) and section
                  10.3.1.3 (10BASE-2) of IEEE standard 802.3 states that a
                  station must detect a collision, in the receive mode, if
                  three or more stations are transmitting simultaneously.  A
                  repeater port must detect a collision when two or more
                  
                  stations are transmitting simultaneously.  Thus a probe
                  placed on a repeater port could record more collisions
                  than a probe connected to a station on the same segment
                  would.
                  
                  Probe location plays a much smaller role when considering
                  10BASE-T.  14.2.1.4 (10BASE-T) of IEEE standard 802.3
                  defines a collision as the simultaneous presence of signals
                  on the DO and RD circuits (transmitting and receiving
                  at the same time).  A 10BASE-T station can only detect
                  collisions when it is transmitting.  Thus probes placed on
                  a station and a repeater, should report the same number of
                  collisions.
                  
                  Note also that an RMON probe inside a repeater should
                  ideally report collisions between the repeater and one or
                  more other hosts (transmit collisions as defined by IEEE
                  802.3k) plus receiver collisions observed on any coax
                  segments to which the repeater is connected."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.14"</span>;
            }

            <a name="etherHistoryUtilization.972"/><span class="yang_kw">leaf</span> <span class="yang_id">etherHistoryUtilization</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"0..10000"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The best estimate of the mean physical layer
                  network utilization on this interface during this
                  sampling interval, in hundredths of a percent."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.2.2.1.15"</span>;
            }
         }  <span class="yang_cmt">// list etherHistoryEntry</span>
      }  <span class="yang_cmt">// container history</span>

      <a name="alarm.987"/><span class="yang_kw">container</span> <span class="yang_id">alarm</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3"</span>;

         <a name="alarmEntry.992"/><span class="yang_kw">list</span> <span class="yang_id">alarmEntry</span> {
            <span class="yang_kw">key</span> "<a href="#alarmIndex.1002">alarmIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A list of parameters that set up a periodic checking
               for alarm conditions.  For example, an instance of the
               alarmValue object might be named alarmValue.8"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1"</span>;

            <a name="alarmIndex.1002"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in the
                  alarm table.  Each such entry defines a
                  diagnostic sample at a particular interval
                  for an object on the device."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.1"</span>;
            }

            <a name="alarmInterval.1015"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmInterval</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Seconds"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The interval in seconds over which the data is
                  sampled and compared with the rising and falling
                  thresholds.  When setting this variable, care
                  should be taken in the case of deltaValue
                  sampling - the interval should be set short enough
                  that the sampled variable is very unlikely to
                  increase or decrease by more than 2^31 - 1 during
                  a single sampling interval.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.2"</span>;
            }

            <a name="alarmVariable.1034"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmVariable</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the particular variable to be
                  sampled.  Only variables that resolve to an ASN.1 primitive
                  type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
                  Gauge, or TimeTicks) may be sampled.
                  
                  Because SNMP access control is articulated entirely
                  in terms of the contents of MIB views, no access
                  control mechanism exists that can restrict the value of
                  this object to identify only those objects that exist
                  in a particular MIB view.  Because there is thus no
                  acceptable means of restricting the read access that
                  could be obtained through the alarm mechanism, the
                  probe must only grant write access to this object in
                  
                  those views that have read access to all objects on
                  the probe.
                  
                  During a set operation, if the supplied variable name is
                  not available in the selected MIB view, a badValue error
                  must be returned.  If at any time the variable name of
                  an established alarmEntry is no longer available in the
                  selected MIB view, the probe must change the status of
                  this alarmEntry to invalid(4).
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.3"</span>;
            }

            <a name="alarmSampleType.1067"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmSampleType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"absoluteValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"deltaValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The method of sampling the selected variable and
                  calculating the value to be compared against the
                  thresholds.  If the value of this object is
                  absoluteValue(1), the value of the selected variable
                  will be compared directly with the thresholds at the
                  end of the sampling interval.  If the value of this
                  object is deltaValue(2), the value of the selected
                  variable at the last sample will be subtracted from
                  the current value, and the difference compared with
                  the thresholds.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.4"</span>;
            }

            <a name="alarmValue.1090"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of the statistic during the last sampling
                  period.  For example, if the sample type is deltaValue,
                  this value will be the difference between the samples
                  at the beginning and end of the period.  If the sample
                  type is absoluteValue, this value will be the sampled
                  value at the end of the period.
                  
                  This is the value that is compared with the rising and
                  falling thresholds.
                  
                  The value during the current sampling period is not
                  made available until the period is completed and will
                  remain available until the next period completes."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.5"</span>;
            }

            <a name="alarmStartupAlarm.1110"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmStartupAlarm</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"risingAlarm"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"fallingAlarm"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"risingOrFallingAlarm"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The alarm that may be sent when this entry is first
                  set to valid.  If the first sample after this entry
                  becomes valid is greater than or equal to the
                  risingThreshold and alarmStartupAlarm is equal to
                  risingAlarm(1) or risingOrFallingAlarm(3), then a single
                  rising alarm will be generated.  If the first sample
                  after this entry becomes valid is less than or equal
                  to the fallingThreshold and alarmStartupAlarm is equal
                  to fallingAlarm(2) or risingOrFallingAlarm(3), then a
                  single falling alarm will be generated.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.6"</span>;
            }

            <a name="alarmRisingThreshold.1134"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmRisingThreshold</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold for the sampled statistic.  When the current
                  sampled value is greater than or equal to this threshold,
                  and the value at the last sampling interval was less than
                  this threshold, a single event will be generated.
                  A single event will also be generated if the first
                  sample after this entry becomes valid is greater than or
                  equal to this threshold and the associated
                  alarmStartupAlarm is equal to risingAlarm(1) or
                  risingOrFallingAlarm(3).
                  
                  After a rising event is generated, another such event
                  
                  will not be generated until the sampled value
                  falls below this threshold and reaches the
                  alarmFallingThreshold.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.7"</span>;
            }

            <a name="alarmFallingThreshold.1159"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmFallingThreshold</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold for the sampled statistic.  When the current
                  sampled value is less than or equal to this threshold,
                  and the value at the last sampling interval was greater than
                  this threshold, a single event will be generated.
                  A single event will also be generated if the first
                  sample after this entry becomes valid is less than or
                  equal to this threshold and the associated
                  alarmStartupAlarm is equal to fallingAlarm(2) or
                  risingOrFallingAlarm(3).
                  
                  After a falling event is generated, another such event
                  will not be generated until the sampled value
                  rises above this threshold and reaches the
                  alarmRisingThreshold.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.8"</span>;
            }

            <a name="alarmRisingEventIndex.1183"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmRisingEventIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"0..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The index of the eventEntry that is
                  used when a rising threshold is crossed.  The
                  eventEntry identified by a particular value of
                  this index is the same as identified by the same value
                  of the eventIndex object.  If there is no
                  corresponding entry in the eventTable, then
                  no association exists.  In particular, if this value
                  is zero, no associated event will be generated, as
                  zero is not a valid event index.
                  
                  This object may not be modified if the associated
                  
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.9"</span>;
            }

            <a name="alarmFallingEventIndex.1205"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmFallingEventIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"0..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The index of the eventEntry that is
                  used when a falling threshold is crossed.  The
                  eventEntry identified by a particular value of
                  this index is the same as identified by the same value
                  of the eventIndex object.  If there is no
                  corresponding entry in the eventTable, then
                  no association exists.  In particular, if this value
                  is zero, no associated event will be generated, as
                  zero is not a valid event index.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.10"</span>;
            }

            <a name="alarmOwner.1226"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.11"</span>;
            }

            <a name="alarmStatus.1235"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The status of this alarm entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.12"</span>;
            }
         }  <span class="yang_cmt">// list alarmEntry</span>
      }  <span class="yang_cmt">// container alarm</span>

      <a name="hosts.1246"/><span class="yang_kw">container</span> <span class="yang_id">hosts</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4"</span>;

         <a name="hostControlEntry.1251"/><span class="yang_kw">list</span> <span class="yang_id">hostControlEntry</span> {
            <span class="yang_kw">key</span> "<a href="#hostControlIndex.1263">hostControlIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A list of parameters that set up the discovery of hosts
               on a particular interface and the collection of statistics
               about these hosts.  For example, an instance of the
               hostControlTableSize object might be named
               hostControlTableSize.1"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.1.1"</span>;

            <a name="hostControlIndex.1263"/><span class="yang_kw">leaf</span> <span class="yang_id">hostControlIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in the
                  
                  hostControl table.  Each such entry defines
                  a function that discovers hosts on a particular interface
                  and places statistics about them in the hostTable and
                  the hostTimeTable on behalf of this hostControlEntry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.1.1.1"</span>;
            }

            <a name="hostControlDataSource.1278"/><span class="yang_kw">leaf</span> <span class="yang_id">hostControlDataSource</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object identifies the source of the data for
                  this instance of the host function.  This source
                  can be any interface on this device.  In order
                  to identify a particular interface, this object shall
                  identify the instance of the ifIndex object, defined
                  in RFC 2233 [17], for the desired interface.
                  For example, if an entry were to receive data from
                  interface #1, this object would be set to ifIndex.1.
                  
                  The statistics in this group reflect all packets
                  on the local network segment attached to the identified
                  interface.
                  
                  An agent may or may not be able to tell if fundamental
                  changes to the media of the interface have occurred and
                  necessitate an invalidation of this entry.  For example, a
                  hot-pluggable ethernet card could be pulled out and replaced
                  by a token-ring card.  In such a case, if the agent has such
                  knowledge of the change, it is recommended that it
                  invalidate this entry.
                  
                  This object may not be modified if the associated
                  hostControlStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.1.1.2"</span>;
            }

            <a name="hostControlTableSize.1308"/><span class="yang_kw">leaf</span> <span class="yang_id">hostControlTableSize</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of hostEntries in the hostTable and the
                  hostTimeTable associated with this hostControlEntry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.1.1.3"</span>;
            }

            <a name="hostControlLastDeleteTime.1317"/><span class="yang_kw">leaf</span> <span class="yang_id">hostControlLastDeleteTime</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#timeticks.231">yang:timeticks</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of sysUpTime when the last entry
                  was deleted from the portion of the hostTable
                  associated with this hostControlEntry.  If no
                  deletions have occurred, this value shall be zero."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.1.1.4"</span>;
            }

            <a name="hostControlOwner.1328"/><span class="yang_kw">leaf</span> <span class="yang_id">hostControlOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.1.1.5"</span>;
            }

            <a name="hostControlStatus.1337"/><span class="yang_kw">leaf</span> <span class="yang_id">hostControlStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The status of this hostControl entry.
                  
                  If this object is not equal to valid(1), all associated
                  entries in the hostTable, hostTimeTable, and the
                  hostTopNTable shall be deleted by the agent."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.1.1.6"</span>;
            }
         }  <span class="yang_cmt">// list hostControlEntry</span>

         <a name="hostEntry.1353"/><span class="yang_kw">list</span> <span class="yang_id">hostEntry</span> {
            <span class="yang_kw">key</span> "<a href="#hostIndex.1401">hostIndex</a>, <a href="#hostAddress.1364">hostAddress</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A collection of statistics for a particular host that has
               been discovered on an interface of this device.  For example,
               an instance of the hostOutBroadcastPkts object might be
               named hostOutBroadcastPkts.1.6.8.0.32.27.3.176"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1"</span>;

            <a name="hostAddress.1364"/><span class="yang_kw">leaf</span> <span class="yang_id">hostAddress</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The physical address of this host."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.1"</span>;
            }

            <a name="hostCreationOrder.1372"/><span class="yang_kw">leaf</span> <span class="yang_id">hostCreationOrder</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that defines the relative ordering of
                  the creation time of hosts captured for a
                  particular hostControlEntry.  This index shall
                  be between 1 and N, where N is the value of
                  the associated hostControlTableSize.  The ordering
                  of the indexes is based on the order of each entry's
                  insertion into the table, in which entries added earlier
                  have a lower index value than entries added later.
                  
                  It is important to note that the order for a
                  particular entry may change as an (earlier) entry
                  is deleted from the table.  Because this order may
                  change, management stations should make use of the
                  hostControlLastDeleteTime variable in the
                  hostControlEntry associated with the relevant
                  portion of the hostTable.  By observing
                  this variable, the management station may detect
                  the circumstances where a previous association
                  between a value of hostCreationOrder
                  and a hostEntry may no longer hold."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.2"</span>;
            }

            <a name="hostIndex.1401"/><span class="yang_kw">leaf</span> <span class="yang_id">hostIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The set of collected host statistics of which
                  this entry is a part.  The set of hosts
                  identified by a particular value of this
                  index is associated with the hostControlEntry
                  as identified by the same value of hostControlIndex."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.3"</span>;
            }

            <a name="hostInPkts.1415"/><span class="yang_kw">leaf</span> <span class="yang_id">hostInPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets transmitted to this
                  address since it was added to the hostTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.4"</span>;
            }

            <a name="hostOutPkts.1425"/><span class="yang_kw">leaf</span> <span class="yang_id">hostOutPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets, including bad packets, transmitted
                  by this address since it was added to the hostTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.5"</span>;
            }

            <a name="hostInOctets.1435"/><span class="yang_kw">leaf</span> <span class="yang_id">hostInOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of octets transmitted to this address since
                  it was added to the hostTable (excluding framing
                  bits but including FCS octets), except for those
                  octets in bad packets."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.6"</span>;
            }

            <a name="hostOutOctets.1447"/><span class="yang_kw">leaf</span> <span class="yang_id">hostOutOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of octets transmitted by this address since
                  it was added to the hostTable (excluding framing
                  bits but including FCS octets), including those
                  octets in bad packets."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.7"</span>;
            }

            <a name="hostOutErrors.1459"/><span class="yang_kw">leaf</span> <span class="yang_id">hostOutErrors</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of bad packets transmitted by this address
                  since this host was added to the hostTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.8"</span>;
            }

            <a name="hostOutBroadcastPkts.1469"/><span class="yang_kw">leaf</span> <span class="yang_id">hostOutBroadcastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets transmitted by this
                  address that were directed to the broadcast address
                  since this host was added to the hostTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.9"</span>;
            }

            <a name="hostOutMulticastPkts.1480"/><span class="yang_kw">leaf</span> <span class="yang_id">hostOutMulticastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets transmitted by this
                  address that were directed to a multicast address
                  since this host was added to the hostTable.
                  Note that this number does not include packets
                  directed to the broadcast address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.2.1.10"</span>;
            }
         }  <span class="yang_cmt">// list hostEntry</span>

         <a name="hostTimeEntry.1497"/><span class="yang_kw">list</span> <span class="yang_id">hostTimeEntry</span> {
            <span class="yang_kw">key</span> "<a href="#hostTimeIndex.1552">hostTimeIndex</a>, <a href="#hostTimeCreationOrder.1518">hostTimeCreationOrder</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A collection of statistics for a particular host that has
               been discovered on an interface of this device.  This
               collection includes the relative ordering of the creation
               time of this object.  For example, an instance of the
               hostTimeOutBroadcastPkts object might be named
               hostTimeOutBroadcastPkts.1.687"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1"</span>;

            <a name="hostTimeAddress.1510"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeAddress</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The physical address of this host."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.1"</span>;
            }

            <a name="hostTimeCreationOrder.1518"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeCreationOrder</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in
                  the hostTime table among those entries associated
                  with the same hostControlEntry.  This index shall
                  be between 1 and N, where N is the value of
                  
                  the associated hostControlTableSize.  The ordering
                  of the indexes is based on the order of each entry's
                  insertion into the table, in which entries added earlier
                  have a lower index value than entries added later.
                  Thus the management station has the ability to
                  learn of new entries added to this table without
                  downloading the entire table.
                  
                  It is important to note that the index for a
                  particular entry may change as an (earlier) entry
                  is deleted from the table.  Because this order may
                  change, management stations should make use of the
                  hostControlLastDeleteTime variable in the
                  hostControlEntry associated with the relevant
                  portion of the hostTimeTable.  By observing
                  this variable, the management station may detect
                  the circumstances where a download of the table
                  may have missed entries, and where a previous
                  association between a value of hostTimeCreationOrder
                  and a hostTimeEntry may no longer hold."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.2"</span>;
            }

            <a name="hostTimeIndex.1552"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The set of collected host statistics of which
                  this entry is a part.  The set of hosts
                  identified by a particular value of this
                  index is associated with the hostControlEntry
                  as identified by the same value of hostControlIndex."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.3"</span>;
            }

            <a name="hostTimeInPkts.1566"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeInPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets transmitted to this
                  address since it was added to the hostTimeTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.4"</span>;
            }

            <a name="hostTimeOutPkts.1576"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeOutPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets, including bad packets, transmitted
                  by this address since it was added to the hostTimeTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.5"</span>;
            }

            <a name="hostTimeInOctets.1586"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeInOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of octets transmitted to this address since
                  it was added to the hostTimeTable (excluding framing
                  bits but including FCS octets), except for those
                  octets in bad packets."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.6"</span>;
            }

            <a name="hostTimeOutOctets.1598"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeOutOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of octets transmitted by this address since
                  it was added to the hostTimeTable (excluding framing
                  bits but including FCS octets), including those
                  octets in bad packets."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.7"</span>;
            }

            <a name="hostTimeOutErrors.1610"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeOutErrors</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of bad packets transmitted by this address
                  since this host was added to the hostTimeTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.8"</span>;
            }

            <a name="hostTimeOutBroadcastPkts.1620"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeOutBroadcastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets transmitted by this
                  address that were directed to the broadcast address
                  
                  since this host was added to the hostTimeTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.9"</span>;
            }

            <a name="hostTimeOutMulticastPkts.1632"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTimeOutMulticastPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of good packets transmitted by this
                  address that were directed to a multicast address
                  since this host was added to the hostTimeTable.
                  Note that this number does not include packets directed
                  to the broadcast address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.4.3.1.10"</span>;
            }
         }  <span class="yang_cmt">// list hostTimeEntry</span>
      }  <span class="yang_cmt">// container hosts</span>

      <a name="hostTopN.1648"/><span class="yang_kw">container</span> <span class="yang_id">hostTopN</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5"</span>;

         <a name="hostTopNControlEntry.1653"/><span class="yang_kw">list</span> <span class="yang_id">hostTopNControlEntry</span> {
            <span class="yang_kw">key</span> "<a href="#hostTopNControlIndex.1664">hostTopNControlIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A set of parameters that control the creation of a report
               of the top N hosts according to several metrics.  For
               example, an instance of the hostTopNDuration object might
               be named hostTopNDuration.3"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1"</span>;

            <a name="hostTopNControlIndex.1664"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNControlIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry
                  in the hostTopNControl table.  Each such
                  entry defines one top N report prepared for
                  one interface."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.1"</span>;
            }

            <a name="hostTopNHostIndex.1677"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNHostIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The host table for which a top N report will be prepared
                  on behalf of this entry.  The host table identified by a
                  particular value of this index is associated with the same
                  host table as identified by the same value of
                  hostIndex.
                  
                  This object may not be modified if the associated
                  hostTopNStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.2"</span>;
            }

            <a name="hostTopNRateBase.1694"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNRateBase</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"hostTopNInPkts"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"hostTopNOutPkts"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"hostTopNInOctets"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"hostTopNOutOctets"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">4</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"hostTopNOutErrors"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">5</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"hostTopNOutBroadcastPkts"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">6</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"hostTopNOutMulticastPkts"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">7</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The variable for each host that the hostTopNRate
                  variable is based upon.
                  
                  This object may not be modified if the associated
                  hostTopNStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.3"</span>;
            }

            <a name="hostTopNTimeRemaining.1714"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNTimeRemaining</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Seconds"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of seconds left in the report currently being
                  collected.  When this object is modified by the management
                  station, a new collection is started, possibly aborting
                  a currently running report.  The new value is used
                  as the requested duration of this report, which is
                  loaded into the associated hostTopNDuration object.
                  
                  When this object is set to a non-zero value, any
                  associated hostTopNEntries shall be made
                  inaccessible by the monitor.  While the value of this
                  object is non-zero, it decrements by one per second until
                  it reaches zero.  During this time, all associated
                  hostTopNEntries shall remain inaccessible.  At the time
                  that this object decrements to zero, the report is made
                  accessible in the hostTopNTable.  Thus, the hostTopN
                  table needs to be created only at the end of the collection
                  interval."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.4"</span>;
            }

            <a name="hostTopNDuration.1740"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNDuration</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Seconds"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of seconds that this report has collected
                  during the last sampling interval, or if this
                  report is currently being collected, the number
                  of seconds that this report is being collected
                  during this sampling interval.
                  
                  When the associated hostTopNTimeRemaining object is set,
                  this object shall be set by the probe to the same value
                  and shall not be modified until the next time
                  the hostTopNTimeRemaining is set.
                  
                  This value shall be zero if no reports have been
                  requested for this hostTopNControlEntry."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.5"</span>;
            }

            <a name="hostTopNRequestedSize.1762"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNRequestedSize</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The maximum number of hosts requested for the top N
                  table.
                  
                  When this object is created or modified, the probe
                  should set hostTopNGrantedSize as closely to this
                  object as is possible for the particular probe
                  implementation and available resources."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"10"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.6"</span>;
            }

            <a name="hostTopNGrantedSize.1777"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNGrantedSize</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The maximum number of hosts in the top N table.
                  
                  When the associated hostTopNRequestedSize object is
                  created or modified, the probe should set this
                  object as closely to the requested value as is possible
                  for the particular implementation and available
                  
                  resources. The probe must not lower this value except
                  as a result of a set to the associated
                  hostTopNRequestedSize object.
                  
                  Hosts with the highest value of hostTopNRate shall be
                  placed in this table in decreasing order of this rate
                  until there is no more room or until there are no more
                  hosts."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.7"</span>;
            }

            <a name="hostTopNStartTime.1799"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNStartTime</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#timeticks.231">yang:timeticks</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of sysUpTime when this top N report was
                  last started.  In other words, this is the time that
                  the associated hostTopNTimeRemaining object was
                  modified to start the requested report."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.8"</span>;
            }

            <a name="hostTopNOwner.1810"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.9"</span>;
            }

            <a name="hostTopNStatus.1819"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The status of this hostTopNControl entry.
                  
                  If this object is not equal to valid(1), all associated
                  hostTopNEntries shall be deleted by the agent."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.1.1.10"</span>;
            }
         }  <span class="yang_cmt">// list hostTopNControlEntry</span>

         <a name="hostTopNEntry.1834"/><span class="yang_kw">list</span> <span class="yang_id">hostTopNEntry</span> {
            <span class="yang_kw">key</span> "<a href="#hostTopNReport.1844">hostTopNReport</a>, <a href="#hostTopNIndex.1858">hostTopNIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A set of statistics for a host that is part of a top N
               report.  For example, an instance of the hostTopNRate
               object might be named hostTopNRate.3.10"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.2.1"</span>;

            <a name="hostTopNReport.1844"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNReport</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object identifies the top N report of which
                  this entry is a part.  The set of hosts
                  identified by a particular value of this
                  object is part of the same report as identified
                  by the same value of the hostTopNControlIndex object."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.2.1.1"</span>;
            }

            <a name="hostTopNIndex.1858"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in
                  the hostTopN table among those in the same report.
                  This index is between 1 and N, where N is the
                  number of entries in this table.  Increasing values
                  of hostTopNIndex shall be assigned to entries with
                  decreasing values of hostTopNRate until index N
                  is assigned to the entry with the lowest value of
                  hostTopNRate or there are no more hostTopNEntries."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.2.1.2"</span>;
            }

            <a name="hostTopNAddress.1875"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNAddress</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The physical address of this host."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.2.1.3"</span>;
            }

            <a name="hostTopNRate.1883"/><span class="yang_kw">leaf</span> <span class="yang_id">hostTopNRate</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The amount of change in the selected variable
                  during this sampling interval.  The selected
                  variable is this host's instance of the object
                  selected by hostTopNRateBase."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.5.2.1.4"</span>;
            }
         }  <span class="yang_cmt">// list hostTopNEntry</span>
      }  <span class="yang_cmt">// container hostTopN</span>

      <a name="matrix.1897"/><span class="yang_kw">container</span> <span class="yang_id">matrix</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6"</span>;

         <a name="matrixControlEntry.1902"/><span class="yang_kw">list</span> <span class="yang_id">matrixControlEntry</span> {
            <span class="yang_kw">key</span> "<a href="#matrixControlIndex.1914">matrixControlIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a traffic matrix on a particular
               
               interface.  For example, an instance of the
               matrixControlLastDeleteTime object might be named
               matrixControlLastDeleteTime.1"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.1.1"</span>;

            <a name="matrixControlIndex.1914"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixControlIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in the
                  matrixControl table.  Each such entry defines
                  a function that discovers conversations on a particular
                  interface and places statistics about them in the
                  matrixSDTable and the matrixDSTable on behalf of this
                  matrixControlEntry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.1.1.1"</span>;
            }

            <a name="matrixControlDataSource.1929"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixControlDataSource</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object identifies the source of
                  the data from which this entry creates a traffic matrix.
                  This source can be any interface on this device.  In
                  order to identify a particular interface, this object
                  shall identify the instance of the ifIndex object,
                  defined in RFC 2233 [17], for the desired
                  interface.  For example, if an entry were to receive data
                  from interface #1, this object would be set to ifIndex.1.
                  
                  The statistics in this group reflect all packets
                  on the local network segment attached to the identified
                  interface.
                  
                  An agent may or may not be able to tell if fundamental
                  changes to the media of the interface have occurred and
                  
                  necessitate an invalidation of this entry.  For example, a
                  hot-pluggable ethernet card could be pulled out and replaced
                  by a token-ring card.  In such a case, if the agent has such
                  knowledge of the change, it is recommended that it
                  invalidate this entry.
                  
                  This object may not be modified if the associated
                  matrixControlStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.1.1.2"</span>;
            }

            <a name="matrixControlTableSize.1960"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixControlTableSize</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of matrixSDEntries in the matrixSDTable
                  for this interface.  This must also be the value of
                  the number of entries in the matrixDSTable for this
                  interface."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.1.1.3"</span>;
            }

            <a name="matrixControlLastDeleteTime.1971"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixControlLastDeleteTime</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#timeticks.231">yang:timeticks</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of sysUpTime when the last entry
                  was deleted from the portion of the matrixSDTable
                  or matrixDSTable associated with this matrixControlEntry.
                  If no deletions have occurred, this value shall be
                  zero."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.1.1.4"</span>;
            }

            <a name="matrixControlOwner.1983"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixControlOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.1.1.5"</span>;
            }

            <a name="matrixControlStatus.1992"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixControlStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The status of this matrixControl entry.
                  
                  If this object is not equal to valid(1), all associated
                  entries in the matrixSDTable and the matrixDSTable
                  shall be deleted by the agent."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.1.1.6"</span>;
            }
         }  <span class="yang_cmt">// list matrixControlEntry</span>

         <a name="matrixSDEntry.2008"/><span class="yang_kw">list</span> <span class="yang_id">matrixSDEntry</span> {
            <span class="yang_kw">key</span> "<a href="#matrixSDIndex.2036">matrixSDIndex</a>, <a href="#matrixSDSourceAddress.2020">matrixSDSourceAddress</a>, <a href="#matrixSDDestAddress.2028">matrixSDDestAddress</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A collection of statistics for communications between
               two addresses on a particular interface.  For example,
               an instance of the matrixSDPkts object might be named
               matrixSDPkts.1.6.8.0.32.27.3.176.6.8.0.32.10.8.113"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.2.1"</span>;

            <a name="matrixSDSourceAddress.2020"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixSDSourceAddress</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The source physical address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.2.1.1"</span>;
            }

            <a name="matrixSDDestAddress.2028"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixSDDestAddress</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The destination physical address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.2.1.2"</span>;
            }

            <a name="matrixSDIndex.2036"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixSDIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The set of collected matrix statistics of which
                  this entry is a part.  The set of matrix statistics
                  identified by a particular value of this index
                  is associated with the same matrixControlEntry
                  as identified by the same value of matrixControlIndex."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.2.1.3"</span>;
            }

            <a name="matrixSDPkts.2050"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixSDPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets transmitted from the source
                  address to the destination address (this number includes
                  bad packets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.2.1.4"</span>;
            }

            <a name="matrixSDOctets.2061"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixSDOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of octets (excluding framing bits but
                  including FCS octets) contained in all packets
                  transmitted from the source address to the
                  destination address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.2.1.5"</span>;
            }

            <a name="matrixSDErrors.2073"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixSDErrors</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of bad packets transmitted from
                  the source address to the destination address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.2.1.6"</span>;
            }
         }  <span class="yang_cmt">// list matrixSDEntry</span>

         <a name="matrixDSEntry.2087"/><span class="yang_kw">list</span> <span class="yang_id">matrixDSEntry</span> {
            <span class="yang_kw">key</span> "<a href="#matrixDSIndex.2115">matrixDSIndex</a>, <a href="#matrixDSDestAddress.2107">matrixDSDestAddress</a>, <a href="#matrixDSSourceAddress.2099">matrixDSSourceAddress</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A collection of statistics for communications between
               two addresses on a particular interface.  For example,
               an instance of the matrixSDPkts object might be named
               matrixSDPkts.1.6.8.0.32.10.8.113.6.8.0.32.27.3.176"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.3.1"</span>;

            <a name="matrixDSSourceAddress.2099"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixDSSourceAddress</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The source physical address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.3.1.1"</span>;
            }

            <a name="matrixDSDestAddress.2107"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixDSDestAddress</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The destination physical address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.3.1.2"</span>;
            }

            <a name="matrixDSIndex.2115"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixDSIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The set of collected matrix statistics of which
                  this entry is a part.  The set of matrix statistics
                  identified by a particular value of this index
                  is associated with the same matrixControlEntry
                  as identified by the same value of matrixControlIndex."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.3.1.3"</span>;
            }

            <a name="matrixDSPkts.2129"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixDSPkts</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets transmitted from the source
                  address to the destination address (this number includes
                  bad packets)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.3.1.4"</span>;
            }

            <a name="matrixDSOctets.2140"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixDSOctets</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of octets (excluding framing bits
                  but including FCS octets) contained in all packets
                  transmitted from the source address to the
                  destination address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.3.1.5"</span>;
            }

            <a name="matrixDSErrors.2152"/><span class="yang_kw">leaf</span> <span class="yang_id">matrixDSErrors</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of bad packets transmitted from
                  the source address to the destination address."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.6.3.1.6"</span>;
            }
         }  <span class="yang_cmt">// list matrixDSEntry</span>
      }  <span class="yang_cmt">// container matrix</span>

      <a name="filter.2165"/><span class="yang_kw">container</span> <span class="yang_id">filter</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7"</span>;

         <a name="filterEntry.2170"/><span class="yang_kw">list</span> <span class="yang_id">filterEntry</span> {
            <span class="yang_kw">key</span> "<a href="#filterIndex.2180">filterIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A set of parameters for a packet filter applied on a
               particular interface.  As an example, an instance of the
               filterPktData object might be named filterPktData.12"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1"</span>;

            <a name="filterIndex.2180"/><span class="yang_kw">leaf</span> <span class="yang_id">filterIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry
                  in the filter table.  Each such entry defines
                  one filter that is to be applied to every packet
                  received on an interface."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.1"</span>;
            }

            <a name="filterChannelIndex.2193"/><span class="yang_kw">leaf</span> <span class="yang_id">filterChannelIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object identifies the channel of which this filter
                  is a part.  The filters identified by a particular value
                  of this object are associated with the same channel as
                  identified by the same value of the channelIndex object."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.2"</span>;
            }

            <a name="filterPktDataOffset.2206"/><span class="yang_kw">leaf</span> <span class="yang_id">filterPktDataOffset</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The offset from the beginning of each packet where
                  a match of packet data will be attempted.  This offset
                  is measured from the point in the physical layer
                  packet after the framing bits, if any.  For example,
                  in an Ethernet frame, this point is at the beginning of
                  the destination MAC address.
                  
                  This object may not be modified if the associated
                  filterStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.3"</span>;
            }

            <a name="filterPktData.2224"/><span class="yang_kw">leaf</span> <span class="yang_id">filterPktData</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The data that is to be matched with the input packet.
                  For each packet received, this filter and the accompanying
                  filterPktDataMask and filterPktDataNotMask will be
                  adjusted for the offset.  The only bits relevant to this
                  match algorithm are those that have the corresponding
                  filterPktDataMask bit equal to one.  The following three
                  rules are then applied to every packet:
                  
                  (1) If the packet is too short and does not have data
                      corresponding to part of the filterPktData, the packet
                      will fail this data match.
                  
                  (2) For each relevant bit from the packet with the
                      corresponding filterPktDataNotMask bit set to zero, if
                      the bit from the packet is not equal to the corresponding
                      bit from the filterPktData, then the packet will fail
                      this data match.
                  
                  (3) If for every relevant bit from the packet with the
                      corresponding filterPktDataNotMask bit set to one, the
                      bit from the packet is equal to the corresponding bit
                      from the filterPktData, then the packet will fail this
                      data match.
                  
                  Any packets that have not failed any of the three matches
                  above have passed this data match.  In particular, a zero
                  length filter will match any packet.
                  
                  This object may not be modified if the associated
                  filterStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.4"</span>;
            }

            <a name="filterPktDataMask.2261"/><span class="yang_kw">leaf</span> <span class="yang_id">filterPktDataMask</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mask that is applied to the match process.
                  After adjusting this mask for the offset, only those
                  bits in the received packet that correspond to bits set
                  in this mask are relevant for further processing by the
                  
                  match algorithm.  The offset is applied to filterPktDataMask
                  in the same way it is applied to the filter.  For the
                  purposes of the matching algorithm, if the associated
                  filterPktData object is longer than this mask, this mask is
                  conceptually extended with '1' bits until it reaches the
                  length of the filterPktData object.
                  
                  This object may not be modified if the associated
                  filterStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.5"</span>;
            }

            <a name="filterPktDataNotMask.2282"/><span class="yang_kw">leaf</span> <span class="yang_id">filterPktDataNotMask</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The inversion mask that is applied to the match
                  process.  After adjusting this mask for the offset,
                  those relevant bits in the received packet that correspond
                  to bits cleared in this mask must all be equal to their
                  corresponding bits in the filterPktData object for the packet
                  to be accepted.  In addition, at least one of those relevant
                  bits in the received packet that correspond to bits set in
                  this mask must be different to its corresponding bit in the
                  filterPktData object.
                  
                  For the purposes of the matching algorithm, if the associated
                  filterPktData object is longer than this mask, this mask is
                  conceptually extended with '0' bits until it reaches the
                  length of the filterPktData object.
                  
                  This object may not be modified if the associated
                  filterStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.6"</span>;
            }

            <a name="filterPktStatus.2306"/><span class="yang_kw">leaf</span> <span class="yang_id">filterPktStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The status that is to be matched with the input packet.
                  The only bits relevant to this match algorithm are those that
                  have the corresponding filterPktStatusMask bit equal to one.
                  The following two rules are then applied to every packet:
                  
                  (1) For each relevant bit from the packet status with the
                      corresponding filterPktStatusNotMask bit set to zero, if
                      the bit from the packet status is not equal to the
                  
                      corresponding bit from the filterPktStatus, then the
                      packet will fail this status match.
                  
                  (2) If for every relevant bit from the packet status with the
                      corresponding filterPktStatusNotMask bit set to one, the
                      bit from the packet status is equal to the corresponding
                      bit from the filterPktStatus, then the packet will fail
                      this status match.
                  
                  Any packets that have not failed either of the two matches
                  above have passed this status match.  In particular, a zero
                  length status filter will match any packet's status.
                  
                  The value of the packet status is a sum.  This sum
                  initially takes the value zero.  Then, for each
                  error, E, that has been discovered in this packet,
                  2 raised to a value representing E is added to the sum.
                  The errors and the bits that represent them are dependent
                  on the media type of the interface that this channel
                  is receiving packets from.
                  
                  The errors defined for a packet captured off of an
                  Ethernet interface are as follows:
                  
                      bit #    Error
                  	0    Packet is longer than 1518 octets
                  	1    Packet is shorter than 64 octets
                  	2    Packet experienced a CRC or Alignment error
                  
                  For example, an Ethernet fragment would have a
                  value of 6 (2^1 + 2^2).
                  
                  As this MIB is expanded to new media types, this object
                  will have other media-specific errors defined.
                  
                  For the purposes of this status matching algorithm, if the
                  packet status is longer than this filterPktStatus object,
                  this object is conceptually extended with '0' bits until it
                  reaches the size of the packet status.
                  
                  This object may not be modified if the associated
                  filterStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.7"</span>;
            }

            <a name="filterPktStatusMask.2364"/><span class="yang_kw">leaf</span> <span class="yang_id">filterPktStatusMask</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mask that is applied to the status match process.
                  Only those bits in the received packet that correspond to
                  bits set in this mask are relevant for further processing
                  by the status match algorithm.  For the purposes
                  of the matching algorithm, if the associated filterPktStatus
                  object is longer than this mask, this mask is conceptually
                  extended with '1' bits until it reaches the size of the
                  filterPktStatus.  In addition, if a packet status is longer
                  than this mask, this mask is conceptually extended with '0'
                  bits until it reaches the size of the packet status.
                  
                  This object may not be modified if the associated
                  filterStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.8"</span>;
            }

            <a name="filterPktStatusNotMask.2384"/><span class="yang_kw">leaf</span> <span class="yang_id">filterPktStatusNotMask</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The inversion mask that is applied to the status match
                  process.  Those relevant bits in the received packet status
                  that correspond to bits cleared in this mask must all be
                  equal to their corresponding bits in the filterPktStatus
                  object for the packet to be accepted.  In addition, at least
                  one of those relevant bits in the received packet status
                  that correspond to bits set in this mask must be different
                  to its corresponding bit in the filterPktStatus object for
                  the packet to be accepted.
                  
                  For the purposes of the matching algorithm, if the associated
                  filterPktStatus object or a packet status is longer than this
                  mask, this mask is conceptually extended with '0' bits until
                  it reaches the longer of the lengths of the filterPktStatus
                  object and the packet status.
                  
                  This object may not be modified if the associated
                  filterStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.9"</span>;
            }

            <a name="filterOwner.2409"/><span class="yang_kw">leaf</span> <span class="yang_id">filterOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.10"</span>;
            }

            <a name="filterStatus.2418"/><span class="yang_kw">leaf</span> <span class="yang_id">filterStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The status of this filter entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.1.1.11"</span>;
            }
         }  <span class="yang_cmt">// list filterEntry</span>

         <a name="channelEntry.2430"/><span class="yang_kw">list</span> <span class="yang_id">channelEntry</span> {
            <span class="yang_kw">key</span> "<a href="#channelIndex.2440">channelIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A set of parameters for a packet channel applied on a
               particular interface.  As an example, an instance of the
               channelMatches object might be named channelMatches.3"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1"</span>;

            <a name="channelIndex.2440"/><span class="yang_kw">leaf</span> <span class="yang_id">channelIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in the channel
                  table.  Each such entry defines one channel, a logical
                  data and event stream.
                  
                  It is suggested that before creating a channel, an
                  application should scan all instances of the
                  filterChannelIndex object to make sure that there are no
                  pre-existing filters that would be inadvertently be linked
                  to the channel."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.1"</span>;
            }

            <a name="channelIfIndex.2458"/><span class="yang_kw">leaf</span> <span class="yang_id">channelIfIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of this object uniquely identifies the
                  interface on this remote network monitoring device to which
                  the associated filters are applied to allow data into this
                  channel.  The interface identified by a particular value
                  of this object is the same interface as identified by the
                  same value of the ifIndex object, defined in RFC 2233 [17].
                  
                  The filters in this group are applied to all packets on
                  the local network segment attached to the identified
                  interface.
                  
                  An agent may or may not be able to tell if fundamental
                  changes to the media of the interface have occurred and
                  necessitate an invalidation of this entry.  For example, a
                  hot-pluggable ethernet card could be pulled out and replaced
                  by a token-ring card.  In such a case, if the agent has such
                  knowledge of the change, it is recommended that it
                  invalidate this entry.
                  
                  This object may not be modified if the associated
                  channelStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.2"</span>;
            }

            <a name="channelAcceptType.2488"/><span class="yang_kw">leaf</span> <span class="yang_id">channelAcceptType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"acceptMatched"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"acceptFailed"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object controls the action of the filters
                  associated with this channel.  If this object is equal
                  to acceptMatched(1), packets will be accepted to this
                  channel if they are accepted by both the packet data and
                  packet status matches of an associated filter.  If
                  this object is equal to acceptFailed(2), packets will
                  be accepted to this channel only if they fail either
                  the packet data match or the packet status match of
                  each of the associated filters.
                  
                  In particular, a channel with no associated filters will
                  match no packets if set to acceptMatched(1) case and will
                  match all packets in the acceptFailed(2) case.
                  
                  This object may not be modified if the associated
                  channelStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.3"</span>;
            }

            <a name="channelDataControl.2514"/><span class="yang_kw">leaf</span> <span class="yang_id">channelDataControl</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"on"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"off"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object controls the flow of data through this channel.
                  If this object is on(1), data, status and events flow
                  through this channel.  If this object is off(2), data,
                  status and events will not flow through this channel."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"off"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.4"</span>;
            }

            <a name="channelTurnOnEventIndex.2529"/><span class="yang_kw">leaf</span> <span class="yang_id">channelTurnOnEventIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"0..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of this object identifies the event
                  that is configured to turn the associated
                  channelDataControl from off to on when the event is
                  generated.  The event identified by a particular value
                  of this object is the same event as identified by the
                  same value of the eventIndex object.  If there is no
                  corresponding entry in the eventTable, then no
                  association exists.  In fact, if no event is intended
                  for this channel, channelTurnOnEventIndex must be
                  set to zero, a non-existent event index.
                  
                  This object may not be modified if the associated
                  channelStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.5"</span>;
            }

            <a name="channelTurnOffEventIndex.2551"/><span class="yang_kw">leaf</span> <span class="yang_id">channelTurnOffEventIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"0..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of this object identifies the event
                  that is configured to turn the associated
                  channelDataControl from on to off when the event is
                  generated.  The event identified by a particular value
                  of this object is the same event as identified by the
                  same value of the eventIndex object.  If there is no
                  corresponding entry in the eventTable, then no
                  association exists.  In fact, if no event is intended
                  for this channel, channelTurnOffEventIndex must be
                  set to zero, a non-existent event index.
                  
                  This object may not be modified if the associated
                  channelStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.6"</span>;
            }

            <a name="channelEventIndex.2573"/><span class="yang_kw">leaf</span> <span class="yang_id">channelEventIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"0..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of this object identifies the event
                  that is configured to be generated when the
                  associated channelDataControl is on and a packet
                  is matched.  The event identified by a particular value
                  of this object is the same event as identified by the
                  same value of the eventIndex object.  If there is no
                  corresponding entry in the eventTable, then no
                  association exists.  In fact, if no event is intended
                  for this channel, channelEventIndex must be
                  set to zero, a non-existent event index.
                  
                  This object may not be modified if the associated
                  channelStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.7"</span>;
            }

            <a name="channelEventStatus.2595"/><span class="yang_kw">leaf</span> <span class="yang_id">channelEventStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"eventReady"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"eventFired"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"eventAlwaysReady"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The event status of this channel.
                  
                  If this channel is configured to generate events
                  when packets are matched, a means of controlling
                  the flow of those events is often needed.  When
                  this object is equal to eventReady(1), a single
                  event may be generated, after which this object
                  will be set by the probe to eventFired(2).  While
                  in the eventFired(2) state, no events will be
                  generated until the object is modified to
                  eventReady(1) (or eventAlwaysReady(3)).  The
                  management station can thus easily respond to a
                  notification of an event by re-enabling this object.
                  
                  If the management station wishes to disable this
                  flow control and allow events to be generated
                  at will, this object may be set to
                  eventAlwaysReady(3).  Disabling the flow control
                  is discouraged as it can result in high network
                  traffic or other performance problems."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"eventReady"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.8"</span>;
            }

            <a name="channelMatches.2627"/><span class="yang_kw">leaf</span> <span class="yang_id">channelMatches</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of times this channel has matched a packet.
                  Note that this object is updated even when
                  channelDataControl is set to off."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.9"</span>;
            }

            <a name="channelDescription.2638"/><span class="yang_kw">leaf</span> <span class="yang_id">channelDescription</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#DisplayString.39">smiv2:DisplayString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..127"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"A comment describing this channel."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.10"</span>;
            }

            <a name="channelOwner.2648"/><span class="yang_kw">leaf</span> <span class="yang_id">channelOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.11"</span>;
            }

            <a name="channelStatus.2657"/><span class="yang_kw">leaf</span> <span class="yang_id">channelStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"The status of this channel entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.7.2.1.12"</span>;
            }
         }  <span class="yang_cmt">// list channelEntry</span>
      }  <span class="yang_cmt">// container filter</span>

      <a name="capture.2668"/><span class="yang_kw">container</span> <span class="yang_id">capture</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8"</span>;

         <a name="bufferControlEntry.2673"/><span class="yang_kw">list</span> <span class="yang_id">bufferControlEntry</span> {
            <span class="yang_kw">key</span> "<a href="#bufferControlIndex.2684">bufferControlIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A set of parameters that control the collection of a stream
               of packets that have matched filters.  As an example, an
               instance of the bufferControlCaptureSliceSize object might
               be named bufferControlCaptureSliceSize.3"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1"</span>;

            <a name="bufferControlIndex.2684"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry
                  in the bufferControl table.  The value of this
                  index shall never be zero.  Each such
                  entry defines one set of packets that is
                  captured and controlled by one or more filters."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.1"</span>;
            }

            <a name="bufferControlChannelIndex.2698"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlChannelIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that identifies the channel that is the
                  source of packets for this bufferControl table.
                  The channel identified by a particular value of this
                  index is the same as identified by the same value of
                  the channelIndex object.
                  
                  This object may not be modified if the associated
                  bufferControlStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.2"</span>;
            }

            <a name="bufferControlFullStatus.2715"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlFullStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"spaceAvailable"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"full"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"This object shows whether the buffer has room to
                  accept new packets or if it is full.
                  
                  If the status is spaceAvailable(1), the buffer is
                  accepting new packets normally.  If the status is
                  full(2) and the associated bufferControlFullAction
                  object is wrapWhenFull, the buffer is accepting new
                  packets by deleting enough of the oldest packets
                  to make room for new ones as they arrive.  Otherwise,
                  if the status is full(2) and the
                  bufferControlFullAction object is lockWhenFull,
                  then the buffer has stopped collecting packets.
                  
                  When this object is set to full(2) the probe must
                  not later set it to spaceAvailable(1) except in the
                  case of a significant gain in resources such as
                  an increase of bufferControlOctetsGranted.  In
                  particular, the wrap-mode action of deleting old
                  packets to make room for newly arrived packets
                  must not affect the value of this object."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.3"</span>;
            }

            <a name="bufferControlFullAction.2745"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlFullAction</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"lockWhenFull"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"wrapWhenFull"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Controls the action of the buffer when it
                  reaches the full status.  When in the lockWhenFull(1)
                  state and a packet is added to the buffer that
                  fills the buffer, the bufferControlFullStatus will
                  be set to full(2) and this buffer will stop capturing
                  packets."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.4"</span>;
            }

            <a name="bufferControlCaptureSliceSize.2761"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlCaptureSliceSize</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The maximum number of octets of each packet
                  that will be saved in this capture buffer.
                  For example, if a 1500 octet packet is received by
                  the probe and this object is set to 500, then only
                  500 octets of the packet will be stored in the
                  associated capture buffer.  If this variable is set
                  to 0, the capture buffer will save as many octets
                  as is possible.
                  
                  This object may not be modified if the associated
                  bufferControlStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"100"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.5"</span>;
            }

            <a name="bufferControlDownloadSliceSize.2781"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlDownloadSliceSize</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The maximum number of octets of each packet
                  in this capture buffer that will be returned in
                  an SNMP retrieval of that packet.  For example,
                  if 500 octets of a packet have been stored in the
                  associated capture buffer, the associated
                  bufferControlDownloadOffset is 0, and this
                  object is set to 100, then the captureBufferPacket
                  object that contains the packet will contain only
                  the first 100 octets of the packet.
                  
                  A prudent manager will take into account possible
                  interoperability or fragmentation problems that may
                  occur if the download slice size is set too large.
                  In particular, conformant SNMP implementations are not
                  required to accept messages whose length exceeds 484
                  octets, although they are encouraged to support larger
                  datagrams whenever feasible."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"100"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.6"</span>;
            }

            <a name="bufferControlDownloadOffset.2807"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlDownloadOffset</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The offset of the first octet of each packet
                  in this capture buffer that will be returned in
                  an SNMP retrieval of that packet.  For example,
                  if 500 octets of a packet have been stored in the
                  associated capture buffer and this object is set to
                  100, then the captureBufferPacket object that
                  contains the packet will contain bytes starting
                  100 octets into the packet."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.7"</span>;
            }

            <a name="bufferControlMaxOctetsRequested.2824"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlMaxOctetsRequested</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The requested maximum number of octets to be
                  saved in this captureBuffer, including any
                  implementation-specific overhead. If this variable
                  is set to -1, the capture buffer will save as many
                  octets as is possible.
                  
                  When this object is created or modified, the probe
                  should set bufferControlMaxOctetsGranted as closely
                  to this object as is possible for the particular probe
                  implementation and available resources.  However, if
                  the object has the special value of -1, the probe
                  must set bufferControlMaxOctetsGranted to -1."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"-1"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.8"</span>;
            }

            <a name="bufferControlMaxOctetsGranted.2845"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlMaxOctetsGranted</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The maximum number of octets that can be
                  saved in this captureBuffer, including overhead.
                  If this variable is -1, the capture buffer will save
                  as many octets as possible.
                  
                  When the bufferControlMaxOctetsRequested object is
                  created or modified, the probe should set this object
                  as closely to the requested value as is possible for the
                  particular probe implementation and available resources.
                  However, if the request object has the special value
                  
                  of -1, the probe must set this object to -1.
                  
                  The probe must not lower this value except as a result of
                  a modification to the associated
                  bufferControlMaxOctetsRequested object.
                  
                  When this maximum number of octets is reached
                  and a new packet is to be added to this
                  capture buffer and the corresponding
                  bufferControlFullAction is set to wrapWhenFull(2),
                  enough of the oldest packets associated with this
                  capture buffer shall be deleted by the agent so
                  that the new packet can be added.  If the corresponding
                  bufferControlFullAction is set to lockWhenFull(1),
                  the new packet shall be discarded.  In either case,
                  the probe must set bufferControlFullStatus to
                  full(2).
                  
                  When the value of this object changes to a value less
                  than the current value, entries are deleted from
                  the captureBufferTable associated with this
                  bufferControlEntry.  Enough of the
                  oldest of these captureBufferEntries shall be
                  deleted by the agent so that the number of octets
                  used remains less than or equal to the new value of
                  this object.
                  
                  When the value of this object changes to a value greater
                  than the current value, the number of associated
                  captureBufferEntries may be allowed to grow."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.9"</span>;
            }

            <a name="bufferControlCapturedPackets.2894"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlCapturedPackets</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Packets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of packets currently in this captureBuffer."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.10"</span>;
            }

            <a name="bufferControlTurnOnTime.2903"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlTurnOnTime</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#timeticks.231">yang:timeticks</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of sysUpTime when this capture buffer was
                  first turned on."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.11"</span>;
            }

            <a name="bufferControlOwner.2912"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.12"</span>;
            }

            <a name="bufferControlStatus.2921"/><span class="yang_kw">leaf</span> <span class="yang_id">bufferControlStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The status of this buffer Control Entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.1.1.13"</span>;
            }
         }  <span class="yang_cmt">// list bufferControlEntry</span>

         <a name="captureBufferEntry.2933"/><span class="yang_kw">list</span> <span class="yang_id">captureBufferEntry</span> {
            <span class="yang_kw">key</span> "<a href="#captureBufferControlIndex.2943">captureBufferControlIndex</a>, <a href="#captureBufferIndex.2954">captureBufferIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A packet captured off of an attached network.  As an
               example, an instance of the captureBufferPacketData
               object might be named captureBufferPacketData.3.1783"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1"</span>;

            <a name="captureBufferControlIndex.2943"/><span class="yang_kw">leaf</span> <span class="yang_id">captureBufferControlIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The index of the bufferControlEntry with which
                  this packet is associated."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1.1"</span>;
            }

            <a name="captureBufferIndex.2954"/><span class="yang_kw">leaf</span> <span class="yang_id">captureBufferIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..2147483647"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry
                  in the captureBuffer table associated with a
                  particular bufferControlEntry.  This index will
                  start at 1 and increase by one for each new packet
                  added with the same captureBufferControlIndex.
                  
                  Should this value reach 2147483647, the next packet
                  added with the same captureBufferControlIndex shall
                  cause this value to wrap around to 1."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1.2"</span>;
            }

            <a name="captureBufferPacketID.2972"/><span class="yang_kw">leaf</span> <span class="yang_id">captureBufferPacketID</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that describes the order of packets
                  that are received on a particular interface.
                  The packetID of a packet captured on an
                  interface is defined to be greater than the
                  packetID's of all packets captured previously on
                  the same interface.  As the captureBufferPacketID
                  object has a maximum positive value of 2^31 - 1,
                  any captureBufferPacketID object shall have the
                  value of the associated packet's packetID mod 2^31."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1.3"</span>;
            }

            <a name="captureBufferPacketData.2988"/><span class="yang_kw">leaf</span> <span class="yang_id">captureBufferPacketData</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The data inside the packet, starting at the beginning
                  of the packet plus any offset specified in the
                  
                  associated bufferControlDownloadOffset, including any
                  link level headers.  The length of the data in this object
                  is the minimum of the length of the captured packet minus
                  the offset, the length of the associated
                  bufferControlCaptureSliceSize minus the offset, and the
                  associated bufferControlDownloadSliceSize.  If this minimum
                  is less than zero, this object shall have a length of zero."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1.4"</span>;
            }

            <a name="captureBufferPacketLength.3005"/><span class="yang_kw">leaf</span> <span class="yang_id">captureBufferPacketLength</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Octets"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The actual length (off the wire) of the packet stored
                  in this entry, including FCS octets."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1.5"</span>;
            }

            <a name="captureBufferPacketTime.3015"/><span class="yang_kw">leaf</span> <span class="yang_id">captureBufferPacketTime</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"Milliseconds"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of milliseconds that had passed since
                  this capture buffer was first turned on when this
                  packet was captured."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1.6"</span>;
            }

            <a name="captureBufferPacketStatus.3026"/><span class="yang_kw">leaf</span> <span class="yang_id">captureBufferPacketStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A value which indicates the error status of this packet.
                  
                  The value of this object is defined in the same way as
                  filterPktStatus.  The value is a sum.  This sum
                  initially takes the value zero.  Then, for each
                  error, E, that has been discovered in this packet,
                  2 raised to a value representing E is added to the sum.
                  
                  The errors defined for a packet captured off of an
                  Ethernet interface are as follows:
                  
                      bit #    Error
                  	0    Packet is longer than 1518 octets
                  
                  	1    Packet is shorter than 64 octets
                  	2    Packet experienced a CRC or Alignment error
                  	3    First packet in this capture buffer after
                  	     it was detected that some packets were
                  	     not processed correctly.
                  	4    Packet's order in buffer is only approximate
                  	     (May only be set for packets sent from
                  	     the probe)
                  
                  For example, an Ethernet fragment would have a
                  value of 6 (2^1 + 2^2).
                  
                  As this MIB is expanded to new media types, this object
                  will have other media-specific errors defined."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.8.2.1.7"</span>;
            }
         }  <span class="yang_cmt">// list captureBufferEntry</span>
      }  <span class="yang_cmt">// container capture</span>

      <a name="event.3064"/><span class="yang_kw">container</span> <span class="yang_id">event</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9"</span>;

         <a name="eventEntry.3069"/><span class="yang_kw">list</span> <span class="yang_id">eventEntry</span> {
            <span class="yang_kw">key</span> "<a href="#eventIndex.3080">eventIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A set of parameters that describe an event to be generated
               when certain conditions are met.  As an example, an instance
               of the eventLastTimeSent object might be named
               eventLastTimeSent.6"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1"</span>;

            <a name="eventIndex.3080"/><span class="yang_kw">leaf</span> <span class="yang_id">eventIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry in the
                  event table.  Each such entry defines one event that
                  is to be generated when the appropriate conditions
                  occur."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1.1"</span>;
            }

            <a name="eventDescription.3093"/><span class="yang_kw">leaf</span> <span class="yang_id">eventDescription</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#DisplayString.39">smiv2:DisplayString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..127"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"A comment describing this event entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1.2"</span>;
            }

            <a name="eventType.3103"/><span class="yang_kw">leaf</span> <span class="yang_id">eventType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"none"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"log"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"snmptrap"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"logandtrap"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">4</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The type of notification that the probe will make
                  about this event.  In the case of log, an entry is
                  made in the log table for each event.  In the case of
                  snmp-trap, an SNMP trap is sent to one or more
                  management stations."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1.3"</span>;
            }

            <a name="eventCommunity.3120"/><span class="yang_kw">leaf</span> <span class="yang_id">eventCommunity</span> {
               <span class="yang_kw">type</span> <span class="yang_id">binary</span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..127"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"If an SNMP trap is to be sent, it will be sent to
                  the SNMP community specified by this octet string."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1.4"</span>;
            }

            <a name="eventLastTimeSent.3131"/><span class="yang_kw">leaf</span> <span class="yang_id">eventLastTimeSent</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#timeticks.231">yang:timeticks</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of sysUpTime at the time this event
                  entry last generated an event.  If this entry has
                  not generated any events, this value will be
                  zero."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1.5"</span>;
            }

            <a name="eventOwner.3142"/><span class="yang_kw">leaf</span> <span class="yang_id">eventOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#OwnerString.100">OwnerString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The entity that configured this entry and is therefore
                  using the resources assigned to it.
                  
                  If this object contains a string starting with 'monitor'
                  and has associated entries in the log table, all connected
                  management stations should retrieve those log entries,
                  as they may have significance to all management stations
                  connected to this device"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1.6"</span>;
            }

            <a name="eventStatus.3157"/><span class="yang_kw">leaf</span> <span class="yang_id">eventStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#EntryStatus.129">EntryStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The status of this event entry.
                  
                  If this object is not equal to valid(1), all associated
                  log entries shall be deleted by the agent."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.1.1.7"</span>;
            }
         }  <span class="yang_cmt">// list eventEntry</span>

         <a name="logEntry.3172"/><span class="yang_kw">list</span> <span class="yang_id">logEntry</span> {
            <span class="yang_kw">key</span> "<a href="#logEventIndex.3182">logEventIndex</a>, <a href="#logIndex.3196">logIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A set of data describing an event that has been
               logged.  For example, an instance of the logDescription
               object might be named logDescription.6.47"</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.2.1"</span>;

            <a name="logEventIndex.3182"/><span class="yang_kw">leaf</span> <span class="yang_id">logEventIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..65535"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The event entry that generated this log
                  entry.  The log identified by a particular
                  value of this index is associated with the same
                  eventEntry as identified by the same value
                  of eventIndex."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.2.1.1"</span>;
            }

            <a name="logIndex.3196"/><span class="yang_kw">leaf</span> <span class="yang_id">logIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..2147483647"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An index that uniquely identifies an entry
                  in the log table amongst those generated by the
                  same eventEntries.  These indexes are
                  assigned beginning with 1 and increase by one
                  with each new log entry.  The association
                  between values of logIndex and logEntries
                  is fixed for the lifetime of each logEntry.
                  The agent may choose to delete the oldest
                  instances of logEntry as required because of
                  lack of memory.  It is an implementation-specific
                  matter as to when this deletion may occur."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.2.1.2"</span>;
            }

            <a name="logTime.3216"/><span class="yang_kw">leaf</span> <span class="yang_id">logTime</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#timeticks.231">yang:timeticks</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of sysUpTime when this log entry was created."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.2.1.3"</span>;
            }

            <a name="logDescription.3224"/><span class="yang_kw">leaf</span> <span class="yang_id">logDescription</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#DisplayString.39">smiv2:DisplayString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..255"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An implementation dependent description of the
                  event that activated this log entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.9.2.1.4"</span>;
            }
         }  <span class="yang_cmt">// list logEntry</span>
      }  <span class="yang_cmt">// container event</span>

      <a name="risingAlarm.3238"/><span class="yang_kw">notification</span> <span class="yang_id">risingAlarm</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"The SNMP trap that is generated when an alarm
            entry crosses its rising threshold and generates
            an event that is configured for sending SNMP
            traps."</span>;
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.0.1"</span>;

         <a name="risingAlarm-alarmIndex.3246"/><span class="yang_kw">container</span> <span class="yang_id">risingAlarm-alarmIndex</span> {

            <a name="alarmIndex.3247"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }
         }  <span class="yang_cmt">// container risingAlarm-alarmIndex</span>

         <a name="risingAlarm-alarmVariable.3257"/><span class="yang_kw">container</span> <span class="yang_id">risingAlarm-alarmVariable</span> {

            <a name="alarmIndex.3258"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmVariable.3266"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmVariable</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the particular variable to be
                  sampled.  Only variables that resolve to an ASN.1 primitive
                  type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
                  Gauge, or TimeTicks) may be sampled.
                  
                  Because SNMP access control is articulated entirely
                  in terms of the contents of MIB views, no access
                  control mechanism exists that can restrict the value of
                  this object to identify only those objects that exist
                  in a particular MIB view.  Because there is thus no
                  acceptable means of restricting the read access that
                  could be obtained through the alarm mechanism, the
                  probe must only grant write access to this object in
                  
                  those views that have read access to all objects on
                  the probe.
                  
                  During a set operation, if the supplied variable name is
                  not available in the selected MIB view, a badValue error
                  must be returned.  If at any time the variable name of
                  an established alarmEntry is no longer available in the
                  selected MIB view, the probe must change the status of
                  this alarmEntry to invalid(4).
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.3"</span>;
            }
         }  <span class="yang_cmt">// container risingAlarm-alarmVariable</span>

         <a name="risingAlarm-alarmSampleType.3300"/><span class="yang_kw">container</span> <span class="yang_id">risingAlarm-alarmSampleType</span> {

            <a name="alarmIndex.3301"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmSampleType.3309"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmSampleType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"absoluteValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"deltaValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The method of sampling the selected variable and
                  calculating the value to be compared against the
                  thresholds.  If the value of this object is
                  absoluteValue(1), the value of the selected variable
                  will be compared directly with the thresholds at the
                  end of the sampling interval.  If the value of this
                  object is deltaValue(2), the value of the selected
                  variable at the last sample will be subtracted from
                  the current value, and the difference compared with
                  the thresholds.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.4"</span>;
            }
         }  <span class="yang_cmt">// container risingAlarm-alarmSampleType</span>

         <a name="risingAlarm-alarmValue.3333"/><span class="yang_kw">container</span> <span class="yang_id">risingAlarm-alarmValue</span> {

            <a name="alarmIndex.3334"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmValue.3342"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of the statistic during the last sampling
                  period.  For example, if the sample type is deltaValue,
                  this value will be the difference between the samples
                  at the beginning and end of the period.  If the sample
                  type is absoluteValue, this value will be the sampled
                  value at the end of the period.
                  
                  This is the value that is compared with the rising and
                  falling thresholds.
                  
                  The value during the current sampling period is not
                  made available until the period is completed and will
                  remain available until the next period completes."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.5"</span>;
            }
         }  <span class="yang_cmt">// container risingAlarm-alarmValue</span>

         <a name="risingAlarm-alarmRisingThreshold.3363"/><span class="yang_kw">container</span> <span class="yang_id">risingAlarm-alarmRisingThreshold</span> {

            <a name="alarmIndex.3364"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmRisingThreshold.3372"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmRisingThreshold</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold for the sampled statistic.  When the current
                  sampled value is greater than or equal to this threshold,
                  and the value at the last sampling interval was less than
                  this threshold, a single event will be generated.
                  A single event will also be generated if the first
                  sample after this entry becomes valid is greater than or
                  equal to this threshold and the associated
                  alarmStartupAlarm is equal to risingAlarm(1) or
                  risingOrFallingAlarm(3).
                  
                  After a rising event is generated, another such event
                  
                  will not be generated until the sampled value
                  falls below this threshold and reaches the
                  alarmFallingThreshold.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.7"</span>;
            }
         }  <span class="yang_cmt">// container risingAlarm-alarmRisingThreshold</span>
      }  <span class="yang_cmt">// notification risingAlarm</span>

      <a name="fallingAlarm.3400"/><span class="yang_kw">notification</span> <span class="yang_id">fallingAlarm</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"The SNMP trap that is generated when an alarm
            entry crosses its falling threshold and generates
            an event that is configured for sending SNMP
            traps."</span>;
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.0.2"</span>;

         <a name="fallingAlarm-alarmIndex.3408"/><span class="yang_kw">container</span> <span class="yang_id">fallingAlarm-alarmIndex</span> {

            <a name="alarmIndex.3409"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }
         }  <span class="yang_cmt">// container fallingAlarm-alarmIndex</span>

         <a name="fallingAlarm-alarmVariable.3419"/><span class="yang_kw">container</span> <span class="yang_id">fallingAlarm-alarmVariable</span> {

            <a name="alarmIndex.3420"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmVariable.3428"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmVariable</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the particular variable to be
                  sampled.  Only variables that resolve to an ASN.1 primitive
                  type of INTEGER (INTEGER, Integer32, Counter32, Counter64,
                  Gauge, or TimeTicks) may be sampled.
                  
                  Because SNMP access control is articulated entirely
                  in terms of the contents of MIB views, no access
                  control mechanism exists that can restrict the value of
                  this object to identify only those objects that exist
                  in a particular MIB view.  Because there is thus no
                  acceptable means of restricting the read access that
                  could be obtained through the alarm mechanism, the
                  probe must only grant write access to this object in
                  
                  those views that have read access to all objects on
                  the probe.
                  
                  During a set operation, if the supplied variable name is
                  not available in the selected MIB view, a badValue error
                  must be returned.  If at any time the variable name of
                  an established alarmEntry is no longer available in the
                  selected MIB view, the probe must change the status of
                  this alarmEntry to invalid(4).
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.3"</span>;
            }
         }  <span class="yang_cmt">// container fallingAlarm-alarmVariable</span>

         <a name="fallingAlarm-alarmSampleType.3462"/><span class="yang_kw">container</span> <span class="yang_id">fallingAlarm-alarmSampleType</span> {

            <a name="alarmIndex.3463"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmSampleType.3471"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmSampleType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"absoluteValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"deltaValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The method of sampling the selected variable and
                  calculating the value to be compared against the
                  thresholds.  If the value of this object is
                  absoluteValue(1), the value of the selected variable
                  will be compared directly with the thresholds at the
                  end of the sampling interval.  If the value of this
                  object is deltaValue(2), the value of the selected
                  variable at the last sample will be subtracted from
                  the current value, and the difference compared with
                  the thresholds.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.4"</span>;
            }
         }  <span class="yang_cmt">// container fallingAlarm-alarmSampleType</span>

         <a name="fallingAlarm-alarmValue.3495"/><span class="yang_kw">container</span> <span class="yang_id">fallingAlarm-alarmValue</span> {

            <a name="alarmIndex.3496"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmValue.3504"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of the statistic during the last sampling
                  period.  For example, if the sample type is deltaValue,
                  this value will be the difference between the samples
                  at the beginning and end of the period.  If the sample
                  type is absoluteValue, this value will be the sampled
                  value at the end of the period.
                  
                  This is the value that is compared with the rising and
                  falling thresholds.
                  
                  The value during the current sampling period is not
                  made available until the period is completed and will
                  remain available until the next period completes."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.5"</span>;
            }
         }  <span class="yang_cmt">// container fallingAlarm-alarmValue</span>

         <a name="fallingAlarm-alarmFallingThreshold.3525"/><span class="yang_kw">container</span> <span class="yang_id">fallingAlarm-alarmFallingThreshold</span> {

            <a name="alarmIndex.3526"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/rmon-mib:alarm/rmon-mib:alarmEntry/rmon-mib:alarmIndex"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="alarmFallingThreshold.3534"/><span class="yang_kw">leaf</span> <span class="yang_id">alarmFallingThreshold</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold for the sampled statistic.  When the current
                  sampled value is less than or equal to this threshold,
                  and the value at the last sampling interval was greater than
                  this threshold, a single event will be generated.
                  A single event will also be generated if the first
                  sample after this entry becomes valid is less than or
                  equal to this threshold and the associated
                  alarmStartupAlarm is equal to fallingAlarm(2) or
                  risingOrFallingAlarm(3).
                  
                  After a falling event is generated, another such event
                  will not be generated until the sampled value
                  rises above this threshold and reaches the
                  alarmRisingThreshold.
                  
                  This object may not be modified if the associated
                  alarmStatus object is equal to valid(1)."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.16.3.1.1.8"</span>;
            }
         }  <span class="yang_cmt">// container fallingAlarm-alarmFallingThreshold</span>
      }  <span class="yang_cmt">// notification fallingAlarm</span>
   }  <span class="yang_cmt">// module RMON-MIB</span>
</pre>
</div>
</div>