
<div>
   <h1 class="yang">DISMAN-EVENT-MIB.yang</h1>

   <ul id="nav">
      <li><a href="#">Typedefs</a>
         <ul>
            <li><a href="#FailureReason.50">FailureReason</a></li>
         </ul>
      </li>
      <li><a href="#">Objects</a>
         <ul>
            <li class="daddy"><a href="#mteResource.109">mteResource</a>
               <ul>
                  <li><a href="#mteResourceSampleMinimum.111">mteResourceSampleMinimum</a></li>
                  <li><a href="#mteResourceSampleInstanceMaximum.135">mteResourceSampleInstanceMaximum</a></li>
                  <li><a href="#mteResourceSampleInstances.160">mteResourceSampleInstances</a></li>
                  <li><a href="#mteResourceSampleInstancesHigh.170">mteResourceSampleInstancesHigh</a></li>
                  <li><a href="#mteResourceSampleInstanceLacks.180">mteResourceSampleInstanceLacks</a></li>
               </ul>
            </li>
            <li class="daddy"><a href="#mteTrigger.193">mteTrigger</a>
               <ul>
                  <li><a href="#mteTriggerFailures.195">mteTriggerFailures</a></li>
                  <li class="daddy"><a href="#mteTriggerEntry.212">mteTriggerEntry</a>
                     <ul>
                        <li><a href="#mteOwner.221">mteOwner</a></li>
                        <li><a href="#mteTriggerName.233">mteTriggerName</a></li>
                        <li><a href="#mteTriggerComment.244">mteTriggerComment</a></li>
                        <li><a href="#mteTriggerTest.253">mteTriggerTest</a></li>
                        <li><a href="#mteTriggerSampleType.292">mteTriggerSampleType</a></li>
                        <li><a href="#mteTriggerValueID.324">mteTriggerValueID</a></li>
                        <li><a href="#mteTriggerValueIDWildcard.359">mteTriggerValueIDWildcard</a></li>
                        <li><a href="#mteTriggerTargetTag.369">mteTriggerTargetTag</a></li>
                        <li><a href="#mteTriggerContextName.391">mteTriggerContextName</a></li>
                        <li><a href="#mteTriggerContextNameWildcard.420">mteTriggerContextNameWildcard</a></li>
                        <li><a href="#mteTriggerFrequency.430">mteTriggerFrequency</a></li>
                        <li><a href="#mteTriggerObjectsOwner.461">mteTriggerObjectsOwner</a></li>
                        <li><a href="#mteTriggerObjects.473">mteTriggerObjects</a></li>
                        <li><a href="#mteTriggerEnabled.493">mteTriggerEnabled</a></li>
                        <li><a href="#mteTriggerEntryStatus.503">mteTriggerEntryStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#mteTriggerDeltaEntry.517">mteTriggerDeltaEntry</a>
                     <ul>
                        <li><a href="#mteOwner.526">mteOwner</a></li>
                        <li><a href="#mteTriggerName.534">mteTriggerName</a></li>
                        <li><a href="#mteTriggerDeltaDiscontinuityID.543">mteTriggerDeltaDiscontinuityID</a></li>
                        <li><a href="#mteTriggerDeltaDiscontinuityIDWildcard.573">mteTriggerDeltaDiscontinuityIDWildcard</a></li>
                        <li><a href="#mteTriggerDeltaDiscontinuityIDType.589">mteTriggerDeltaDiscontinuityIDType</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#mteTriggerExistenceEntry.609">mteTriggerExistenceEntry</a>
                     <ul>
                        <li><a href="#mteOwner.618">mteOwner</a></li>
                        <li><a href="#mteTriggerName.626">mteTriggerName</a></li>
                        <li><a href="#mteTriggerExistenceTest.635">mteTriggerExistenceTest</a></li>
                        <li><a href="#mteTriggerExistenceStartup.663">mteTriggerExistenceStartup</a></li>
                        <li><a href="#mteTriggerExistenceObjectsOwner.678">mteTriggerExistenceObjectsOwner</a></li>
                        <li><a href="#mteTriggerExistenceObjects.690">mteTriggerExistenceObjects</a></li>
                        <li><a href="#mteTriggerExistenceEventOwner.709">mteTriggerExistenceEventOwner</a></li>
                        <li><a href="#mteTriggerExistenceEvent.721">mteTriggerExistenceEvent</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#mteTriggerBooleanEntry.738">mteTriggerBooleanEntry</a>
                     <ul>
                        <li><a href="#mteOwner.747">mteOwner</a></li>
                        <li><a href="#mteTriggerName.755">mteTriggerName</a></li>
                        <li><a href="#mteTriggerBooleanComparison.764">mteTriggerBooleanComparison</a></li>
                        <li><a href="#mteTriggerBooleanValue.786">mteTriggerBooleanValue</a></li>
                        <li><a href="#mteTriggerBooleanStartup.796">mteTriggerBooleanStartup</a></li>
                        <li><a href="#mteTriggerBooleanObjectsOwner.809">mteTriggerBooleanObjectsOwner</a></li>
                        <li><a href="#mteTriggerBooleanObjects.821">mteTriggerBooleanObjects</a></li>
                        <li><a href="#mteTriggerBooleanEventOwner.840">mteTriggerBooleanEventOwner</a></li>
                        <li><a href="#mteTriggerBooleanEvent.852">mteTriggerBooleanEvent</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#mteTriggerThresholdEntry.869">mteTriggerThresholdEntry</a>
                     <ul>
                        <li><a href="#mteOwner.878">mteOwner</a></li>
                        <li><a href="#mteTriggerName.886">mteTriggerName</a></li>
                        <li><a href="#mteTriggerThresholdStartup.895">mteTriggerThresholdStartup</a></li>
                        <li><a href="#mteTriggerThresholdRising.919">mteTriggerThresholdRising</a></li>
                        <li><a href="#mteTriggerThresholdFalling.942">mteTriggerThresholdFalling</a></li>
                        <li><a href="#mteTriggerThresholdDeltaRising.965">mteTriggerThresholdDeltaRising</a></li>
                        <li><a href="#mteTriggerThresholdDeltaFalling.990">mteTriggerThresholdDeltaFalling</a></li>
                        <li><a href="#mteTriggerThresholdObjectsOwner.1015">mteTriggerThresholdObjectsOwner</a></li>
                        <li><a href="#mteTriggerThresholdObjects.1027">mteTriggerThresholdObjects</a></li>
                        <li><a href="#mteTriggerThresholdRisingEventOwner.1048">mteTriggerThresholdRisingEventOwner</a></li>
                        <li><a href="#mteTriggerThresholdRisingEvent.1060">mteTriggerThresholdRisingEvent</a></li>
                        <li><a href="#mteTriggerThresholdFallingEventOwner.1073">mteTriggerThresholdFallingEventOwner</a></li>
                        <li><a href="#mteTriggerThresholdFallingEvent.1085">mteTriggerThresholdFallingEvent</a></li>
                        <li><a href="#mteTriggerThresholdDeltaRisingEventOwner.1098">mteTriggerThresholdDeltaRisingEventOwner</a></li>
                        <li><a href="#mteTriggerThresholdDeltaRisingEvent.1110">mteTriggerThresholdDeltaRisingEvent</a></li>
                        <li><a href="#mteTriggerThresholdDeltaFallingEventOwner.1124">mteTriggerThresholdDeltaFallingEventOwner</a></li>
                        <li><a href="#mteTriggerThresholdDeltaFallingEvent.1136">mteTriggerThresholdDeltaFallingEvent</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#mteObjects.1153">mteObjects</a>
               <ul>
                  <li class="daddy"><a href="#mteObjectsEntry.1158">mteObjectsEntry</a>
                     <ul>
                        <li><a href="#mteOwner.1170">mteOwner</a></li>
                        <li><a href="#mteObjectsName.1179">mteObjectsName</a></li>
                        <li><a href="#mteObjectsIndex.1190">mteObjectsIndex</a></li>
                        <li><a href="#mteObjectsID.1217">mteObjectsID</a></li>
                        <li><a href="#mteObjectsIDWildcard.1240">mteObjectsIDWildcard</a></li>
                        <li><a href="#mteObjectsEntryStatus.1250">mteObjectsEntryStatus</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#mteEvent.1263">mteEvent</a>
               <ul>
                  <li><a href="#mteEventFailures.1265">mteEventFailures</a></li>
                  <li class="daddy"><a href="#mteEventEntry.1279">mteEventEntry</a>
                     <ul>
                        <li><a href="#mteOwner.1287">mteOwner</a></li>
                        <li><a href="#mteEventName.1296">mteEventName</a></li>
                        <li><a href="#mteEventComment.1307">mteEventComment</a></li>
                        <li><a href="#mteEventActions.1316">mteEventActions</a></li>
                        <li><a href="#mteEventEnabled.1334">mteEventEnabled</a></li>
                        <li><a href="#mteEventEntryStatus.1347">mteEventEntryStatus</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#mteEventNotificationEntry.1361">mteEventNotificationEntry</a>
                     <ul>
                        <li><a href="#mteOwner.1370">mteOwner</a></li>
                        <li><a href="#mteEventName.1378">mteEventName</a></li>
                        <li><a href="#mteEventNotification.1387">mteEventNotification</a></li>
                        <li><a href="#mteEventNotificationObjectsOwner.1397">mteEventNotificationObjectsOwner</a></li>
                        <li><a href="#mteEventNotificationObjects.1409">mteEventNotificationObjects</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#mteEventSetEntry.1432">mteEventSetEntry</a>
                     <ul>
                        <li><a href="#mteOwner.1441">mteOwner</a></li>
                        <li><a href="#mteEventName.1449">mteEventName</a></li>
                        <li><a href="#mteEventSetObject.1458">mteEventSetObject</a></li>
                        <li><a href="#mteEventSetObjectWildcard.1490">mteEventSetObjectWildcard</a></li>
                        <li><a href="#mteEventSetValue.1501">mteEventSetValue</a></li>
                        <li><a href="#mteEventSetTargetTag.1511">mteEventSetTargetTag</a></li>
                        <li><a href="#mteEventSetContextName.1535">mteEventSetContextName</a></li>
                        <li><a href="#mteEventSetContextNameWildcard.1552">mteEventSetContextNameWildcard</a></li>
                     </ul>
                  </li>
               </ul>
            </li>
            <li class="daddy"><a href="#dismanEventMIBNotificationObjects.1566">dismanEventMIBNotificationObjects</a>
               <ul>
                  <li><a href="#mteHotTrigger.1568">mteHotTrigger</a></li>
                  <li><a href="#mteHotTargetName.1576">mteHotTargetName</a></li>
                  <li><a href="#mteHotContextName.1585">mteHotContextName</a></li>
                  <li><a href="#mteHotOID.1595">mteHotOID</a></li>
                  <li><a href="#mteHotValue.1611">mteHotValue</a></li>
                  <li><a href="#mteFailedReason.1620">mteFailedReason</a></li>
               </ul>
            </li>
         </ul>
      </li>
      <li><a href="#">Notifications</a>
         <ul>
            <li><a href="#mteTriggerFired.1631">mteTriggerFired</a></li>
            <li><a href="#mteTriggerRising.1702">mteTriggerRising</a></li>
            <li><a href="#mteTriggerFalling.1772">mteTriggerFalling</a></li>
            <li><a href="#mteTriggerFailure.1842">mteTriggerFailure</a></li>
            <li><a href="#mteEventSetFailure.1917">mteEventSetFailure</a></li>
         </ul>
      </li>
   </ul>

<br />
<div class="yang">
<pre>

   <span class="yang_kw">module</span> <span class="yang_id">DISMAN-EVENT-MIB</span> {

      <span class="yang_kw">yang-version</span> <span class="yang_str">1</span>;

      <span class="yang_kw">namespace</span>
         <span class="yang_str">"urn:ietf:params:xml:ns:yang:smiv2:DISMAN-EVENT-MIB"</span>;

      <span class="yang_kw">prefix</span> <span class="yang_str">"disman-event"</span>;

      <span class="yang_kw">import</span> <a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14">SNMP-FRAMEWORK-MIB</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"snmp-framework"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/SNMP-TARGET-MIB/2002-10-14">SNMP-TARGET-MIB</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"snmp-target"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/SNMPv2-MIB/2002-10-16">SNMPv2-MIB</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"snmpv2-mib"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/SNMPv2-TC/1999-04-01">SNMPv2-TC</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"smiv2"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/yang-smi/2008-03-20">yang-smi</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"smi"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/yang-types/2007-10-02">yang-types</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"yang"</span>;
      }

      <span class="yang_kw">organization</span>
         <span class="yang_str">"IETF Distributed Management Working Group"</span>;

      <span class="yang_kw">contact</span>
         <span class="yang_str">"Ramanathan Kavasseri
         Cisco Systems, Inc.
         170 West Tasman Drive,
         San Jose CA 95134-1706.
         Phone: +1 408 526 4527
         Email: ramk@cisco.com"</span>;

      <span class="yang_kw">description</span>
         <span class="yang_str">"The MIB module for defining event triggers and actions
         for network management purposes."</span>;

      <span class="yang_kw">revision</span> <span class="yang_str">"2000-10-16"</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"This is the initial version of this MIB.
            Published as RFC 2981"</span>;
      }

      <a name="FailureReason.50"/><span class="yang_kw">typedef</span> <span class="yang_id">FailureReason</span> {
         <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
            <span class="yang_kw">enum</span> <span class="yang_str">"sampleOverrun"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">-6</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"badType"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">-5</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"noResponse"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">-4</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"destinationUnreachable"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">-3</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"badDestination"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">-2</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"localResourceLack"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">-1</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"noError"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">0</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"tooBig"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">1</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"noSuchName"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">2</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"badValue"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">3</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"readOnly"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">4</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"genErr"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">5</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"noAccess"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">6</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"wrongType"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">7</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"wrongLength"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">8</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"wrongEncoding"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">9</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"wrongValue"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">10</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"noCreation"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">11</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"inconsistentValue"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">12</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"resourceUnavailable"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">13</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"commitFailed"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">14</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"undoFailed"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">15</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"authorizationError"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">16</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"notWritable"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">17</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"inconsistentName"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">18</span>;
            }
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Reasons for failures in an attempt to perform a management
            request.
            
            The first group of errors, numbered less than 0, are related
            to problems in sending the request.  The existence of a
            particular error code here does not imply that all
            implementations are capable of sensing that error and
            
            
            returning that code.
            
            The second group, numbered greater than 0, are copied
            directly from SNMP protocol operations and are intended to
            carry exactly the meanings defined for the protocol as returned
            in an SNMP response.
            
            localResourceLack       some local resource such as memory
            			lacking or
            			mteResourceSampleInstanceMaximum
            			exceeded
            badDestination          unrecognized domain name or otherwise
            			invalid destination address
            destinationUnreachable  can't get to destination address
            noResponse              no response to SNMP request
            badType                 the data syntax of a retrieved object
            			as not as expected
            sampleOverrun           another sample attempt occurred before
            			the previous one completed"</span>;
      }

      <a name="mteResource.109"/><span class="yang_kw">container</span> <span class="yang_id">mteResource</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.1"</span>;
         <a name="mteResourceSampleMinimum.111"/><span class="yang_kw">leaf</span> <span class="yang_id">mteResourceSampleMinimum</span> {
            <span class="yang_kw">type</span> <span class="yang_id">int32</span> {
               <span class="yang_kw">range</span> <span class="yang_str">"1..2147483647"</span>;
            }
            <span class="yang_kw">units</span> <span class="yang_str">"seconds"</span>;
            <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The minimum mteTriggerFrequency this system will
               accept.  A system may use the larger values of this minimum to
               lessen the impact of constant sampling.  For larger
               sampling intervals the system samples less often and
               suffers less overhead.  This object provides a way to enforce
               such lower overhead for all triggers created after it is
               set.
               
               Unless explicitly resource limited, a system's value for
               this object SHOULD be 1, allowing as small as a 1 second
               interval for ongoing trigger sampling.
               
               Changing this value will not invalidate an existing setting
               of mteTriggerFrequency."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.1.1"</span>;
         }

         <a name="mteResourceSampleInstanceMaximum.135"/><span class="yang_kw">leaf</span> <span class="yang_id">mteResourceSampleInstanceMaximum</span> {
            <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
            <span class="yang_kw">units</span> <span class="yang_str">"instances"</span>;
            <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The maximum number of instance entries this system will
               support for sampling.
               
               These are the entries that maintain state, one for each
               instance of each sampled object as selected by
               mteTriggerValueID.  Note that wildcarded objects result
               in multiple instances of this state.
               
               A value of 0 indicates no preset limit, that is, the limit
               is dynamic based on system operation and resources.
               
               Unless explicitly resource limited, a system's value for
               this object SHOULD be 0.
               
               Changing this value will not eliminate or inhibit existing
               sample state but could prevent allocation of additional state
               information."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.1.2"</span>;
         }

         <a name="mteResourceSampleInstances.160"/><span class="yang_kw">leaf</span> <span class="yang_id">mteResourceSampleInstances</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#gauge32.99">yang:gauge32</a></span>;
            <span class="yang_kw">units</span> <span class="yang_str">"instances"</span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The number of currently active instance entries as
               defined for mteResourceSampleInstanceMaximum."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.1.3"</span>;
         }

         <a name="mteResourceSampleInstancesHigh.170"/><span class="yang_kw">leaf</span> <span class="yang_id">mteResourceSampleInstancesHigh</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#gauge32.99">yang:gauge32</a></span>;
            <span class="yang_kw">units</span> <span class="yang_str">"instances"</span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The highest value of mteResourceSampleInstances that has
               occurred since initialization of the management system."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.1.4"</span>;
         }

         <a name="mteResourceSampleInstanceLacks.180"/><span class="yang_kw">leaf</span> <span class="yang_id">mteResourceSampleInstanceLacks</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
            <span class="yang_kw">units</span> <span class="yang_str">"instances"</span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The number of times this system could not take a new sample
               because that allocation would have exceeded the limit set by
               mteResourceSampleInstanceMaximum."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.1.5"</span>;
         }
      }  <span class="yang_cmt">// container mteResource</span>

      <a name="mteTrigger.193"/><span class="yang_kw">container</span> <span class="yang_id">mteTrigger</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2"</span>;
         <a name="mteTriggerFailures.195"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerFailures</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
            <span class="yang_kw">units</span> <span class="yang_str">"failures"</span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The number of times an attempt to check for a trigger
               condition has failed.  This counts individually for each
               attempt in a group of targets or each attempt for a
               
               
               wildcarded object."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.1"</span>;
         }

         <a name="mteTriggerEntry.212"/><span class="yang_kw">list</span> <span class="yang_id">mteTriggerEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.221">mteOwner</a>, <a href="#mteTriggerName.233">mteTriggerName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single trigger.  Applications create and
               delete entries using mteTriggerEntryStatus."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1"</span>;
            <a name="mteOwner.221"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The owner of this entry. The exact semantics of this
                  string are subject to the security policy defined by the
                  security administrator."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.1"</span>;
            }

            <a name="mteTriggerName.233"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"1..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A locally-unique, administratively assigned name for the
                  trigger within the scope of mteOwner."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.2"</span>;
            }

            <a name="mteTriggerComment.244"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerComment</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A description of the trigger's function and use."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.3"</span>;
            }

            <a name="mteTriggerTest.253"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerTest</span> {
               <span class="yang_kw">type</span> <span class="yang_id">bits</span> {
                  <span class="yang_kw">bit</span> <span class="yang_str">"existence"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">0</span>;
                  }
                  <span class="yang_kw">bit</span> <span class="yang_str">"boolean"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">bit</span> <span class="yang_str">"threshold"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The type of trigger test to perform.  For 'boolean' and
                  'threshold'  tests, the object at mteTriggerValueID MUST
                  evaluate to an integer, that is, anything that ends up encoded
                  for transmission (that is, in BER, not ASN.1) as an integer.
                  
                  For 'existence', the specific test is as selected by
                  mteTriggerExistenceTest.  When an object appears, vanishes
                  or changes value, the trigger fires. If the object's
                  appearance caused the trigger firing, the object MUST
                  vanish before the trigger can be fired again for it, and
                  vice versa. If the trigger fired due to a change in the
                  object's value, it will be fired again on every successive
                  value change for that object.
                  
                  For 'boolean', the specific test is as selected by
                  mteTriggerBooleanTest.  If the test result is true the trigger
                  fires.  The trigger will not fire again until the value has
                  become false and come back to true.
                  
                  For 'threshold' the test works as described below for
                  
                  
                  mteTriggerThresholdStartup, mteTriggerThresholdRising, and
                  mteTriggerThresholdFalling.
                  
                  Note that combining 'boolean' and 'threshold' tests on the
                  same object may be somewhat redundant."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"6)"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.4"</span>;
            }

            <a name="mteTriggerSampleType.292"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerSampleType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"absoluteValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"deltaValue"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The type of sampling to perform.
                  
                  An 'absoluteValue' sample requires only a single sample to be
                  meaningful, and is exactly the value of the object at
                  mteTriggerValueID at the sample time.
                  
                  A 'deltaValue' requires two samples to be meaningful and is
                  thus not available for testing until the second and subsequent
                  samples after the object at mteTriggerValueID is first found
                  to exist.  It is the difference between the two samples.  For
                  unsigned values it is always positive, based on unsigned
                  arithmetic.  For signed values it can be positive or negative.
                  
                  For SNMP counters to be meaningful they should be sampled as a
                  'deltaValue'.
                  
                  For 'deltaValue' mteTriggerDeltaTable contains further
                  parameters.
                  
                  If only 'existence' is set in mteTriggerTest this object has
                  no meaning."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"absoluteValue"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.5"</span>;
            }

            <a name="mteTriggerValueID.324"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerValueID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the MIB object to sample to see
                  if the trigger should fire.
                  
                  This may be wildcarded by truncating all or part of the
                  instance portion, in which case the value is obtained
                  as if with a GetNext function, checking multiple values
                  
                  
                  if they exist.  If such wildcarding is applied,
                  mteTriggerValueIDWildcard must be 'true' and if not it must
                  be 'false'.
                  
                  Bad object identifiers or a mismatch between truncating the
                  identifier and the value of mteTriggerValueIDWildcard result
                  in operation as one would expect when providing the wrong
                  identifier to a Get or GetNext operation.  The Get will fail
                  or get the wrong object.  The GetNext will indeed get whatever
                  is next, proceeding until it runs past the initial part of the
                  identifier and perhaps many unintended objects for confusing
                  results.  If the value syntax of those objects is not usable,
                  that results in a 'badType' error that terminates the scan.
                  
                  Each instance that fills the wildcard is independent of any
                  additional instances, that is, wildcarded objects operate
                  as if there were a separate table entry for each instance
                  that fills the wildcard without having to actually predict
                  all possible instances ahead of time."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"zeroDotZero"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.6"</span>;
            }

            <a name="mteTriggerValueIDWildcard.359"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerValueIDWildcard</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control for whether mteTriggerValueID is to be treated as
                  fully-specified or wildcarded, with 'true' indicating wildcard."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.7"</span>;
            }

            <a name="mteTriggerTargetTag.369"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerTargetTag</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-TARGET-MIB/2002-10-14#SnmpTagValue.96">snmp-target:SnmpTagValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The tag for the target(s) from which to obtain the condition
                  for a trigger check.
                  
                  A length of 0 indicates the local system.  In this case,
                  access to the objects indicated by mteTriggerValueID is under
                  the security credentials of the requester that set
                  mteTriggerEntryStatus to 'active'.  Those credentials are the
                  input parameters for isAccessAllowed from the Architecture for
                  Describing SNMP Management Frameworks.
                  
                  Otherwise access rights are checked according to the security
                  
                  
                  parameters resulting from the tag."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.8"</span>;
            }

            <a name="mteTriggerContextName.391"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerContextName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The management context from which to obtain mteTriggerValueID.
                  
                  This may be wildcarded by leaving characters off the end.  For
                  example use 'Repeater' to wildcard to 'Repeater1',
                  'Repeater2', 'Repeater-999.87b', and so on.  To indicate such
                  wildcarding is intended, mteTriggerContextNameWildcard must
                  be 'true'.
                  
                  Each instance that fills the wildcard is independent of any
                  additional instances, that is, wildcarded objects operate
                  as if there were a separate table entry for each instance
                  that fills the wildcard without having to actually predict
                  all possible instances ahead of time.
                  
                  Operation of this feature assumes that the local system has a
                  list of available contexts against which to apply the
                  wildcard.  If the objects are being read from the local
                  system, this is clearly the system's own list of contexts.
                  For a remote system a local version of such a list is not
                  defined by any current standard and may not be available, so
                  this function MAY not be supported."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.9"</span>;
            }

            <a name="mteTriggerContextNameWildcard.420"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerContextNameWildcard</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control for whether mteTriggerContextName is to be treated as
                  fully-specified or wildcarded, with 'true' indicating wildcard."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.10"</span>;
            }

            <a name="mteTriggerFrequency.430"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerFrequency</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"seconds"</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The number of seconds to wait between trigger samples.  To
                  encourage consistency in sampling, the interval is measured
                  from the beginning of one check to the beginning of the next
                  and the timer is restarted immediately when it expires, not
                  when the check completes.
                  
                  If the next sample begins before the previous one completed the
                  system may either attempt to make the check or treat this as an
                  error condition with the error 'sampleOverrun'.
                  
                  A frequency of 0 indicates instantaneous recognition of the
                  condition.  This is not possible in many cases, but may
                  be supported in cases where it makes sense and the system is
                  able to do so.  This feature allows the MIB to be used in
                  implementations where such interrupt-driven behavior is
                  possible and is not likely to be supported for all MIB objects
                  even then since such sampling generally has to be tightly
                  integrated into low-level code.
                  
                  Systems that can support this SHOULD document those cases
                  where it can be used.  In cases where it can not, setting this
                  object to 0 should be disallowed."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"600"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.11"</span>;
            }

            <a name="mteTriggerObjectsOwner.461"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerObjectsOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerObjects, the mteOwner of a group of
                  objects from mteObjectsTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.12"</span>;
            }

            <a name="mteTriggerObjects.473"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerObjects</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteObjectsName of a group of objects from
                  mteObjectsTable.  These objects are to be added to any
                  Notification resulting from the firing of this trigger.
                  
                  A list of objects may also be added based on the event or on
                  the value of mteTriggerTest.
                  
                  
                  
                  A length of 0 indicates no additional objects."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.13"</span>;
            }

            <a name="mteTriggerEnabled.493"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerEnabled</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A control to allow a trigger to be configured but not used.
                  When the value is 'false' the trigger is not sampled."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.14"</span>;
            }

            <a name="mteTriggerEntryStatus.503"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerEntryStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#RowStatus.183">smiv2:RowStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The control that allows creation and deletion of entries.
                  Once made active an entry may not be modified except to
                  delete it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.2.1.15"</span>;
            }
         }  <span class="yang_cmt">// list mteTriggerEntry</span>

         <a name="mteTriggerDeltaEntry.517"/><span class="yang_kw">list</span> <span class="yang_id">mteTriggerDeltaEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.526">mteOwner</a>, <a href="#mteTriggerName.534">mteTriggerName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single trigger's delta sampling.  Entries
               automatically exist in this this table for each mteTriggerEntry
               that has mteTriggerSampleType set to 'deltaValue'."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.3.1"</span>;
            <a name="mteOwner.526"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerName.534"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerName</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteTriggerName"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerDeltaDiscontinuityID.543"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerDeltaDiscontinuityID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The OBJECT IDENTIFIER (OID) of a TimeTicks, TimeStamp, or
                  DateAndTime object that indicates a discontinuity in the value
                  at mteTriggerValueID.
                  
                  The OID may be for a leaf object (e.g. sysUpTime.0) or may
                  be wildcarded to match mteTriggerValueID.
                  
                  This object supports normal checking for a discontinuity in a
                  counter.  Note that if this object does not point to sysUpTime
                  discontinuity checking MUST still check sysUpTime for an overall
                  discontinuity.
                  
                  If the object identified is not accessible the sample attempt
                  is in error, with the error code as from an SNMP request.
                  
                  Bad object identifiers or a mismatch between truncating the
                  identifier and the value of mteDeltaDiscontinuityIDWildcard
                  result in operation as one would expect when providing the
                  wrong identifier to a Get operation.  The Get will fail or get
                  the wrong object.  If the value syntax of those objects is not
                  usable, that results in an error that terminates the sample
                  with a 'badType' error code."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"sysUpTimeInstance"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.3.1.1"</span>;
            }

            <a name="mteTriggerDeltaDiscontinuityIDWildcard.573"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerDeltaDiscontinuityIDWildcard</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control for whether mteTriggerDeltaDiscontinuityID is to be
                  treated as fully-specified or wildcarded, with 'true'
                  indicating wildcard. Note that the value of this object will
                  be the same as that of the corresponding instance of
                  mteTriggerValueIDWildcard when the corresponding
                  
                  
                  mteTriggerSampleType is 'deltaValue'."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.3.1.2"</span>;
            }

            <a name="mteTriggerDeltaDiscontinuityIDType.589"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerDeltaDiscontinuityIDType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"timeTicks"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"timeStamp"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"dateAndTime"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value 'timeTicks' indicates the
                  mteTriggerDeltaDiscontinuityID of this row is of syntax
                  TimeTicks.  The value 'timeStamp' indicates syntax TimeStamp.
                  The value 'dateAndTime' indicates syntax DateAndTime."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"timeTicks"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.3.1.3"</span>;
            }
         }  <span class="yang_cmt">// list mteTriggerDeltaEntry</span>

         <a name="mteTriggerExistenceEntry.609"/><span class="yang_kw">list</span> <span class="yang_id">mteTriggerExistenceEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.618">mteOwner</a>, <a href="#mteTriggerName.626">mteTriggerName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single existence trigger.  Entries
               automatically exist in this this table for each mteTriggerEntry
               that has 'existence' set in mteTriggerTest."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.4.1"</span>;
            <a name="mteOwner.618"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerName.626"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerName</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteTriggerName"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerExistenceTest.635"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerExistenceTest</span> {
               <span class="yang_kw">type</span> <span class="yang_id">bits</span> {
                  <span class="yang_kw">bit</span> <span class="yang_str">"present"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">0</span>;
                  }
                  <span class="yang_kw">bit</span> <span class="yang_str">"absent"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">bit</span> <span class="yang_str">"changed"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">2</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The type of existence test to perform.  The trigger fires
                  when the object at mteTriggerValueID is seen to go from
                  present to absent, from absent to present, or to have it's
                  value changed, depending on which tests are selected:
                  
                  present(0) - when this test is selected, the trigger fires
                  when the mteTriggerValueID object goes from absent to present.
                  
                  absent(1)  - when this test is selected, the trigger fires
                  when the mteTriggerValueID object goes from present to absent.
                  changed(2) - when this test is selected, the trigger fires
                  the mteTriggerValueID object value changes.
                  
                  Once the trigger has fired for either presence or absence it
                  will not fire again for that state until the object has been
                  to the other state. "</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"7)"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.4.1.1"</span>;
            }

            <a name="mteTriggerExistenceStartup.663"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerExistenceStartup</span> {
               <span class="yang_kw">type</span> <span class="yang_id">bits</span> {
                  <span class="yang_kw">bit</span> <span class="yang_str">"present"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">0</span>;
                  }
                  <span class="yang_kw">bit</span> <span class="yang_str">"absent"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">1</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control for whether an event may be triggered when this entry
                  is first set to 'active' and the test specified by
                  mteTriggerExistenceTest is true.  Setting an option causes
                  that trigger to fire when its test is true."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"7)"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.4.1.2"</span>;
            }

            <a name="mteTriggerExistenceObjectsOwner.678"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerExistenceObjectsOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerExistenceObjects, the mteOwner of a
                  group of objects from mteObjectsTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.4.1.3"</span>;
            }

            <a name="mteTriggerExistenceObjects.690"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerExistenceObjects</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteObjectsName of a group of objects from
                  mteObjectsTable.  These objects are to be added to any
                  Notification resulting from the firing of this trigger for
                  this test.
                  
                  A list of objects may also be added based on the overall
                  trigger, the event or other settings in mteTriggerTest.
                  
                  A length of 0 indicates no additional objects."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.4.1.4"</span>;
            }

            <a name="mteTriggerExistenceEventOwner.709"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerExistenceEventOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerExistenceEvent, the mteOwner of an event
                  entry from the mteEventTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.4.1.5"</span>;
            }

            <a name="mteTriggerExistenceEvent.721"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerExistenceEvent</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteEventName of the event to invoke when mteTriggerType is
                  'existence' and this trigger fires.  A length of 0 indicates no
                  event."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.4.1.6"</span>;
            }
         }  <span class="yang_cmt">// list mteTriggerExistenceEntry</span>

         <a name="mteTriggerBooleanEntry.738"/><span class="yang_kw">list</span> <span class="yang_id">mteTriggerBooleanEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.747">mteOwner</a>, <a href="#mteTriggerName.755">mteTriggerName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single boolean trigger.  Entries
               automatically exist in this this table for each mteTriggerEntry
               that has 'boolean' set in mteTriggerTest."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1"</span>;
            <a name="mteOwner.747"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerName.755"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerName</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteTriggerName"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerBooleanComparison.764"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerBooleanComparison</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"unequal"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"equal"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"less"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"lessOrEqual"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">4</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"greater"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">5</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"greaterOrEqual"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">6</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The type of boolean comparison to perform.
                  
                  The value at mteTriggerValueID is compared to
                  mteTriggerBooleanValue, so for example if
                  mteTriggerBooleanComparison is 'less' the result would be true
                  if the value at mteTriggerValueID is less than the value of
                  mteTriggerBooleanValue."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"unequal"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1.1"</span>;
            }

            <a name="mteTriggerBooleanValue.786"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerBooleanValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value to use for the test specified by
                  mteTriggerBooleanTest."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1.2"</span>;
            }

            <a name="mteTriggerBooleanStartup.796"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerBooleanStartup</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control for whether an event may be triggered when this entry
                  is first set to 'active' or a new instance of the object at
                  mteTriggerValueID is found and the test specified by
                  mteTriggerBooleanComparison is true.  In that case an event is
                  triggered if mteTriggerBooleanStartup is 'true'."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"true"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1.3"</span>;
            }

            <a name="mteTriggerBooleanObjectsOwner.809"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerBooleanObjectsOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerBooleanObjects, the mteOwner of a group
                  of objects from mteObjectsTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1.4"</span>;
            }

            <a name="mteTriggerBooleanObjects.821"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerBooleanObjects</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteObjectsName of a group of objects from
                  mteObjectsTable.  These objects are to be added to any
                  Notification resulting from the firing of this trigger for
                  this test.
                  
                  A list of objects may also be added based on the overall
                  trigger, the event or other settings in mteTriggerTest.
                  
                  A length of 0 indicates no additional objects."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1.5"</span>;
            }

            <a name="mteTriggerBooleanEventOwner.840"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerBooleanEventOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerBooleanEvent, the mteOwner of an event
                  entry from mteEventTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1.6"</span>;
            }

            <a name="mteTriggerBooleanEvent.852"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerBooleanEvent</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteEventName of the event to invoke when mteTriggerType is
                  'boolean' and this trigger fires.  A length of 0 indicates no
                  event."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.5.1.7"</span>;
            }
         }  <span class="yang_cmt">// list mteTriggerBooleanEntry</span>

         <a name="mteTriggerThresholdEntry.869"/><span class="yang_kw">list</span> <span class="yang_id">mteTriggerThresholdEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.878">mteOwner</a>, <a href="#mteTriggerName.886">mteTriggerName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single threshold trigger.  Entries
               automatically exist in this table for each mteTriggerEntry
               that has 'threshold' set in mteTriggerTest."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1"</span>;
            <a name="mteOwner.878"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerName.886"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerName</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteTriggerName"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteTriggerThresholdStartup.895"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdStartup</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"rising"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"falling"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"risingOrFalling"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The event that may be triggered when this entry is first
                  set to 'active' and a new instance of the object at
                  mteTriggerValueID is found.  If the first sample after this
                  instance becomes active is greater than or equal to
                  mteTriggerThresholdRising and mteTriggerThresholdStartup is
                  equal to 'rising' or 'risingOrFalling', then one
                  mteTriggerThresholdRisingEvent is triggered for that instance.
                  If the first sample after this entry becomes active is less
                  than or equal to mteTriggerThresholdFalling and
                  mteTriggerThresholdStartup is equal to 'falling' or
                  'risingOrFalling', then one mteTriggerThresholdRisingEvent is
                  triggered for that instance."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"risingOrFalling"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.1"</span>;
            }

            <a name="mteTriggerThresholdRising.919"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdRising</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold value to check against if mteTriggerType is
                  'threshold'.
                  
                  When the current sampled value is greater than or equal to
                  this threshold, and the value at the last sampling interval
                  was less than this threshold, one
                  mteTriggerThresholdRisingEvent is triggered.  That event is
                  also triggered if the first sample after this entry becomes
                  active is greater than or equal to this threshold and
                  mteTriggerThresholdStartup is equal to 'rising' or
                  'risingOrFalling'.
                  
                  After a rising event is generated, another such event is not
                  triggered until the sampled value falls below this threshold
                  and reaches mteTriggerThresholdFalling."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.2"</span>;
            }

            <a name="mteTriggerThresholdFalling.942"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdFalling</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold value to check against if mteTriggerType is
                  'threshold'.
                  
                  When the current sampled value is less than or equal to this
                  threshold, and the value at the last sampling interval was
                  greater than this threshold, one
                  mteTriggerThresholdFallingEvent is triggered.  That event is
                  also triggered if the first sample after this entry becomes
                  active is less than or equal to this threshold and
                  mteTriggerThresholdStartup is equal to 'falling' or
                  'risingOrFalling'.
                  
                  After a falling event is generated, another such event is not
                  triggered until the sampled value rises above this threshold
                  and reaches mteTriggerThresholdRising."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.3"</span>;
            }

            <a name="mteTriggerThresholdDeltaRising.965"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdDeltaRising</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold value to check against if mteTriggerType is
                  'threshold'.
                  
                  When the delta value (difference) between the current sampled
                  value (value(n)) and the previous sampled value (value(n-1))
                  is greater than or equal to this threshold,
                  and the delta value calculated at the last sampling interval
                  (i.e. value(n-1) - value(n-2)) was less than this threshold,
                  one mteTriggerThresholdDeltaRisingEvent is triggered. That event
                  is also triggered if the first delta value calculated after this
                  entry becomes active, i.e. value(2) - value(1), where value(1)
                  is the first sample taken of that instance, is greater than or
                  equal to this threshold.
                  
                  After a rising event is generated, another such event is not
                  triggered until the delta value falls below this threshold and
                  reaches mteTriggerThresholdDeltaFalling."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.4"</span>;
            }

            <a name="mteTriggerThresholdDeltaFalling.990"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdDeltaFalling</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A threshold value to check against if mteTriggerType is
                  'threshold'.
                  
                  When the delta value (difference) between the current sampled
                  value (value(n)) and the previous sampled value (value(n-1))
                  is less than or equal to this threshold,
                  and the delta value calculated at the last sampling interval
                  (i.e. value(n-1) - value(n-2)) was greater than this threshold,
                  one mteTriggerThresholdDeltaFallingEvent is triggered. That event
                  is also triggered if the first delta value calculated after this
                  entry becomes active, i.e. value(2) - value(1), where value(1)
                  is the first sample taken of that instance, is less than or
                  equal to this threshold.
                  
                  After a falling event is generated, another such event is not
                  triggered until the delta value falls below this threshold and
                  reaches mteTriggerThresholdDeltaRising."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.5"</span>;
            }

            <a name="mteTriggerThresholdObjectsOwner.1015"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdObjectsOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerThresholdObjects, the mteOwner of a group
                  of objects from mteObjectsTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.6"</span>;
            }

            <a name="mteTriggerThresholdObjects.1027"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdObjects</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteObjectsName of a group of objects from
                  mteObjectsTable.  These objects are to be added to any
                  Notification resulting from the firing of this trigger for
                  this test.
                  
                  A list of objects may also be added based on the overall
                  
                  
                  trigger, the event or other settings in mteTriggerTest.
                  
                  A length of 0 indicates no additional objects."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.7"</span>;
            }

            <a name="mteTriggerThresholdRisingEventOwner.1048"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdRisingEventOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerThresholdRisingEvent, the mteOwner of an
                  event entry from mteEventTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.8"</span>;
            }

            <a name="mteTriggerThresholdRisingEvent.1060"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdRisingEvent</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteEventName of the event to invoke when mteTriggerType is
                  'threshold' and this trigger fires based on
                  mteTriggerThresholdRising.  A length of 0 indicates no event."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.9"</span>;
            }

            <a name="mteTriggerThresholdFallingEventOwner.1073"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdFallingEventOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerThresholdFallingEvent, the mteOwner of an
                  event entry from mteEventTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.10"</span>;
            }

            <a name="mteTriggerThresholdFallingEvent.1085"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdFallingEvent</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteEventName of the event to invoke when mteTriggerType is
                  'threshold' and this trigger fires based on
                  mteTriggerThresholdFalling.  A length of 0 indicates no event."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.11"</span>;
            }

            <a name="mteTriggerThresholdDeltaRisingEventOwner.1098"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdDeltaRisingEventOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerThresholdDeltaRisingEvent, the mteOwner
                  of an event entry from mteEventTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.12"</span>;
            }

            <a name="mteTriggerThresholdDeltaRisingEvent.1110"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdDeltaRisingEvent</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteEventName of the event to invoke when mteTriggerType is
                  'threshold' and this trigger fires based on
                  mteTriggerThresholdDeltaRising. A length of 0 indicates
                  no event."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.13"</span>;
            }

            <a name="mteTriggerThresholdDeltaFallingEventOwner.1124"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdDeltaFallingEventOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteTriggerThresholdDeltaFallingEvent, the mteOwner
                  of an event entry from mteEventTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.14"</span>;
            }

            <a name="mteTriggerThresholdDeltaFallingEvent.1136"/><span class="yang_kw">leaf</span> <span class="yang_id">mteTriggerThresholdDeltaFallingEvent</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteEventName of the event to invoke when mteTriggerType is
                  'threshold' and this trigger fires based on
                  mteTriggerThresholdDeltaFalling.  A length of 0 indicates
                  no event."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.2.6.1.15"</span>;
            }
         }  <span class="yang_cmt">// list mteTriggerThresholdEntry</span>
      }  <span class="yang_cmt">// container mteTrigger</span>

      <a name="mteObjects.1153"/><span class="yang_kw">container</span> <span class="yang_id">mteObjects</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.3"</span>;
         <a name="mteObjectsEntry.1158"/><span class="yang_kw">list</span> <span class="yang_id">mteObjectsEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.1170">mteOwner</a>, <a href="#mteObjectsName.1179">mteObjectsName</a>, <a href="#mteObjectsIndex.1190">mteObjectsIndex</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"A group of objects.  Applications create and delete entries
               using mteObjectsEntryStatus.
               
               When adding objects to a notification they are added in the
               lexical order of their index in this table.  Those associated
               with a trigger come first, then trigger test, then event."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.3.1.1"</span>;
            <a name="mteOwner.1170"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteObjectsName.1179"/><span class="yang_kw">leaf</span> <span class="yang_id">mteObjectsName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"1..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A locally-unique, administratively assigned name for a group
                  of objects."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.3.1.1.1"</span>;
            }

            <a name="mteObjectsIndex.1190"/><span class="yang_kw">leaf</span> <span class="yang_id">mteObjectsIndex</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span> {
                  <span class="yang_kw">range</span> <span class="yang_str">"1..4294967295"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"An arbitrary integer for the purpose of identifying
                  individual objects within a mteObjectsName group.
                  
                  
                  Objects within a group are placed in the notification in the
                  numerical order of this index.
                  
                  Groups are placed in the notification in the order of the
                  selections for overall trigger, trigger test, and event.
                  Within trigger test they are in the same order as the
                  numerical values of the bits defined for mteTriggerTest.
                  
                  Bad object identifiers or a mismatch between truncating the
                  identifier and the value of mteDeltaDiscontinuityIDWildcard
                  result in operation as one would expect when providing the
                  wrong identifier to a Get operation.  The Get will fail or get
                  the wrong object.  If the object is not available it is omitted
                  from the notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.3.1.1.2"</span>;
            }

            <a name="mteObjectsID.1217"/><span class="yang_kw">leaf</span> <span class="yang_id">mteObjectsID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of a MIB object to add to a
                  Notification that results from the firing of a trigger.
                  
                  This may be wildcarded by truncating all or part of the
                  instance portion, in which case the instance portion of the
                  OID for obtaining this object will be the same as that used
                  in obtaining the mteTriggerValueID that fired.  If such
                  wildcarding is applied, mteObjectsIDWildcard must be
                  'true' and if not it must be 'false'.
                  
                  Each instance that fills the wildcard is independent of any
                  additional instances, that is, wildcarded objects operate
                  as if there were a separate table entry for each instance
                  that fills the wildcard without having to actually predict
                  all possible instances ahead of time."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"zeroDotZero"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.3.1.1.3"</span>;
            }

            <a name="mteObjectsIDWildcard.1240"/><span class="yang_kw">leaf</span> <span class="yang_id">mteObjectsIDWildcard</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control for whether mteObjectsID is to be treated as
                  fully-specified or wildcarded, with 'true' indicating wildcard."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.3.1.1.4"</span>;
            }

            <a name="mteObjectsEntryStatus.1250"/><span class="yang_kw">leaf</span> <span class="yang_id">mteObjectsEntryStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#RowStatus.183">smiv2:RowStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The control that allows creation and deletion of entries.
                  Once made active an entry MAY not be modified except to
                  delete it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.3.1.1.5"</span>;
            }
         }  <span class="yang_cmt">// list mteObjectsEntry</span>
      }  <span class="yang_cmt">// container mteObjects</span>

      <a name="mteEvent.1263"/><span class="yang_kw">container</span> <span class="yang_id">mteEvent</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4"</span>;
         <a name="mteEventFailures.1265"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventFailures</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#counter32.25">yang:counter32</a></span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The number of times an attempt to invoke an event
               has failed.  This counts individually for each
               attempt in a group of targets or each attempt for a
               wildcarded trigger object."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.1"</span>;
         }

         <a name="mteEventEntry.1279"/><span class="yang_kw">list</span> <span class="yang_id">mteEventEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.1287">mteOwner</a>, <a href="#mteEventName.1296">mteEventName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single event.  Applications create and
               delete entries using mteEventEntryStatus."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.2.1"</span>;
            <a name="mteOwner.1287"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteEventName.1296"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"1..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A locally-unique, administratively assigned name for the
                  event."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.2.1.1"</span>;
            }

            <a name="mteEventComment.1307"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventComment</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A description of the event's function and use."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.2.1.2"</span>;
            }

            <a name="mteEventActions.1316"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventActions</span> {
               <span class="yang_kw">type</span> <span class="yang_id">bits</span> {
                  <span class="yang_kw">bit</span> <span class="yang_str">"notification"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">0</span>;
                  }
                  <span class="yang_kw">bit</span> <span class="yang_str">"set"</span> {
                     <span class="yang_kw">position</span> <span class="yang_str">1</span>;
                  }
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The actions to perform when this event occurs.
                  
                  For 'notification', Traps and/or Informs are sent according
                  to the configuration in the SNMP Notification MIB.
                  
                  For 'set', an SNMP Set operation is performed according to
                  control values in this entry."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"()"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.2.1.3"</span>;
            }

            <a name="mteEventEnabled.1334"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventEnabled</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A control to allow an event to be configured but not used.
                  When the value is 'false' the event does not execute even if
                  
                  
                  triggered."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.2.1.4"</span>;
            }

            <a name="mteEventEntryStatus.1347"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventEntryStatus</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#RowStatus.183">smiv2:RowStatus</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The control that allows creation and deletion of entries.
                  Once made active an entry MAY not be modified except to
                  delete it."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.2.1.5"</span>;
            }
         }  <span class="yang_cmt">// list mteEventEntry</span>

         <a name="mteEventNotificationEntry.1361"/><span class="yang_kw">list</span> <span class="yang_id">mteEventNotificationEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.1370">mteOwner</a>, <a href="#mteEventName.1378">mteEventName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single event's notification.  Entries
               automatically exist in this this table for each mteEventEntry
               that has 'notification' set in mteEventActions."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.3.1"</span>;
            <a name="mteOwner.1370"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteEventName.1378"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventName</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteEvent/disman-event:mteEventEntry/disman-event:mteEventName"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteEventNotification.1387"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventNotification</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier from the NOTIFICATION-TYPE for the
                  notification to use if metEventActions has 'notification' set."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"zeroDotZero"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.3.1.1"</span>;
            }

            <a name="mteEventNotificationObjectsOwner.1397"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventNotificationObjectsOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"To go with mteEventNotificationObjects, the mteOwner of a
                  group of objects from mteObjectsTable."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.3.1.2"</span>;
            }

            <a name="mteEventNotificationObjects.1409"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventNotificationObjects</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span> {
                  <span class="yang_kw">length</span> <span class="yang_str">"0..32"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The mteObjectsName of a group of objects from
                  mteObjectsTable if mteEventActions has 'notification' set.
                  These objects are to be added to any Notification generated by
                  this event.
                  
                  Objects may also be added based on the trigger that stimulated
                  the event.
                  
                  A length of 0 indicates no additional objects."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.3.1.3"</span>;
            }
         }  <span class="yang_cmt">// list mteEventNotificationEntry</span>

         <a name="mteEventSetEntry.1432"/><span class="yang_kw">list</span> <span class="yang_id">mteEventSetEntry</span> {
            <span class="yang_kw">key</span> "<a href="#mteOwner.1441">mteOwner</a>, <a href="#mteEventName.1449">mteEventName</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Information about a single event's set option.  Entries
               automatically exist in this this table for each mteEventEntry
               that has 'set' set in mteEventActions."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.4.1"</span>;
            <a name="mteOwner.1441"/><span class="yang_kw">leaf</span> <span class="yang_id">mteOwner</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteTrigger/disman-event:mteTriggerEntry/disman-event:mteOwner"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteEventName.1449"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventName</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span>
                     <span class="yang_str">"/disman-event:mteEvent/disman-event:mteEventEntry/disman-event:mteEventName"</span>;
               }
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Automagically generated keyref leaf."</span>;
            }

            <a name="mteEventSetObject.1458"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventSetObject</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier from the MIB object to set if
                  mteEventActions has 'set' set.
                  
                  This object identifier may be wildcarded by leaving
                  sub-identifiers off the end, in which case
                  nteEventSetObjectWildCard must be 'true'.
                  
                  If mteEventSetObject is wildcarded the instance used to set the
                  object to which it points is the same as the instance from the
                  value of mteTriggerValueID that triggered the event.
                  
                  Each instance that fills the wildcard is independent of any
                  additional instances, that is, wildcarded objects operate
                  as if there were a separate table entry for each instance
                  that fills the wildcard without having to actually predict
                  all possible instances ahead of time.
                  
                  Bad object identifiers or a mismatch between truncating the
                  identifier and the value of mteSetObjectWildcard
                  result in operation as one would expect when providing the
                  wrong identifier to a Set operation.  The Set will fail or set
                  the wrong object.  If the value syntax of the destination
                  object is not correct, the Set fails with the normal SNMP
                  error code."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"zeroDotZero"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.4.1.1"</span>;
            }

            <a name="mteEventSetObjectWildcard.1490"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventSetObjectWildcard</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control over whether mteEventSetObject is to be treated as
                  fully-specified or wildcarded, with 'true' indicating wildcard
                  if mteEventActions has 'set' set."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.4.1.2"</span>;
            }

            <a name="mteEventSetValue.1501"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventSetValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value to which to set the object at mteEventSetObject
                  if mteEventActions has 'set' set."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"0"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.4.1.3"</span>;
            }

            <a name="mteEventSetTargetTag.1511"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventSetTargetTag</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-TARGET-MIB/2002-10-14#SnmpTagValue.96">snmp-target:SnmpTagValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The tag for the target(s) at which to set the object at
                  mteEventSetObject to mteEventSetValue if mteEventActions
                  has 'set' set.
                  
                  Systems limited to self management MAY reject a non-zero
                  length for the value of this object.
                  
                  A length of 0 indicates the local system.  In this case,
                  access to the objects indicated by mteEventSetObject is under
                  the security credentials of the requester that set
                  mteTriggerEntryStatus to 'active'.  Those credentials are the
                  input parameters for isAccessAllowed from the Architecture for
                  Describing SNMP Management Frameworks.
                  
                  Otherwise access rights are checked according to the security
                  parameters resulting from the tag."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.4.1.4"</span>;
            }

            <a name="mteEventSetContextName.1535"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventSetContextName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The management context in which to set mteEventObjectID.
                  if mteEventActions has 'set' set.
                  
                  This may be wildcarded by leaving characters off the end.  To
                  indicate such wildcarding mteEventSetContextNameWildcard must
                  be 'true'.
                  
                  If this context name is wildcarded the value used to complete
                  the wildcarding of mteTriggerContextName will be appended."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">""</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.4.1.5"</span>;
            }

            <a name="mteEventSetContextNameWildcard.1552"/><span class="yang_kw">leaf</span> <span class="yang_id">mteEventSetContextNameWildcard</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMPv2-TC/1999-04-01#TruthValue.100">smiv2:TruthValue</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Control for whether mteEventSetContextName is to be treated as
                  fully-specified or wildcarded, with 'true' indicating wildcard
                  if mteEventActions has 'set' set."</span>;
               <a href="/modules/yang-smi/2008-03-20#default.33">smi:default</a> <span class="yang_str">"false"</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.1.4.4.1.6"</span>;
            }
         }  <span class="yang_cmt">// list mteEventSetEntry</span>
      }  <span class="yang_cmt">// container mteEvent</span>

      <a name="dismanEventMIBNotificationObjects.1566"/><span class="yang_kw">container</span> <span class="yang_id">dismanEventMIBNotificationObjects</span> {
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1"</span>;
         <a name="mteHotTrigger.1568"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTrigger</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The name of the trigger causing the notification."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.1"</span>;
         }

         <a name="mteHotTargetName.1576"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTargetName</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The SNMP Target MIB's snmpTargetAddrName related to the
               notification."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.2"</span>;
         }

         <a name="mteHotContextName.1585"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotContextName</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The context name related to the notification.  This MUST be as
               fully-qualified as possible, including filling in wildcard
               information determined in processing."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.3"</span>;
         }

         <a name="mteHotOID.1595"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotOID</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The object identifier of the destination object related to the
               notification.  This MUST be as fully-qualified as possible,
               including filling in wildcard information determined in
               processing.
               
               For a trigger-related notification this is from
               mteTriggerValueID.
               
               For a set failure this is from mteEventSetObject."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.4"</span>;
         }

         <a name="mteHotValue.1611"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotValue</span> {
            <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The value of the object at mteTriggerValueID when a
               trigger fired."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.5"</span>;
         }

         <a name="mteFailedReason.1620"/><span class="yang_kw">leaf</span> <span class="yang_id">mteFailedReason</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="#FailureReason.50">FailureReason</a></span>;
            <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"The reason for the failure of an attempt to check for a
               trigger condition or set an object in response to an event."</span>;
            <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.6"</span>;
         }
      }  <span class="yang_cmt">// container dismanEventMIBNotificationObjects</span>

      <a name="mteTriggerFired.1631"/><span class="yang_kw">notification</span> <span class="yang_id">mteTriggerFired</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Notification that the trigger indicated by the object
            instances has fired, for triggers with mteTriggerType
            'boolean' or 'existence'."</span>;
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.0.1"</span>;
         <a name="mteTriggerFired-mteHotTrigger.1638"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFired-mteHotTrigger</span> {
            <a name="mteHotTrigger.1639"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTrigger</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The name of the trigger causing the notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.1"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFired-mteHotTrigger</span>

         <a name="mteTriggerFired-mteHotTargetName.1648"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFired-mteHotTargetName</span> {
            <a name="mteHotTargetName.1649"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTargetName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The SNMP Target MIB's snmpTargetAddrName related to the
                  notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.2"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFired-mteHotTargetName</span>

         <a name="mteTriggerFired-mteHotContextName.1659"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFired-mteHotContextName</span> {
            <a name="mteHotContextName.1660"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotContextName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The context name related to the notification.  This MUST be as
                  fully-qualified as possible, including filling in wildcard
                  information determined in processing."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.3"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFired-mteHotContextName</span>

         <a name="mteTriggerFired-mteHotOID.1671"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFired-mteHotOID</span> {
            <a name="mteHotOID.1672"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotOID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the destination object related to the
                  notification.  This MUST be as fully-qualified as possible,
                  including filling in wildcard information determined in
                  processing.
                  
                  For a trigger-related notification this is from
                  mteTriggerValueID.
                  
                  For a set failure this is from mteEventSetObject."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.4"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFired-mteHotOID</span>

         <a name="mteTriggerFired-mteHotValue.1689"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFired-mteHotValue</span> {
            <a name="mteHotValue.1690"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of the object at mteTriggerValueID when a
                  trigger fired."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.5"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFired-mteHotValue</span>
      }  <span class="yang_cmt">// notification mteTriggerFired</span>

      <a name="mteTriggerRising.1702"/><span class="yang_kw">notification</span> <span class="yang_id">mteTriggerRising</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Notification that the rising threshold was met for triggers
            with mteTriggerType 'threshold'."</span>;
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.0.2"</span>;
         <a name="mteTriggerRising-mteHotTrigger.1708"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerRising-mteHotTrigger</span> {
            <a name="mteHotTrigger.1709"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTrigger</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The name of the trigger causing the notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.1"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerRising-mteHotTrigger</span>

         <a name="mteTriggerRising-mteHotTargetName.1718"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerRising-mteHotTargetName</span> {
            <a name="mteHotTargetName.1719"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTargetName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The SNMP Target MIB's snmpTargetAddrName related to the
                  notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.2"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerRising-mteHotTargetName</span>

         <a name="mteTriggerRising-mteHotContextName.1729"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerRising-mteHotContextName</span> {
            <a name="mteHotContextName.1730"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotContextName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The context name related to the notification.  This MUST be as
                  fully-qualified as possible, including filling in wildcard
                  information determined in processing."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.3"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerRising-mteHotContextName</span>

         <a name="mteTriggerRising-mteHotOID.1741"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerRising-mteHotOID</span> {
            <a name="mteHotOID.1742"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotOID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the destination object related to the
                  notification.  This MUST be as fully-qualified as possible,
                  including filling in wildcard information determined in
                  processing.
                  
                  For a trigger-related notification this is from
                  mteTriggerValueID.
                  
                  For a set failure this is from mteEventSetObject."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.4"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerRising-mteHotOID</span>

         <a name="mteTriggerRising-mteHotValue.1759"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerRising-mteHotValue</span> {
            <a name="mteHotValue.1760"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of the object at mteTriggerValueID when a
                  trigger fired."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.5"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerRising-mteHotValue</span>
      }  <span class="yang_cmt">// notification mteTriggerRising</span>

      <a name="mteTriggerFalling.1772"/><span class="yang_kw">notification</span> <span class="yang_id">mteTriggerFalling</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Notification that the falling threshold was met for triggers
            with mteTriggerType 'threshold'."</span>;
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.0.3"</span>;
         <a name="mteTriggerFalling-mteHotTrigger.1778"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFalling-mteHotTrigger</span> {
            <a name="mteHotTrigger.1779"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTrigger</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The name of the trigger causing the notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.1"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFalling-mteHotTrigger</span>

         <a name="mteTriggerFalling-mteHotTargetName.1788"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFalling-mteHotTargetName</span> {
            <a name="mteHotTargetName.1789"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTargetName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The SNMP Target MIB's snmpTargetAddrName related to the
                  notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.2"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFalling-mteHotTargetName</span>

         <a name="mteTriggerFalling-mteHotContextName.1799"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFalling-mteHotContextName</span> {
            <a name="mteHotContextName.1800"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotContextName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The context name related to the notification.  This MUST be as
                  fully-qualified as possible, including filling in wildcard
                  information determined in processing."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.3"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFalling-mteHotContextName</span>

         <a name="mteTriggerFalling-mteHotOID.1811"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFalling-mteHotOID</span> {
            <a name="mteHotOID.1812"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotOID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the destination object related to the
                  notification.  This MUST be as fully-qualified as possible,
                  including filling in wildcard information determined in
                  processing.
                  
                  For a trigger-related notification this is from
                  mteTriggerValueID.
                  
                  For a set failure this is from mteEventSetObject."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.4"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFalling-mteHotOID</span>

         <a name="mteTriggerFalling-mteHotValue.1829"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFalling-mteHotValue</span> {
            <a name="mteHotValue.1830"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotValue</span> {
               <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The value of the object at mteTriggerValueID when a
                  trigger fired."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.5"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFalling-mteHotValue</span>
      }  <span class="yang_cmt">// notification mteTriggerFalling</span>

      <a name="mteTriggerFailure.1842"/><span class="yang_kw">notification</span> <span class="yang_id">mteTriggerFailure</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Notification that an attempt to check a trigger has failed.
            
            The network manager must enable this notification only with
            a certain fear and trembling, as it can easily crowd out more
            important information.  It should be used only to help diagnose
            a problem that has appeared in the error counters and can not
            be found otherwise."</span>;
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.0.4"</span>;
         <a name="mteTriggerFailure-mteHotTrigger.1853"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFailure-mteHotTrigger</span> {
            <a name="mteHotTrigger.1854"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTrigger</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The name of the trigger causing the notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.1"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFailure-mteHotTrigger</span>

         <a name="mteTriggerFailure-mteHotTargetName.1863"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFailure-mteHotTargetName</span> {
            <a name="mteHotTargetName.1864"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTargetName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The SNMP Target MIB's snmpTargetAddrName related to the
                  notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.2"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFailure-mteHotTargetName</span>

         <a name="mteTriggerFailure-mteHotContextName.1874"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFailure-mteHotContextName</span> {
            <a name="mteHotContextName.1875"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotContextName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The context name related to the notification.  This MUST be as
                  fully-qualified as possible, including filling in wildcard
                  information determined in processing."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.3"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFailure-mteHotContextName</span>

         <a name="mteTriggerFailure-mteHotOID.1886"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFailure-mteHotOID</span> {
            <a name="mteHotOID.1887"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotOID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the destination object related to the
                  notification.  This MUST be as fully-qualified as possible,
                  including filling in wildcard information determined in
                  processing.
                  
                  For a trigger-related notification this is from
                  mteTriggerValueID.
                  
                  For a set failure this is from mteEventSetObject."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.4"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFailure-mteHotOID</span>

         <a name="mteTriggerFailure-mteFailedReason.1904"/><span class="yang_kw">container</span> <span class="yang_id">mteTriggerFailure-mteFailedReason</span> {
            <a name="mteFailedReason.1905"/><span class="yang_kw">leaf</span> <span class="yang_id">mteFailedReason</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#FailureReason.50">FailureReason</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The reason for the failure of an attempt to check for a
                  trigger condition or set an object in response to an event."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.6"</span>;
            }
         }  <span class="yang_cmt">// container mteTriggerFailure-mteFailedReason</span>
      }  <span class="yang_cmt">// notification mteTriggerFailure</span>

      <a name="mteEventSetFailure.1917"/><span class="yang_kw">notification</span> <span class="yang_id">mteEventSetFailure</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Notification that an attempt to do a set in response to an
            event has failed.
            
            The network manager must enable this notification only with
            a certain fear and trembling, as it can easily crowd out more
            important information.  It should be used only to help diagnose
            a problem that has appeared in the error counters and can not
            be found otherwise."</span>;
         <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.0.5"</span>;
         <a name="mteEventSetFailure-mteHotTrigger.1929"/><span class="yang_kw">container</span> <span class="yang_id">mteEventSetFailure-mteHotTrigger</span> {
            <a name="mteHotTrigger.1930"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTrigger</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The name of the trigger causing the notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.1"</span>;
            }
         }  <span class="yang_cmt">// container mteEventSetFailure-mteHotTrigger</span>

         <a name="mteEventSetFailure-mteHotTargetName.1939"/><span class="yang_kw">container</span> <span class="yang_id">mteEventSetFailure-mteHotTargetName</span> {
            <a name="mteHotTargetName.1940"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotTargetName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The SNMP Target MIB's snmpTargetAddrName related to the
                  notification."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.2"</span>;
            }
         }  <span class="yang_cmt">// container mteEventSetFailure-mteHotTargetName</span>

         <a name="mteEventSetFailure-mteHotContextName.1950"/><span class="yang_kw">container</span> <span class="yang_id">mteEventSetFailure-mteHotContextName</span> {
            <a name="mteHotContextName.1951"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotContextName</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/SNMP-FRAMEWORK-MIB/2002-10-14#SnmpAdminString.377">snmp-framework:SnmpAdminString</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The context name related to the notification.  This MUST be as
                  fully-qualified as possible, including filling in wildcard
                  information determined in processing."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.3"</span>;
            }
         }  <span class="yang_cmt">// container mteEventSetFailure-mteHotContextName</span>

         <a name="mteEventSetFailure-mteHotOID.1962"/><span class="yang_kw">container</span> <span class="yang_id">mteEventSetFailure-mteHotOID</span> {
            <a name="mteHotOID.1963"/><span class="yang_kw">leaf</span> <span class="yang_id">mteHotOID</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2007-10-02#object-identifier.175">yang:object-identifier</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The object identifier of the destination object related to the
                  notification.  This MUST be as fully-qualified as possible,
                  including filling in wildcard information determined in
                  processing.
                  
                  For a trigger-related notification this is from
                  mteTriggerValueID.
                  
                  For a set failure this is from mteEventSetObject."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.4"</span>;
            }
         }  <span class="yang_cmt">// container mteEventSetFailure-mteHotOID</span>

         <a name="mteEventSetFailure-mteFailedReason.1980"/><span class="yang_kw">container</span> <span class="yang_id">mteEventSetFailure-mteFailedReason</span> {
            <a name="mteFailedReason.1981"/><span class="yang_kw">leaf</span> <span class="yang_id">mteFailedReason</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="#FailureReason.50">FailureReason</a></span>;
               <span class="yang_kw">config</span> <span class="yang_str">"false"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The reason for the failure of an attempt to check for a
                  trigger condition or set an object in response to an event."</span>;
               <a href="/modules/yang-smi/2008-03-20#oid.21">smi:oid</a> <span class="yang_str">"1.3.6.1.2.1.88.2.1.6"</span>;
            }
         }  <span class="yang_cmt">// container mteEventSetFailure-mteFailedReason</span>
      }  <span class="yang_cmt">// notification mteEventSetFailure</span>
   }  <span class="yang_cmt">// module DISMAN-EVENT-MIB</span>
</pre>
</div>
</div>