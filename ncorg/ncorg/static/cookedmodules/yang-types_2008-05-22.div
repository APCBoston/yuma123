
<div>
   <h1 class="yang">yang-types.yang</h1>

   <ul id="nav">
      <li><a href="#">Typedefs</a>
         <ul>
            <li><a href="#counter32.28">counter32</a></li>
            <li><a href="#zero-based-counter32.55">zero-based-counter32</a></li>
            <li><a href="#counter64.65">counter64</a></li>
            <li><a href="#zero-based-counter64.92">zero-based-counter64</a></li>
            <li><a href="#gauge32.102">gauge32</a></li>
            <li><a href="#gauge64.123">gauge64</a></li>
            <li><a href="#uri.148">uri</a></li>
            <li><a href="#object-identifier.178">object-identifier</a></li>
            <li><a href="#date-and-time.205">date-and-time</a></li>
            <li><a href="#timeticks.235">timeticks</a></li>
            <li><a href="#timestamp.249">timestamp</a></li>
            <li><a href="#phys-address.273">phys-address</a></li>
         </ul>
      </li>
   </ul>

<br />
<div class="yang">
<pre>

   <span class="yang_kw">module</span> <span class="yang_id">yang-types</span> {

      <span class="yang_kw">yang-version</span> <span class="yang_str">1</span>;

      <span class="yang_kw">namespace</span> <span class="yang_str">"urn:ietf:params:xml:ns:yang:yang-types"</span>;

      <span class="yang_kw">prefix</span> <span class="yang_str">"yang"</span>;

      <span class="yang_kw">organization</span> <span class="yang_str">"YANG Language Design Team"</span>;

      <span class="yang_kw">contact</span>
         <span class="yang_str">"Juergen Schoenwaelder (Editor)
         &lt;j.schoenwaelder@jacobs-university.de&gt;"</span>;

      <span class="yang_kw">description</span>
         <span class="yang_str">"This module contains standard derived YANG types."</span>;

      <span class="yang_kw">reference</span>
         <span class="yang_str">"draft-schoenw-netmod-yang-types-01.txt + date bugfix"</span>;

      <span class="yang_kw">revision</span> <span class="yang_str">"2008-05-22"</span> {
         <span class="yang_kw">description</span> <span class="yang_str">"Initial revision."</span>;
      }

      <a name="counter32.28"></a><span class="yang_kw">typedef</span> <span class="yang_id">counter32</span> {
         <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The counter32 type represents a non-negative integer
            which monotonically increases until it reaches a
            maximum value of 2^32-1 (4294967295 decimal), when it
            wraps around and starts increasing again from zero.
            
            Counters have no defined `initial' value, and thus, a
            single value of a counter has (in general) no information
            content.  Discontinuities in the monotonically increasing
            value normally occur at re-initialization of the
            management system, and at other times as specified in the
            description of an object instance using this type.  If
            such other times can occur, for example, the creation of
            an object instance of type counter32 at times other than
            re-initialization, then a corresponding object should be
            defined, with an appropriate type, to indicate the last
            discontinuity.
            
            The counter32 type should not be used for configuration
            objects. A default statement should not be used for
            attributes with a type value of counter32."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2578 (STD 58)"</span>;
      }

      <a name="zero-based-counter32.55"></a><span class="yang_kw">typedef</span> <span class="yang_id">zero-based-counter32</span> {
         <span class="yang_kw">type</span> <span class="yang_id"><a href="#counter32.28">counter32</a></span>;
         <span class="yang_kw">default</span> <span class="yang_str">"0"</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The zero-based-counter32 type represents a counter32
            which has the defined `initial' value zero."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2021"</span>;
      }

      <a name="counter64.65"></a><span class="yang_kw">typedef</span> <span class="yang_id">counter64</span> {
         <span class="yang_kw">type</span> <span class="yang_id">uint64</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The counter64 type represents a non-negative integer
            which monotonically increases until it reaches a
            maximum value of 2^64-1 (18446744073709551615), when
            it wraps around and starts increasing again from zero.
            
            Counters have no defined `initial' value, and thus, a
            single value of a counter has (in general) no information
            content.  Discontinuities in the monotonically increasing
            value normally occur at re-initialization of the
            management system, and at other times as specified in the
            description of an object instance using this type.  If
            such other times can occur, for example, the creation of
            an object instance of type counter64 at times other than
            re-initialization, then a corresponding object should be
            defined, with an appropriate type, to indicate the last
            discontinuity.
            
            The counter64 type should not be used for configuration
            objects. A default statement should not be used for
            attributes with a type value of counter64."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2578 (STD 58)"</span>;
      }

      <a name="zero-based-counter64.92"></a><span class="yang_kw">typedef</span> <span class="yang_id">zero-based-counter64</span> {
         <span class="yang_kw">type</span> <span class="yang_id"><a href="#counter64.65">counter64</a></span>;
         <span class="yang_kw">default</span> <span class="yang_str">"0"</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The zero-based-counter64 type represents a counter64
            which has the defined `initial' value zero."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2856"</span>;
      }

      <a name="gauge32.102"></a><span class="yang_kw">typedef</span> <span class="yang_id">gauge32</span> {
         <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The gauge32 type represents a non-negative integer,
            which may increase or decrease, but shall never
            exceed a maximum value, nor fall below a minimum
            value.  The maximum value can not be greater than
            2^32-1 (4294967295 decimal), and the minimum value
            can not be smaller than 0.  The value of a gauge32
            has its maximum value whenever the information
            being modeled is greater than or equal to its
            maximum value, and has its minimum value whenever
            the information being modeled is smaller than or
            equal to its minimum value.  If the information
            being modeled subsequently decreases below
            (increases above) the maximum (minimum) value, the
            gauge32 also decreases (increases)."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2578 (STD 58)"</span>;
      }

      <a name="gauge64.123"></a><span class="yang_kw">typedef</span> <span class="yang_id">gauge64</span> {
         <span class="yang_kw">type</span> <span class="yang_id">uint64</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The gauge64 type represents a non-negative integer,
            which may increase or decrease, but shall never
            exceed a maximum value, nor fall below a minimum
            value.  The maximum value can not be greater than
            2^64-1 (18446744073709551615), and the minimum value
            can not be smaller than 0.  The value of a gauge64
            has its maximum value whenever the information
            being modeled is greater than or equal to its
            maximum value, and has its minimum value whenever
            the information being modeled is smaller than or
            equal to its minimum value.  If the information
            being modeled subsequently decreases below
            (increases above) the maximum (minimum) value, the
            gauge64 also decreases (increases)."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2856"</span>;
      }

      <a name="uri.148"></a><span class="yang_kw">typedef</span> <span class="yang_id">uri</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"A uri type represents Uniform Resource Identifier (URI)
            as defined by STD 66.
            
            Objects using this type MUST be in US-ASCII encoding, and
            MUST be normalized as described by RFC 3986 Sections
            6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary
            percent-encoding is removed, and all case-insensitive
            characters are set to lowercase except for hexadecimal
            digits, which are normalized to uppercase as described in
            Section 6.2.2.1.
            
            The purpose of this normalization is to help provide unique
            URIs.  Note that this normalization is not sufficient to
            provide uniqueness.  Two URIs that are textually distinct
            after this normalization may still be equivalent.
            
            Objects using this type MAY restrict the schemes that they
            permit.  For example, 'data:' and 'urn:' schemes might not
            be appropriate.
            
            A zero-length URI is not a valid URI.  This can be used to
            express 'URI absent' where required, for example when used
            as an index field."</span>;
         <span class="yang_kw">reference</span>
            <span class="yang_str">"RFC 3986 (STD 66), RFC 3305, and RFC 5017"</span>;
      }

      <a name="object-identifier.178"></a><span class="yang_kw">typedef</span> <span class="yang_id">object-identifier</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">pattern</span>
               <span class="yang_str">'([0-1](\.[1-3]?[0-9]))|(2.(0|([1-9]\d*)))(\.(0|([1-9]\d*)))*'</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"The object-identifier type represents administratively
            assigned names in a registration-hierarchical-name tree.
            
            Values of this type are denoted as a sequence of numerical
            non-negative sub-identifier values. Each sub-identifier
            value MUST NOT exceed 2^32-1 (4294967295). Sub-identifiers
            are separated by single dots and without any intermediate
            white space.
            
            Although the number of sub-identifiers is not limited,
            module designers should realize that there may be
            implementations that stick with the SMIv1/v2 limit of 128
            sub-identifiers."</span>;
         <span class="yang_kw">reference</span>
            <span class="yang_str">"ITU-T Recommendation X.660 / ISO/IEC 9834-1"</span>;
      }

      <a name="date-and-time.205"></a><span class="yang_kw">typedef</span> <span class="yang_id">date-and-time</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">pattern</span>
               <span class="yang_str">'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.d*)?(Z|(\+|-)\d{2}:\d{2})'</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"The date-and-time type is a profile of the ISO 8601
                        standard for representation of dates and times using the
                        Gregorian calendar. The format is most easily described
                        using the following ABFN (see RFC 3339):
            
                        date-fullyear   = 4DIGIT
                        date-month      = 2DIGIT  ; 01-12
                        date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31
                        time-hour       = 2DIGIT  ; 00-23
                        time-minute     = 2DIGIT  ; 00-59
                        time-second     = 2DIGIT  ; 00-58, 00-59, 00-60
                        time-secfrac    = "." 1*DIGIT
                        time-numoffset  = ("+" / "-") time-hour ":" time-minute
                        time-offset     = "Z" / time-numoffset
            
                        partial-time    = time-hour ":" time-minute ":" time-second
                                          [time-secfrac]
                        full-date       = date-fullyear "-" date-month "-" date-mday
                        full-time       = partial-time time-offset
            
            ;
            "</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 3339"</span>;
      }

      <a name="timeticks.235"></a><span class="yang_kw">typedef</span> <span class="yang_id">timeticks</span> {
         <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The timeticks type represents a non-negative integer
            which represents the time, modulo 2^32 (4294967296
            decimal), in hundredths of a second between two epochs.
            
            When objects are defined which use this type, the
            description of the object identifies both of the reference
            epochs."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2578 (STD 58)"</span>;
      }

      <a name="timestamp.249"></a><span class="yang_kw">typedef</span> <span class="yang_id">timestamp</span> {
         <span class="yang_kw">type</span> <span class="yang_id"><a href="#timeticks.235">timeticks</a></span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"The timestamp type represents the value of an associated
            timeticks object at which a specific occurrence
            happened.  The specific occurrence must be defined in the
            description of any object defined using this type.  When
            the specific occurrence occurred prior to the last time
            the associated timeticks attribute was zero, then the
            timestamp value is zero.  Note that this requires all
            timestamp values to be reset to zero when the value of
            the associated timeticks attribute reaches 497+ days and
            wraps around to zero.
            
            The associated timeticks object must be specified
            in the description of any object using this type."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2579 (STD 58)"</span>;
      }

      <a name="phys-address.273"></a><span class="yang_kw">typedef</span> <span class="yang_id">phys-address</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"Represents media- or physical-level addresses."</span>;
         <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2579 (STD 58)"</span>;
      }
   }  <span class="yang_cmt">// module yang-types</span>
</pre>
</div>
</div>