
<div>
   <h1 class="yang">ipfix-psamp.yang</h1>

   <ul id="nav">
      <li><a href="#">Typedefs</a>
         <ul>
            <li><a href="#Direction.80">Direction</a></li>
         </ul>
      </li>
      <li><a href="#">Groupings</a>
         <ul>
            <li class="daddy"><a href="#InformationElement.53">InformationElement</a>
               <ul>
                  <li><a href="#ieEnterpriseNumber.56">ieEnterpriseNumber</a></li>
                  <li class="daddy"><a href="#NameOrId.62">NameOrId</a>
                     <ul>
                        <li class="daddy"><a href="#ieName.64">ieName</a>
                           <ul>
                              <li><a href="#ieName.64">ieName</a></li>
                           </ul>
                        </li>
                        <li class="daddy"><a href="#ieId.67">ieId</a>
                           <ul>
                              <li><a href="#ieId.67">ieId</a></li>
                           </ul>
                        </li>
                     </ul>
                  </li>
                  <li><a href="#ieLength.72">ieLength</a></li>
               </ul>
            </li>
            <li class="daddy"><a href="#Interface.91">Interface</a>
               <ul>
                  <li class="daddy"><a href="#IndexOrName.94">IndexOrName</a>
                     <ul>
                        <li class="daddy"><a href="#ifIndex.99">ifIndex</a>
                           <ul>
                              <li><a href="#ifIndex.99">ifIndex</a></li>
                           </ul>
                        </li>
                        <li class="daddy"><a href="#ifName.100">ifName</a>
                           <ul>
                              <li><a href="#ifName.100">ifName</a></li>
                           </ul>
                        </li>
                     </ul>
                  </li>
                  <li><a href="#direction.103">direction</a></li>
               </ul>
            </li>
            <li class="daddy"><a href="#Linecard.112">Linecard</a>
               <ul>
                  <li class="daddy"><a href="#IndexOrName.115">IndexOrName</a>
                     <ul>
                        <li class="daddy"><a href="#entPhysicalIndex.120">entPhysicalIndex</a>
                           <ul>
                              <li><a href="#entPhysicalIndex.120">entPhysicalIndex</a></li>
                           </ul>
                        </li>
                        <li class="daddy"><a href="#entPhysicalName.121">entPhysicalName</a>
                           <ul>
                              <li><a href="#entPhysicalName.121">entPhysicalName</a></li>
                           </ul>
                        </li>
                     </ul>
                  </li>
                  <li><a href="#direction.124">direction</a></li>
               </ul>
            </li>
         </ul>
      </li>
      <li><a href="#">Objects</a>
         <ul>
            <li class="daddy"><a href="#ipfix.133">ipfix</a>
               <ul>
                  <li class="daddy"><a href="#collectingProcess.135">collectingProcess</a>
                     <ul>
                        <li><a href="#name.139">name</a></li>
                        <li class="daddy"><a href="#receiver.145">receiver</a>
                           <ul>
                              <li><a href="#name.149">name</a></li>
                              <li><a href="#TransportProtocol.151">TransportProtocol</a></li>
                           </ul>
                        </li>
                        <li><a href="#exportingProcess.207">exportingProcess</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#observationPoint.215">observationPoint</a>
                     <ul>
                        <li><a href="#name.219">name</a></li>
                        <li><a href="#observationPointId.225">observationPointId</a></li>
                        <li><a href="#observationDomainId.231">observationDomainId</a></li>
                        <li class="daddy"><a href="#OPType.237">OPType</a>
                           <ul>
                              <li><a href="#interface.239">interface</a></li>
                              <li><a href="#linecard.240">linecard</a></li>
                           </ul>
                        </li>
                        <li><a href="#selectionProcess.243">selectionProcess</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#selectionProcess.251">selectionProcess</a>
                     <ul>
                        <li><a href="#name.256">name</a></li>
                        <li><a href="#selectorId.262">selectorId</a></li>
                        <li class="daddy"><a href="#Method.268">Method</a>
                           <ul>
                              <li><a href="#selectAll.273">selectAll</a></li>
                              <li><a href="#sampCountBased.276">sampCountBased</a></li>
                              <li><a href="#sampTimeBased.280">sampTimeBased</a></li>
                              <li><a href="#sampRandOutOfN.284">sampRandOutOfN</a></li>
                              <li><a href="#sampUniProb.288">sampUniProb</a></li>
                              <li><a href="#sampNonUniProb.295">sampNonUniProb</a></li>
                              <li><a href="#sampFlowState.300">sampFlowState</a></li>
                              <li><a href="#filterMatch.305">filterMatch</a></li>
                              <li><a href="#filterHash.311">filterHash</a></li>
                              <li><a href="#filterRState.324">filterRState</a></li>
                           </ul>
                        </li>
                        <li><a href="#selectionProcess.340">selectionProcess</a></li>
                        <li><a href="#cache.348">cache</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#cache.355">cache</a>
                     <ul>
                        <li><a href="#name.359">name</a></li>
                        <li><a href="#cacheType.364">cacheType</a></li>
                        <li><a href="#maxRecords.382">maxRecords</a></li>
                        <li><a href="#activeTimeout.384">activeTimeout</a></li>
                        <li><a href="#idleTimeout.386">idleTimeout</a></li>
                        <li class="daddy"><a href="#cacheLayout.388">cacheLayout</a>
                           <ul>
                              <li><a href="#field.389">field</a></li>
                           </ul>
                        </li>
                        <li><a href="#exportingProcess.398">exportingProcess</a></li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#exportingProcess.405">exportingProcess</a>
                     <ul>
                        <li><a href="#name.409">name</a></li>
                        <li><a href="#exportingProcessId.415">exportingProcessId</a></li>
                        <li class="daddy"><a href="#destination.421">destination</a>
                           <ul>
                              <li><a href="#name.424">name</a></li>
                              <li><a href="#type.426">type</a></li>
                              <li><a href="#TransportProtocol.438">TransportProtocol</a></li>
                              <li><a href="#option.518">option</a></li>
                           </ul>
                        </li>
                     </ul>
                  </li>
               </ul>
            </li>
         </ul>
      </li>
   </ul>

<br />
<div class="yang">
<pre>

   <span class="yang_kw">module</span> <span class="yang_id">ipfix-psamp</span> {

      <span class="yang_kw">yang-version</span> <span class="yang_str">1</span>;

      <span class="yang_kw">namespace</span>
         <span class="yang_str">"urn:ietf:params:xml:ns:ipfix-psamp-config"</span>;

      <span class="yang_kw">prefix</span> <span class="yang_str">"ipfix"</span>;

      <span class="yang_kw">import</span> <a href="/modules/yang-types/2008-05-22">yang-types</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"yang"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/inet-types/2008-06-07">inet-types</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"inet"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/IF-MIB/2000-06-14">IF-MIB</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"if"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/ENTITY-MIB/2005-08-10">ENTITY-MIB</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"ent"</span>;
      }

      <span class="yang_kw">organization</span> <span class="yang_str">"IPFIX WG"</span>;

      <span class="yang_kw">contact</span> <span class="yang_str">"muenz@informatik.uni-tuebingen.de"</span>;

      <span class="yang_kw">description</span> <span class="yang_str">"IPFIX/PSAMP Configuration Data Model"</span>;

      <span class="yang_kw">reference</span>
         <span class="yang_str">"draft-ietf-ipfix-configuration-model-00.txt + asn bugfix"</span>;

      <span class="yang_kw">revision</span> <span class="yang_str">"2008-07-07"</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Version of draft-ietf-ipfix-configuration-model-00
            Changes in draft-ietf-ipfix-configuration-model-00:
            - Metering Process container replaced by direct reference to
            Selection Process
            - concatenation of Selection Processes realize Selection Sequence
            - removal of premature support of IPFIX Mediators/Concentrators.
            - more SCTP parameters in SctpReceiver and SctpExport classes
            - sendBufferSize parameter for all *Export classes
            - templateId no longer configuration parameter
            Changes in draft-muenz-ipfix-configuration-04:
            - first version in yang
            - Collecting Process can be configured for file import
            - Collecting Process can be configured to export received
            records without modifications (e.g., to file or other
            collectors)
            - SCTP export parameter timedReliability
            - parameter for eligible local IP addresses for SCTP endpoint
            - all tags names uncapitalized, types names etc. capitalized
            - CacheParameters renamed as Cache
            - description attribute removed
            Changes in -03:
            - Linecard and Interface classes now have direction element
            - sec =&gt; s (SI unit)
            - optional description attribute for annotations
            - simplifications in ExportingProcess class
            - new parameters: observationPointId, meteringProcessId,
            selectorId, exportingProcessId (note that devices do not
            have to support the configuration of these parameters)
            - new FileExport class for exporting into a file
            - Reporting class renamed Option Class
            Changes in -02:
            - new structure without next pointers
            - packet reporting and flow metering replaced by record cache
            - added reporting with options"</span>;
      }

      <a name="InformationElement.53"></a><span class="yang_kw">grouping</span> <span class="yang_id">InformationElement</span> {
         <span class="yang_kw">description</span> <span class="yang_str">"Parameters of an Information Element."</span>;
         <a name="ieEnterpriseNumber.56"></a><span class="yang_kw">leaf</span> <span class="yang_id">ieEnterpriseNumber</span> {
            <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Omitted in the case of an IETF specified Information
               Elements."</span>;
         }

         <a name="NameOrId.62"></a><span class="yang_kw">choice</span> <span class="yang_id">NameOrId</span> {
            <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            <a name="ieName.64"></a><span class="yang_kw">case</span> <span class="yang_id">ieName</span> {
               <a name="ieName.64"></a><span class="yang_kw">leaf</span> <span class="yang_id">ieName</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               }
            }  <span class="yang_cmt">// case ieName</span>

            <a name="ieId.67"></a><span class="yang_kw">case</span> <span class="yang_id">ieId</span> {
               <a name="ieId.67"></a><span class="yang_kw">leaf</span> <span class="yang_id">ieId</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">uint16</span>;
               }
            }  <span class="yang_cmt">// case ieId</span>
         }  <span class="yang_cmt">// choice NameOrId</span>

         <a name="ieLength.72"></a><span class="yang_kw">leaf</span> <span class="yang_id">ieLength</span> {
            <span class="yang_kw">type</span> <span class="yang_id">uint16</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Length can be omitted if a default length exists for
               the specified Information Element."</span>;
         }
      }  <span class="yang_cmt">// grouping InformationElement</span>

      <a name="Direction.80"></a><span class="yang_kw">typedef</span> <span class="yang_id">Direction</span> {
         <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
            <span class="yang_kw">enum</span> <span class="yang_str">"ingress"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">0</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"egress"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">1</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"both"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">2</span>;
            }
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Direction of packets going through an interface or
            linecard."</span>;
      }

      <a name="Interface.91"></a><span class="yang_kw">grouping</span> <span class="yang_id">Interface</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Interface as input to Observation Point."</span>;
         <a name="IndexOrName.94"></a><span class="yang_kw">choice</span> <span class="yang_id">IndexOrName</span> {
            <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Index or name of the interface as stored in the
               ifTable of IF-MIB."</span>;
            <span class="yang_kw">reference</span> <span class="yang_str">"RFC 1229."</span>;
            <a name="ifIndex.99"></a><span class="yang_kw">case</span> <span class="yang_id">ifIndex</span> {
               <a name="ifIndex.99"></a><span class="yang_kw">leaf</span> <span class="yang_id">ifIndex</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               }
            }  <span class="yang_cmt">// case ifIndex</span>

            <a name="ifName.100"></a><span class="yang_kw">case</span> <span class="yang_id">ifName</span> {
               <a name="ifName.100"></a><span class="yang_kw">leaf</span> <span class="yang_id">ifName</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               }
            }  <span class="yang_cmt">// case ifName</span>
         }  <span class="yang_cmt">// choice IndexOrName</span>

         <a name="direction.103"></a><span class="yang_kw">leaf</span> <span class="yang_id">direction</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="#Direction.80">Direction</a></span>;
            <span class="yang_kw">default</span> <span class="yang_str">"both"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Direction of packets. If not applicable (e.g., in
               the case of a sniffing interface in promiscuous mode), this
               parameter is omitted"</span>;
         }
      }  <span class="yang_cmt">// grouping Interface</span>

      <a name="Linecard.112"></a><span class="yang_kw">grouping</span> <span class="yang_id">Linecard</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Linecard as input to Observation Point."</span>;
         <a name="IndexOrName.115"></a><span class="yang_kw">choice</span> <span class="yang_id">IndexOrName</span> {
            <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Index or name of the linecard as stored in the
               entPhysicalTable of ENTITY-MIB."</span>;
            <span class="yang_kw">reference</span> <span class="yang_str">"RFC 4133."</span>;
            <a name="entPhysicalIndex.120"></a><span class="yang_kw">case</span> <span class="yang_id">entPhysicalIndex</span> {
               <a name="entPhysicalIndex.120"></a><span class="yang_kw">leaf</span> <span class="yang_id">entPhysicalIndex</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               }
            }  <span class="yang_cmt">// case entPhysicalIndex</span>

            <a name="entPhysicalName.121"></a><span class="yang_kw">case</span> <span class="yang_id">entPhysicalName</span> {
               <a name="entPhysicalName.121"></a><span class="yang_kw">leaf</span> <span class="yang_id">entPhysicalName</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               }
            }  <span class="yang_cmt">// case entPhysicalName</span>
         }  <span class="yang_cmt">// choice IndexOrName</span>

         <a name="direction.124"></a><span class="yang_kw">leaf</span> <span class="yang_id">direction</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="#Direction.80">Direction</a></span>;
            <span class="yang_kw">default</span> <span class="yang_str">"both"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Direction of packets. If not applicable (e.g., in
               the case of a sniffing interface in promiscuous mode), this
               parameter is omitted"</span>;
         }
      }  <span class="yang_cmt">// grouping Linecard</span>

      <a name="ipfix.133"></a><span class="yang_kw">container</span> <span class="yang_id">ipfix</span> {
         <a name="collectingProcess.135"></a><span class="yang_kw">list</span> <span class="yang_id">collectingProcess</span> {
            <span class="yang_kw">key</span> "<a href="#name.139">name</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span> <span class="yang_str">"Parameters of a Collecting Process."</span>;
            <a name="name.139"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
               <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Arbitrary but unique name of the Collecting
                  Process."</span>;
            }

            <a name="receiver.145"></a><span class="yang_kw">list</span> <span class="yang_id">receiver</span> {
               <span class="yang_kw">key</span> "<a href="#name.149">name</a>";
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Receiver parameters."</span>;
               <a name="name.149"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               }

               <a name="TransportProtocol.151"></a><span class="yang_kw">choice</span> <span class="yang_id">TransportProtocol</span> {
                  <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                  <a name="sctpReceiver.153"></a><span class="yang_kw">case</span> <span class="yang_id">sctpReceiver</span> {
                     <a name="sctpReceiver.153"></a><span class="yang_kw">container</span> <span class="yang_id">sctpReceiver</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"SCTP receiver parameters."</span>;
                        <span class="yang_kw">reference</span> <span class="yang_str">"RFC 4960."</span>;
                        <a name="ipAddress.156"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">ipAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"List of eligible local IP addresses to be
                              used by the SCTP endpoint. If omitted, all locally
                              assigned IP addresses are used by the SCTP endpoint."</span>;
                        }

                        <a name="transportPort.162"></a><span class="yang_kw">leaf</span> <span class="yang_id">transportPort</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#port-number.78">inet:port-number</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }

                        <a name="maxAllowedStreams.166"></a><span class="yang_kw">leaf</span> <span class="yang_id">maxAllowedStreams</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint16</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Maximum number of allowed inbound streams
                              per SCTP association."</span>;
                        }
                     }  <span class="yang_cmt">// container sctpReceiver</span>
                  }  <span class="yang_cmt">// case sctpReceiver</span>

                  <a name="udpReceiver.172"></a><span class="yang_kw">case</span> <span class="yang_id">udpReceiver</span> {
                     <a name="udpReceiver.172"></a><span class="yang_kw">container</span> <span class="yang_id">udpReceiver</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"UDP receiver parameters."</span>;
                        <a name="ipAddress.174"></a><span class="yang_kw">leaf</span> <span class="yang_id">ipAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"If omitted, all locally assigned IP
                              addresses are used by the UDP endpoint."</span>;
                        }

                        <a name="transportPort.179"></a><span class="yang_kw">leaf</span> <span class="yang_id">transportPort</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#port-number.78">inet:port-number</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }

                        <a name="defaultTemplateLifetime.183"></a><span class="yang_kw">leaf</span> <span class="yang_id">defaultTemplateLifetime</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        }
                     }  <span class="yang_cmt">// container udpReceiver</span>
                  }  <span class="yang_cmt">// case udpReceiver</span>

                  <a name="tcpReceiver.185"></a><span class="yang_kw">case</span> <span class="yang_id">tcpReceiver</span> {
                     <a name="tcpReceiver.185"></a><span class="yang_kw">container</span> <span class="yang_id">tcpReceiver</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"TCP receiver parameters."</span>;
                        <a name="ipAddress.187"></a><span class="yang_kw">leaf</span> <span class="yang_id">ipAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"If omitted, all locally assigned IP
                              addresses are used by the TCP endpoint."</span>;
                        }

                        <a name="transportPort.192"></a><span class="yang_kw">leaf</span> <span class="yang_id">transportPort</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#port-number.78">inet:port-number</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }
                     }  <span class="yang_cmt">// container tcpReceiver</span>
                  }  <span class="yang_cmt">// case tcpReceiver</span>

                  <a name="fileReader.197"></a><span class="yang_kw">case</span> <span class="yang_id">fileReader</span> {
                     <a name="fileReader.197"></a><span class="yang_kw">container</span> <span class="yang_id">fileReader</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"File Reader parameters."</span>;
                        <a name="uri.199"></a><span class="yang_kw">leaf</span> <span class="yang_id">uri</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#uri.148">yang:uri</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }
                     }  <span class="yang_cmt">// container fileReader</span>
                  }  <span class="yang_cmt">// case fileReader</span>
               }  <span class="yang_cmt">// choice TransportProtocol</span>
            }  <span class="yang_cmt">// list receiver</span>

            <a name="exportingProcess.207"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">exportingProcess</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span> <span class="yang_str">"/ipfix/exportingProcess/name"</span>;
               }
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Export of received records without any
                  modifications. Records are processed by all Exporting
                  Processes in the list."</span>;
            }
         }  <span class="yang_cmt">// list collectingProcess</span>

         <a name="observationPoint.215"></a><span class="yang_kw">list</span> <span class="yang_id">observationPoint</span> {
            <span class="yang_kw">key</span> "<a href="#name.219">name</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span> <span class="yang_str">"Parameters of an Observation Point."</span>;
            <a name="name.219"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
               <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Arbitrary but unique name of the Observation
                  Point."</span>;
            }

            <a name="observationPointId.225"></a><span class="yang_kw">leaf</span> <span class="yang_id">observationPointId</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"If omitted, the Observation Point ID is assigned
                  by the monitoring device."</span>;
            }

            <a name="observationDomainId.231"></a><span class="yang_kw">leaf</span> <span class="yang_id">observationDomainId</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"If omitted, the Observation Domain ID is assigned
                  by the monitoring device."</span>;
            }

            <a name="OPType.237"></a><span class="yang_kw">choice</span> <span class="yang_id">OPType</span> {
               <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
               <a name="interface.239"></a><span class="yang_kw">case</span> <span class="yang_id">interface</span> {
                  <a name="interface.239"></a><span class="yang_kw">container</span> <span class="yang_id">interface</span> {

                     <a name="uses.239"></a><span class="yang_kw">uses</span> <a href="#Interface.91">Interface</a>;
                  }  <span class="yang_cmt">// container interface</span>
               }  <span class="yang_cmt">// case interface</span>

               <a name="linecard.240"></a><span class="yang_kw">case</span> <span class="yang_id">linecard</span> {
                  <a name="linecard.240"></a><span class="yang_kw">container</span> <span class="yang_id">linecard</span> {

                     <a name="uses.240"></a><span class="yang_kw">uses</span> <a href="#Linecard.112">Linecard</a>;
                  }  <span class="yang_cmt">// container linecard</span>
               }  <span class="yang_cmt">// case linecard</span>
            }  <span class="yang_cmt">// choice OPType</span>

            <a name="selectionProcess.243"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">selectionProcess</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span> <span class="yang_str">"/ipfix/selectionProcess/name"</span>;
               }
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Selection Processes in this list process packets
                  in parallel."</span>;
            }
         }  <span class="yang_cmt">// list observationPoint</span>

         <a name="selectionProcess.251"></a><span class="yang_kw">list</span> <span class="yang_id">selectionProcess</span> {
            <span class="yang_kw">key</span> "<a href="#name.256">name</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Parameters of a Selection Process (i.e., Primitive
               Selector)."</span>;
            <a name="name.256"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
               <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Arbitrary but unique name of the Selection
                  Process."</span>;
            }

            <a name="selectorId.262"></a><span class="yang_kw">leaf</span> <span class="yang_id">selectorId</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"If omitted, the Selector ID is assigned by the
                  monitoring device."</span>;
            }

            <a name="Method.268"></a><span class="yang_kw">choice</span> <span class="yang_id">Method</span> {
               <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"See PSAMP-MIB for details about the selection
                  methods and their parameters."</span>;
               <span class="yang_kw">reference</span> <span class="yang_str">"draft-ietf-psamp-mib-06."</span>;
               <a name="selectAll.273"></a><span class="yang_kw">case</span> <span class="yang_id">selectAll</span> {
                  <a name="selectAll.273"></a><span class="yang_kw">leaf</span> <span class="yang_id">selectAll</span> {
                     <span class="yang_kw">type</span> <span class="yang_id">empty</span>;
                  }
               }  <span class="yang_cmt">// case selectAll</span>

               <a name="sampCountBased.276"></a><span class="yang_kw">case</span> <span class="yang_id">sampCountBased</span> {
                  <a name="sampCountBased.276"></a><span class="yang_kw">container</span> <span class="yang_id">sampCountBased</span> {
                     <a name="interval.277"></a><span class="yang_kw">leaf</span> <span class="yang_id">interval</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }

                     <a name="spacing.278"></a><span class="yang_kw">leaf</span> <span class="yang_id">spacing</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }
                  }  <span class="yang_cmt">// container sampCountBased</span>
               }  <span class="yang_cmt">// case sampCountBased</span>

               <a name="sampTimeBased.280"></a><span class="yang_kw">case</span> <span class="yang_id">sampTimeBased</span> {
                  <a name="sampTimeBased.280"></a><span class="yang_kw">container</span> <span class="yang_id">sampTimeBased</span> {
                     <a name="interval.281"></a><span class="yang_kw">leaf</span> <span class="yang_id">interval</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }

                     <a name="spacing.282"></a><span class="yang_kw">leaf</span> <span class="yang_id">spacing</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }
                  }  <span class="yang_cmt">// container sampTimeBased</span>
               }  <span class="yang_cmt">// case sampTimeBased</span>

               <a name="sampRandOutOfN.284"></a><span class="yang_kw">case</span> <span class="yang_id">sampRandOutOfN</span> {
                  <a name="sampRandOutOfN.284"></a><span class="yang_kw">container</span> <span class="yang_id">sampRandOutOfN</span> {
                     <a name="population.285"></a><span class="yang_kw">leaf</span> <span class="yang_id">population</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }

                     <a name="sample.286"></a><span class="yang_kw">leaf</span> <span class="yang_id">sample</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }
                  }  <span class="yang_cmt">// container sampRandOutOfN</span>
               }  <span class="yang_cmt">// case sampRandOutOfN</span>

               <a name="sampUniProb.288"></a><span class="yang_kw">case</span> <span class="yang_id">sampUniProb</span> {
                  <a name="sampUniProb.288"></a><span class="yang_kw">container</span> <span class="yang_id">sampUniProb</span> {
                     <a name="probability.289"></a><span class="yang_kw">leaf</span> <span class="yang_id">probability</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        <span class="yang_kw">description</span>
                           <span class="yang_str">"The given value must be divided by
                           4294967295."</span>;
                     }
                  }  <span class="yang_cmt">// container sampUniProb</span>
               }  <span class="yang_cmt">// case sampUniProb</span>

               <a name="sampNonUniProb.295"></a><span class="yang_kw">case</span> <span class="yang_id">sampNonUniProb</span> {
                  <a name="sampNonUniProb.295"></a><span class="yang_kw">container</span> <span class="yang_id">sampNonUniProb</span> {
                     <span class="yang_kw">description</span> <span class="yang_str">"In PSAMP-MIB, these are OIDs."</span>;
                     <a name="function.297"></a><span class="yang_kw">leaf</span> <span class="yang_id">function</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="funcParam.298"></a><span class="yang_kw">leaf</span> <span class="yang_id">funcParam</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }
                  }  <span class="yang_cmt">// container sampNonUniProb</span>
               }  <span class="yang_cmt">// case sampNonUniProb</span>

               <a name="sampFlowState.300"></a><span class="yang_kw">case</span> <span class="yang_id">sampFlowState</span> {
                  <a name="sampFlowState.300"></a><span class="yang_kw">container</span> <span class="yang_id">sampFlowState</span> {
                     <span class="yang_kw">description</span> <span class="yang_str">"In PSAMP-MIB, these are OIDs."</span>;
                     <a name="function.302"></a><span class="yang_kw">leaf</span> <span class="yang_id">function</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="funcParam.303"></a><span class="yang_kw">leaf</span> <span class="yang_id">funcParam</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }
                  }  <span class="yang_cmt">// container sampFlowState</span>
               }  <span class="yang_cmt">// case sampFlowState</span>

               <a name="filterMatch.305"></a><span class="yang_kw">case</span> <span class="yang_id">filterMatch</span> {
                  <a name="filterMatch.305"></a><span class="yang_kw">container</span> <span class="yang_id">filterMatch</span> {
                     <a name="fieldId.306"></a><span class="yang_kw">leaf</span> <span class="yang_id">fieldId</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }

                     <a name="startValue.307"></a><span class="yang_kw">leaf</span> <span class="yang_id">startValue</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="stopValue.308"></a><span class="yang_kw">leaf</span> <span class="yang_id">stopValue</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="mask.309"></a><span class="yang_kw">leaf</span> <span class="yang_id">mask</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }
                  }  <span class="yang_cmt">// container filterMatch</span>
               }  <span class="yang_cmt">// case filterMatch</span>

               <a name="filterHash.311"></a><span class="yang_kw">case</span> <span class="yang_id">filterHash</span> {
                  <a name="filterHash.311"></a><span class="yang_kw">container</span> <span class="yang_id">filterHash</span> {
                     <span class="yang_kw">description</span>
                        <span class="yang_str">"In PSAMP-MIB, function and funcParam are OIDs."</span>;
                     <a name="addrType.313"></a><span class="yang_kw">leaf</span> <span class="yang_id">addrType</span> {
                        <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-version.29">inet:ip-version</a></span>;
                     }

                     <a name="headerBits.314"></a><span class="yang_kw">leaf</span> <span class="yang_id">headerBits</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="payloadBytes.315"></a><span class="yang_kw">leaf</span> <span class="yang_id">payloadBytes</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }

                     <a name="payloadBits.316"></a><span class="yang_kw">leaf</span> <span class="yang_id">payloadBits</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="function.317"></a><span class="yang_kw">leaf</span> <span class="yang_id">function</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="funcParam.318"></a><span class="yang_kw">leaf</span> <span class="yang_id">funcParam</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="inputBits.319"></a><span class="yang_kw">leaf</span> <span class="yang_id">inputBits</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }

                     <a name="outputBits.320"></a><span class="yang_kw">leaf</span> <span class="yang_id">outputBits</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                     }

                     <a name="outputMask.321"></a><span class="yang_kw">leaf</span> <span class="yang_id">outputMask</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }

                     <a name="selection.322"></a><span class="yang_kw">leaf</span> <span class="yang_id">selection</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }
                  }  <span class="yang_cmt">// container filterHash</span>
               }  <span class="yang_cmt">// case filterHash</span>

               <a name="filterRState.324"></a><span class="yang_kw">case</span> <span class="yang_id">filterRState</span> {
                  <a name="filterRState.324"></a><span class="yang_kw">container</span> <span class="yang_id">filterRState</span> {
                     <span class="yang_kw">description</span> <span class="yang_str">"In PSAMP-MIB, vendorFunc is OID."</span>;
                     <a name="function.326"></a><span class="yang_kw">leaf</span> <span class="yang_id">function</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">int32</span>;
                     }

                     <a name="negate.327"></a><span class="yang_kw">leaf</span> <span class="yang_id">negate</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">boolean</span>;
                     }

                     <a name="ifIndex.328"></a><span class="yang_kw">leaf</span> <span class="yang_id">ifIndex</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        <span class="yang_kw">description</span>
                           <span class="yang_str">"Index of the interface as stored in the
                           ifTable of IF-MIB."</span>;
                        <span class="yang_kw">reference</span> <span class="yang_str">"RFC 2863."</span>;
                     }

                     <a name="startAS.334"></a><span class="yang_kw">leaf</span> <span class="yang_id">startAS</span> {
                        <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#as-number.101">inet:as-number</a></span>;
                     }

                     <a name="stopAS.335"></a><span class="yang_kw">leaf</span> <span class="yang_id">stopAS</span> {
                        <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#as-number.101">inet:as-number</a></span>;
                     }

                     <a name="vendorFunc.336"></a><span class="yang_kw">leaf</span> <span class="yang_id">vendorFunc</span> {
                        <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                     }
                  }  <span class="yang_cmt">// container filterRState</span>
               }  <span class="yang_cmt">// case filterRState</span>
            }  <span class="yang_cmt">// choice Method</span>

            <a name="selectionProcess.340"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">selectionProcess</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span> <span class="yang_str">"/ipfix/selectionProcess/name"</span>;
               }
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"A Selection Process may pass selected packets or
                  records to further Selection Processes, building Selection
                  Sequences. All Selection Processes in this list process
                  packets or records in parallel."</span>;
            }

            <a name="cache.348"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">cache</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span> <span class="yang_str">"/ipfix/cache/name"</span>;
               }
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Caches in this list receive packets or records in
                  parallel."</span>;
            }
         }  <span class="yang_cmt">// list selectionProcess</span>

         <a name="cache.355"></a><span class="yang_kw">list</span> <span class="yang_id">cache</span> {
            <span class="yang_kw">key</span> "<a href="#name.359">name</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span> <span class="yang_str">"Parameters of a Cache."</span>;
            <a name="name.359"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
               <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Arbitrary but unique name of the Cache."</span>;
            }

            <a name="cacheType.364"></a><span class="yang_kw">leaf</span> <span class="yang_id">cacheType</span> {
               <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                  <span class="yang_kw">enum</span> <span class="yang_str">"immediate"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">0</span>;
                     <span class="yang_kw">description</span>
                        <span class="yang_str">"Flow expiration after the first packet,
                        generation of Packet Records."</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"normal"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                     <span class="yang_kw">description</span>
                        <span class="yang_str">"Flow expiration after active and idle timeout,
                        generation of Flow Records."</span>;
                  }
                  <span class="yang_kw">enum</span> <span class="yang_str">"permanent"</span> {
                     <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                     <span class="yang_kw">description</span>
                        <span class="yang_str">"No flow expiration, periodical export after
                        active timeout, generation of Flow Records."</span>;
                  }
               }
               <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            }

            <a name="maxRecords.382"></a><span class="yang_kw">leaf</span> <span class="yang_id">maxRecords</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
            }

            <a name="activeTimeout.384"></a><span class="yang_kw">leaf</span> <span class="yang_id">activeTimeout</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#timeticks.235">yang:timeticks</a></span>;
            }

            <a name="idleTimeout.386"></a><span class="yang_kw">leaf</span> <span class="yang_id">idleTimeout</span> {
               <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#timeticks.235">yang:timeticks</a></span>;
            }

            <a name="cacheLayout.388"></a><span class="yang_kw">container</span> <span class="yang_id">cacheLayout</span> {
               <a name="field.389"></a><span class="yang_kw">list</span> <span class="yang_id">field</span> {
                  <span class="yang_kw">key</span> "<a href="#name.392">name</a>";
                  <span class="yang_kw">min-elements</span> <span class="yang_str">"1"</span>;
                  <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                  <a name="name.392"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
                     <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                  }

                  <a name="uses.393"></a><span class="yang_kw">uses</span> <a href="#InformationElement.53">InformationElement</a>;

                  <a name="isFlowKey.394"></a><span class="yang_kw">leaf</span> <span class="yang_id">isFlowKey</span> {
                     <span class="yang_kw">type</span> <span class="yang_id">empty</span>;
                  }
               }  <span class="yang_cmt">// list field</span>
            }  <span class="yang_cmt">// container cacheLayout</span>

            <a name="exportingProcess.398"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">exportingProcess</span> {
               <span class="yang_kw">type</span> <span class="yang_id">keyref</span> {
                  <span class="yang_kw">path</span> <span class="yang_str">"/ipfix/exportingProcess/name"</span>;
               }
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Records are exported by all Exporting Processes in
                  the list."</span>;
            }
         }  <span class="yang_cmt">// list cache</span>

         <a name="exportingProcess.405"></a><span class="yang_kw">list</span> <span class="yang_id">exportingProcess</span> {
            <span class="yang_kw">key</span> "<a href="#name.409">name</a>";
            <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
            <span class="yang_kw">description</span> <span class="yang_str">"Parameters of an Exporting Process."</span>;
            <a name="name.409"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
               <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Arbitrary but unique name of the Exporting
                  Process."</span>;
            }

            <a name="exportingProcessId.415"></a><span class="yang_kw">leaf</span> <span class="yang_id">exportingProcessId</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"If omitted, the Exporting Process ID is assigned
                  by the monitoring device."</span>;
            }

            <a name="destination.421"></a><span class="yang_kw">list</span> <span class="yang_id">destination</span> {
               <span class="yang_kw">key</span> "<a href="#name.424">name</a>";
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <a name="name.424"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span>;
               }

               <a name="type.426"></a><span class="yang_kw">leaf</span> <span class="yang_id">type</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                     <span class="yang_kw">enum</span> <span class="yang_str">"primary"</span> {
                        <span class="yang_kw">value</span> <span class="yang_str">0</span>;
                     }
                     <span class="yang_kw">enum</span> <span class="yang_str">"secondary"</span> {
                        <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                     }
                     <span class="yang_kw">enum</span> <span class="yang_str">"duplicate"</span> {
                        <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                     }
                     <span class="yang_kw">enum</span> <span class="yang_str">"loadBalancing"</span> {
                        <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                     }
                     <span class="yang_kw">enum</span> <span class="yang_str">"unused"</span> {
                        <span class="yang_kw">value</span> <span class="yang_str">4</span>;
                     }
                  }
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Transport Session type according to IPFIX-MIB"</span>;
                  <span class="yang_kw">reference</span> <span class="yang_str">"draft-ietf-ipfix-mib-02."</span>;
               }

               <a name="TransportProtocol.438"></a><span class="yang_kw">choice</span> <span class="yang_id">TransportProtocol</span> {
                  <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                  <a name="sctpExport.440"></a><span class="yang_kw">case</span> <span class="yang_id">sctpExport</span> {
                     <a name="sctpExport.440"></a><span class="yang_kw">container</span> <span class="yang_id">sctpExport</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"SCTP export parameters."</span>;
                        <span class="yang_kw">reference</span> <span class="yang_str">"RFC 3758, RFC 4960."</span>;
                        <a name="destinationIpAddress.443"></a><span class="yang_kw">leaf</span> <span class="yang_id">destinationIpAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }

                        <a name="destinationTransportPort.447"></a><span class="yang_kw">leaf</span> <span class="yang_id">destinationTransportPort</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#port-number.78">inet:port-number</a></span>;
                           <span class="yang_kw">default</span> <span class="yang_str">"4739"</span>;
                        }

                        <a name="sourceIpAddress.451"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">sourceIpAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"List of eligible local IP addresses to be
                              used by the SCTP endpoint. If omitted, all locally
                              assigned IP addresses are used by the local endpoint."</span>;
                        }

                        <a name="sendBufferSize.457"></a><span class="yang_kw">leaf</span> <span class="yang_id">sendBufferSize</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        }

                        <a name="timedReliability.458"></a><span class="yang_kw">leaf</span> <span class="yang_id">timedReliability</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#timeticks.235">yang:timeticks</a></span>;
                           <span class="yang_kw">default</span> <span class="yang_str">"0"</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"PR-SCTP lifetime for IPFIX Messages
                              containing Data Sets only."</span>;
                        }

                        <a name="numberOfStreams.464"></a><span class="yang_kw">leaf</span> <span class="yang_id">numberOfStreams</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint16</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Number of outbound streams requested for the
                              SCTP association."</span>;
                        }

                        <a name="orderedDelivery.469"></a><span class="yang_kw">leaf</span> <span class="yang_id">orderedDelivery</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">boolean</span>;
                           <span class="yang_kw">default</span> <span class="yang_str">"true"</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Ordered delivery of IPFIX Messages
                              containing Data Sets."</span>;
                        }
                     }  <span class="yang_cmt">// container sctpExport</span>
                  }  <span class="yang_cmt">// case sctpExport</span>

                  <a name="udpExport.476"></a><span class="yang_kw">case</span> <span class="yang_id">udpExport</span> {
                     <a name="udpExport.476"></a><span class="yang_kw">container</span> <span class="yang_id">udpExport</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"UDP export parameters."</span>;
                        <a name="destinationIpAddress.478"></a><span class="yang_kw">leaf</span> <span class="yang_id">destinationIpAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }

                        <a name="destinationTransportPort.482"></a><span class="yang_kw">leaf</span> <span class="yang_id">destinationTransportPort</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#port-number.78">inet:port-number</a></span>;
                           <span class="yang_kw">default</span> <span class="yang_str">"4739"</span>;
                        }

                        <a name="sourceIpAddress.486"></a><span class="yang_kw">leaf</span> <span class="yang_id">sourceIpAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Source IP address. If omitted, the address
                              assigned to the outgoing interface is used."</span>;
                        }

                        <a name="sendBufferSize.491"></a><span class="yang_kw">leaf</span> <span class="yang_id">sendBufferSize</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        }

                        <a name="templateRefreshTimeout.492"></a><span class="yang_kw">leaf</span> <span class="yang_id">templateRefreshTimeout</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#timeticks.235">yang:timeticks</a></span>;
                        }

                        <a name="templateRefreshPacket.493"></a><span class="yang_kw">leaf</span> <span class="yang_id">templateRefreshPacket</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        }

                        <a name="optionTemplateRefreshTimeout.494"></a><span class="yang_kw">leaf</span> <span class="yang_id">optionTemplateRefreshTimeout</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#timeticks.235">yang:timeticks</a></span>;
                        }

                        <a name="optionTemplateRefreshPacket.495"></a><span class="yang_kw">leaf</span> <span class="yang_id">optionTemplateRefreshPacket</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        }
                     }  <span class="yang_cmt">// container udpExport</span>
                  }  <span class="yang_cmt">// case udpExport</span>

                  <a name="tcpExport.497"></a><span class="yang_kw">case</span> <span class="yang_id">tcpExport</span> {
                     <a name="tcpExport.497"></a><span class="yang_kw">container</span> <span class="yang_id">tcpExport</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"TCP export parameters."</span>;
                        <a name="destinationIpAddress.499"></a><span class="yang_kw">leaf</span> <span class="yang_id">destinationIpAddress</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#ip-address.127">inet:ip-address</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }

                        <a name="destinationTransportPort.503"></a><span class="yang_kw">leaf</span> <span class="yang_id">destinationTransportPort</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/inet-types/2008-06-07#port-number.78">inet:port-number</a></span>;
                           <span class="yang_kw">default</span> <span class="yang_str">"4739"</span>;
                        }

                        <a name="sendBufferSize.507"></a><span class="yang_kw">leaf</span> <span class="yang_id">sendBufferSize</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
                        }
                     }  <span class="yang_cmt">// container tcpExport</span>
                  }  <span class="yang_cmt">// case tcpExport</span>

                  <a name="fileWriter.509"></a><span class="yang_kw">case</span> <span class="yang_id">fileWriter</span> {
                     <a name="fileWriter.509"></a><span class="yang_kw">container</span> <span class="yang_id">fileWriter</span> {
                        <span class="yang_kw">description</span> <span class="yang_str">"File Writer parameters."</span>;
                        <a name="uri.511"></a><span class="yang_kw">leaf</span> <span class="yang_id">uri</span> {
                           <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#uri.148">yang:uri</a></span>;
                           <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                        }
                     }  <span class="yang_cmt">// container fileWriter</span>
                  }  <span class="yang_cmt">// case fileWriter</span>
               }  <span class="yang_cmt">// choice TransportProtocol</span>

               <a name="option.518"></a><span class="yang_kw">list</span> <span class="yang_id">option</span> {
                  <span class="yang_kw">key</span> "<a href="#name.520">name</a>";
                  <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                  <a name="name.520"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
                     <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                  }

                  <a name="type.521"></a><span class="yang_kw">leaf</span> <span class="yang_id">type</span> {
                     <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
                        <span class="yang_kw">enum</span> <span class="yang_str">"meteringStatistics"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">0</span>;
                           <span class="yang_kw">description</span> <span class="yang_str">"Metering Process Statistics."</span>;
                           <span class="yang_kw">reference</span> <span class="yang_str">"RFC 5101, section 4.1."</span>;
                        }
                        <span class="yang_kw">enum</span> <span class="yang_str">"meteringReliability"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Metering Process Reliability Statistics."</span>;
                           <span class="yang_kw">reference</span> <span class="yang_str">"RFC 5101, section 4.2."</span>;
                        }
                        <span class="yang_kw">enum</span> <span class="yang_str">"exportingReliability"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">2</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Exporting Process Reliability
                              Statistics."</span>;
                           <span class="yang_kw">reference</span> <span class="yang_str">"RFC 5101, section 4.3."</span>;
                        }
                        <span class="yang_kw">enum</span> <span class="yang_str">"flowKeys"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">3</span>;
                           <span class="yang_kw">description</span> <span class="yang_str">"Flow Keys."</span>;
                           <span class="yang_kw">reference</span> <span class="yang_str">"RFC 5101, section 4.4."</span>;
                        }
                        <span class="yang_kw">enum</span> <span class="yang_str">"selectionSequence"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">4</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Selection Sequence and Selector Reports."</span>;
                           <span class="yang_kw">reference</span>
                              <span class="yang_str">"draft-ietf-psamp-protocol-09, section 6.5.1
                              and 6.5.2."</span>;
                        }
                        <span class="yang_kw">enum</span> <span class="yang_str">"selectionStatistics"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">5</span>;
                           <span class="yang_kw">description</span> <span class="yang_str">"Selection Sequence Statistics Report."</span>;
                           <span class="yang_kw">reference</span>
                              <span class="yang_str">"draft-ietf-psamp-protocol-09, section
                              6.5.3."</span>;
                        }
                        <span class="yang_kw">enum</span> <span class="yang_str">"accuracy"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">6</span>;
                           <span class="yang_kw">description</span> <span class="yang_str">"Accuracy Report."</span>;
                           <span class="yang_kw">reference</span>
                              <span class="yang_str">"draft-ietf-psamp-protocol-09, section
                              6.5.4."</span>;
                        }
                        <span class="yang_kw">enum</span> <span class="yang_str">"reducingRedundancy"</span> {
                           <span class="yang_kw">value</span> <span class="yang_str">7</span>;
                           <span class="yang_kw">description</span>
                              <span class="yang_str">"Application of
                              ipfix-reducing-redundancy."</span>;
                           <span class="yang_kw">reference</span>
                              <span class="yang_str">"draft-ietf-ipfix-reducing-redundancy-04"</span>;
                        }
                     }
                     <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                  }

                  <a name="timeout.564"></a><span class="yang_kw">leaf</span> <span class="yang_id">timeout</span> {
                     <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/yang-types/2008-05-22#timeticks.235">yang:timeticks</a></span>;
                     <span class="yang_kw">default</span> <span class="yang_str">"0"</span>;
                     <span class="yang_kw">description</span>
                        <span class="yang_str">"Time interval for exporting option data."</span>;
                  }

                  <a name="optionTemplate.569"></a><span class="yang_kw">container</span> <span class="yang_id">optionTemplate</span> {
                     <span class="yang_kw">presence</span>
                        <span class="yang_str">"If present, the Exporter is to use this Option
                        Template to export the option data."</span>;
                     <span class="yang_kw">description</span>
                        <span class="yang_str">"If no Option Template is specified, the
                        Exporter defines a template according to option type and
                        available option data."</span>;
                     <a name="optionField.575"></a><span class="yang_kw">list</span> <span class="yang_id">optionField</span> {
                        <span class="yang_kw">key</span> "<a href="#name.578">name</a>";
                        <span class="yang_kw">ordered-by</span> <span class="yang_str">"user"</span>;
                        <a name="name.578"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">string</span>;
                        }

                        <a name="uses.579"></a><span class="yang_kw">uses</span> <a href="#InformationElement.53">InformationElement</a>;

                        <a name="isScope.580"></a><span class="yang_kw">leaf</span> <span class="yang_id">isScope</span> {
                           <span class="yang_kw">type</span> <span class="yang_id">empty</span>;
                        }
                     }  <span class="yang_cmt">// list optionField</span>
                  }  <span class="yang_cmt">// container optionTemplate</span>
               }  <span class="yang_cmt">// list option</span>
            }  <span class="yang_cmt">// list destination</span>
         }  <span class="yang_cmt">// list exportingProcess</span>
      }  <span class="yang_cmt">// container ipfix</span>
   }  <span class="yang_cmt">// module ipfix-psamp</span>
</pre>
</div>
</div>