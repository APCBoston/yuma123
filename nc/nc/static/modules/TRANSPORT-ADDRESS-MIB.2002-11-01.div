
<div>
   <h1 class="yang">TRANSPORT-ADDRESS-MIB.yang</h1>

   <ul id="nav">
      <li><a href="#">Typedefs</a>
         <ul>
            <li><a href="#TransportDomain.51">TransportDomain</a></li>
            <li><a href="#TransportAddressType.61">TransportAddressType</a></li>
            <li><a href="#TransportAddress.117">TransportAddress</a></li>
            <li><a href="#TransportAddressIPv4.150">TransportAddressIPv4</a></li>
            <li><a href="#TransportAddressIPv6.172">TransportAddressIPv6</a></li>
            <li><a href="#TransportAddressIPv4z.194">TransportAddressIPv4z</a></li>
            <li><a href="#TransportAddressIPv6z.217">TransportAddressIPv6z</a></li>
            <li><a href="#TransportAddressLocal.240">TransportAddressLocal</a></li>
            <li><a href="#TransportAddressDns.270">TransportAddressDns</a></li>
         </ul>
      </li>
   </ul>

<br />
<div class="yang">
<pre>

   <span class="yang_kw">module</span> <span class="yang_id">TRANSPORT-ADDRESS-MIB</span> {

      <span class="yang_kw">yang-version</span> <span class="yang_str">1</span>;

      <span class="yang_kw">namespace</span>
         <span class="yang_str">"urn:ietf:params:xml:ns:yang:smiv2:TRANSPORT-ADDRESS-MIB"</span>;

      <span class="yang_kw">prefix</span> <span class="yang_str">"transport-address"</span>;

      <span class="yang_kw">import</span> <a href="/modules/yang-smi">yang-smi</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"smi"</span>;
      }
      <span class="yang_kw">import</span> <a href="/modules/ietf-yang-types">ietf-yang-types</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"yang"</span>;
      }

      <span class="yang_kw">organization</span> <span class="yang_str">"IETF Operations and Management Area"</span>;

      <span class="yang_kw">contact</span>
         <span class="yang_str">"Juergen Schoenwaelder (Editor)
         TU Braunschweig
         Bueltenweg 74/75
         38106 Braunschweig, Germany
         Phone: +49 531 391-3289
         EMail: schoenw@ibr.cs.tu-bs.de
         
         Send comments to &lt;mibs@ops.ietf.org&gt;."</span>;

      <span class="yang_kw">description</span>
         <span class="yang_str">"This MIB module provides commonly used transport
         address definitions.
         
         Copyright (C) The Internet Society (2002). This version of
         this MIB module is part of RFC 3419; see the RFC itself for
         full legal notices."</span>;

      <span class="yang_kw">revision</span> <span class="yang_str">"2002-11-01"</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Initial version, published as RFC 3419."</span>;
      }


      <a name="TransportDomain.51"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportDomain</span> {
         <span class="yang_kw">type</span> <span class="yang_id"><a href="/modules/ietf-yang-types/2009-05-13#object-identifier.237">yang:object-identifier</a></span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"A value that represents a transport domain.
            
            Some possible values, such as transportDomainUdpIpv4, are
            defined in this module.  Other possible values can be
            defined in other MIB modules."</span>;
      }

      <a name="TransportAddressType.61"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddressType</span> {
         <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
            <span class="yang_kw">enum</span> <span class="yang_str">"unknown"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">0</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"udpIpv4"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">1</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"udpIpv6"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">2</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"udpIpv4z"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">3</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"udpIpv6z"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">4</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"tcpIpv4"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">5</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"tcpIpv6"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">6</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"tcpIpv4z"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">7</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"tcpIpv6z"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">8</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"sctpIpv4"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">9</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"sctpIpv6"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">10</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"sctpIpv4z"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">11</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"sctpIpv6z"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">12</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"local"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">13</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"udpDns"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">14</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"tcpDns"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">15</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"sctpDns"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">16</span>;
            }
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"A value that represents a transport domain. This is the
            enumerated version of the transport domain registrations
            in this MIB module. The enumerated values have the
            following meaning:
            
            unknown(0)     unknown transport address type
            udpIpv4(1)     transportDomainUdpIpv4
            udpIpv6(2)     transportDomainUdpIpv6
            udpIpv4z(3)    transportDomainUdpIpv4z
            udpIpv6z(4)    transportDomainUdpIpv6z
            tcpIpv4(5)     transportDomainTcpIpv4
            tcpIpv6(6)     transportDomainTcpIpv6
            tcpIpv4z(7)    transportDomainTcpIpv4z
            tcpIpv6z(8)    transportDomainTcpIpv6z
            sctpIpv4(9)    transportDomainSctpIpv4
            sctpIpv6(10)   transportDomainSctpIpv6
            sctpIpv4z(11)  transportDomainSctpIpv4z
            sctpIpv6z(12)  transportDomainSctpIpv6z
            local(13)      transportDomainLocal
            udpDns(14)     transportDomainUdpDns
            tcpDns(15)     transportDomainTcpDns
            sctpDns(16)    transportDomainSctpDns
            
            This textual convention can be used to represent transport
            domains in situations where a syntax of TransportDomain is
            unwieldy (for example, when used as an index).
            
            The usage of this textual convention implies that additional
            transport domains can only be supported by updating this MIB
            module. This extensibility restriction does not apply for the
            TransportDomain textual convention which allows MIB authors
            to define additional transport domains independently in
            other MIB modules."</span>;
      }

      <a name="TransportAddress.117"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddress</span> {
         <span class="yang_kw">type</span> <span class="yang_id">binary</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"0..255"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Denotes a generic transport address.
            
            A TransportAddress value is always interpreted within the
            context of a TransportAddressType or TransportDomain value.
            Every usage of the TransportAddress textual convention MUST
            specify the TransportAddressType or TransportDomain object
            which provides the context. Furthermore, MIB authors SHOULD
            define a separate TransportAddressType or TransportDomain
            object for each TransportAddress object. It is suggested that
            the TransportAddressType or TransportDomain is logically
            registered before the object(s) which use the
            TransportAddress textual convention if they appear in the
            same logical row.
            
            The value of a TransportAddress object must always be
            consistent with the value of the associated
            TransportAddressType or TransportDomain object. Attempts
            to set a TransportAddress object to a value which is
            inconsistent with the associated TransportAddressType or
            TransportDomain must fail with an inconsistentValue error.
            
            When this textual convention is used as a syntax of an
            index object, there may be issues with the limit of 128
            sub-identifiers specified in SMIv2, STD 58. In this case,
            the OBJECT-TYPE declaration MUST include a 'SIZE' clause
            to limit the number of potential instance sub-identifiers."</span>;
      }

      <a name="TransportAddressIPv4.150"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddressIPv4</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"6"</span>;
            <span class="yang_kw">pattern</span>
               <span class="yang_str">'((0|[1-9](([0-9]){0,2}))(0|[1-9](([0-9]){0,2}))(0|[1-9](([0-9]){0,2}))(0|[1-9](([0-9]){0,2}))((0|[1-9](([0-9]){0,4})){1,1})(0|[1-9](([0-9]){0,4})))'</span>;
            <a href="/modules/yang-smi/2008-03-20#display-hint.27">smi:display-hint</a> <span class="yang_str">"1d.1d.1d.1d:2d"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Represents a transport address consisting of an IPv4
            address and a port number (as used for example by UDP,
            TCP and SCTP):
            
             octets       contents         encoding
              1-4         IPv4 address     network-byte order
              5-6         port number      network-byte order
            
            This textual convention SHOULD NOT be used directly in object
            definitions since it restricts addresses to a specific format.
            However, if it is used, it MAY be used either on its own or
            in conjunction with TransportAddressType or TransportDomain
            as a pair."</span>;
      }

      <a name="TransportAddressIPv6.172"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddressIPv6</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"18"</span>;
            <span class="yang_kw">pattern</span>
               <span class="yang_str">'(((\p{IsBasicLatin}){0})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})((\p{IsBasicLatin}){0})((0|[1-9](([0-9]){0,4})){1,1})(0|[1-9](([0-9]){0,4})))'</span>;
            <a href="/modules/yang-smi/2008-03-20#display-hint.27">smi:display-hint</a> <span class="yang_str">"0a[2x:2x:2x:2x:2x:2x:2x:2x]0a:2d"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Represents a transport address consisting of an IPv6
            address and a port number (as used for example by UDP,
            TCP and SCTP):
            
             octets       contents         encoding
              1-16        IPv6 address     network-byte order
             17-18        port number      network-byte order
            
            This textual convention SHOULD NOT be used directly in object
            definitions since it restricts addresses to a specific format.
            However, if it is used, it MAY be used either on its own or
            in conjunction with TransportAddressType or TransportDomain
            as a pair."</span>;
      }

      <a name="TransportAddressIPv4z.194"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddressIPv4z</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"10"</span>;
            <span class="yang_kw">pattern</span>
               <span class="yang_str">'((0|[1-9](([0-9]){0,2}))(0|[1-9](([0-9]){0,2}))(0|[1-9](([0-9]){0,2}))(0|[1-9](([0-9]){0,2}))(0|[1-9](([0-9]){0,9}))((0|[1-9](([0-9]){0,4})){1,1})(0|[1-9](([0-9]){0,4})))'</span>;
            <a href="/modules/yang-smi/2008-03-20#display-hint.27">smi:display-hint</a> <span class="yang_str">"1d.1d.1d.1d%4d:2d"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Represents a transport address consisting of an IPv4
            address, a zone index and a port number (as used for
            example by UDP, TCP and SCTP):
            
             octets       contents         encoding
              1-4         IPv4 address     network-byte order
              5-8         zone index       network-byte order
              9-10        port number      network-byte order
            
            This textual convention SHOULD NOT be used directly in object
            definitions since it restricts addresses to a specific format.
            However, if it is used, it MAY be used either on its own or
            in conjunction with TransportAddressType or TransportDomain
            as a pair."</span>;
      }

      <a name="TransportAddressIPv6z.217"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddressIPv6z</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"22"</span>;
            <span class="yang_kw">pattern</span>
               <span class="yang_str">'(((\p{IsBasicLatin}){0})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(([0-9A-Fa-f]{2}){2})(0|[1-9](([0-9]){0,9}))((\p{IsBasicLatin}){0})((0|[1-9](([0-9]){0,4})){1,1})(0|[1-9](([0-9]){0,4})))'</span>;
            <a href="/modules/yang-smi/2008-03-20#display-hint.27">smi:display-hint</a> <span class="yang_str">"0a[2x:2x:2x:2x:2x:2x:2x:2x%4d]0a:2d"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Represents a transport address consisting of an IPv6
            address, a zone index and a port number (as used for
            example by UDP, TCP and SCTP):
            
             octets       contents         encoding
              1-16        IPv6 address     network-byte order
             17-20        zone index       network-byte order
             21-22        port number      network-byte order
            
            This textual convention SHOULD NOT be used directly in object
            definitions since it restricts addresses to a specific format.
            However, if it is used, it MAY be used either on its own or
            in conjunction with TransportAddressType or TransportDomain
            as a pair."</span>;
      }

      <a name="TransportAddressLocal.240"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddressLocal</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"1..255"</span>;
            <span class="yang_kw">pattern</span> <span class="yang_str">'\p{IsBasicLatin}{1,1}'</span>;
            <a href="/modules/yang-smi/2008-03-20#display-hint.27">smi:display-hint</a> <span class="yang_str">"1a"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Represents a POSIX Local IPC transport address:
            
            octets       contents                   encoding
             all         POSIX Local IPC address    string
            
            The Posix Local IPC transport domain subsumes UNIX domain
            sockets.
            
            This textual convention SHOULD NOT be used directly in object
            definitions since it restricts addresses to a specific format.
            However, if it is used, it MAY be used either on its own or
            in conjunction with TransportAddressType or TransportDomain
            as a pair.
            
            When this textual convention is used as a syntax of an
            index object, there may be issues with the limit of 128
            sub-identifiers specified in SMIv2, STD 58. In this case,
            the OBJECT-TYPE declaration MUST include a 'SIZE' clause
            to limit the number of potential instance sub-identifiers."</span>;
         <span class="yang_kw">reference</span>
            <span class="yang_str">"Protocol Independent Interfaces (IEEE POSIX 1003.1g)"</span>;
      }

      <a name="TransportAddressDns.270"></a><span class="yang_kw">typedef</span> <span class="yang_id">TransportAddressDns</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"1..255"</span>;
            <span class="yang_kw">pattern</span> <span class="yang_str">'\p{IsBasicLatin}{1,1}'</span>;
            <a href="/modules/yang-smi/2008-03-20#display-hint.27">smi:display-hint</a> <span class="yang_str">"1a"</span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Represents a DNS domain name followed by a colon ':'
            (ASCII character 0x3A) and a port number in ASCII.
            The name SHOULD be fully qualified whenever possible.
            
            Values of this textual convention are not directly useable as
            transport-layer addressing information, and require runtime
            resolution. As such, applications that write them must be
            prepared for handling errors if such values are not
            supported, or cannot be resolved (if resolution occurs at the
            time of the management operation).
            
            The DESCRIPTION clause of TransportAddress objects that may
            have TransportAddressDns values must fully describe how (and
            when) such names are to be resolved to IP addresses and vice
            versa.
            
            This textual convention SHOULD NOT be used directly in object
            definitions since it restricts addresses to a specific format.
            However, if it is used, it MAY be used either on its own or
            in conjunction with TransportAddressType or TransportDomain
            as a pair.
            
            When this textual convention is used as a syntax of an
            index object, there may be issues with the limit of 128
            sub-identifiers specified in SMIv2, STD 58. In this case,
            the OBJECT-TYPE declaration MUST include a 'SIZE' clause
            to limit the number of potential instance sub-identifiers."</span>;
      }
   }  <span class="yang_cmt">// module TRANSPORT-ADDRESS-MIB</span>
</pre>
</div>
</div>