
<div>
   <h1 class="yang">verified-commit.yang</h1>

   <ul id="nav">
      <li><a href="#">RPC&nbsp;Methods</a>
         <ul>
            <li class="daddy"><a href="#start-verified-commit.18">start-verified-commit</a>
               <ul>
                  <li class="daddy"><a href="#input.50">input</a>
                     <ul>
                        <li><a href="#timeout.51">timeout</a></li>
                        <li><a href="#test-template.65">test-template</a></li>
                     </ul>
                  </li>
                  <li><a href="#output.18">output</a></li>
               </ul>
            </li>
            <li class="daddy"><a href="#cancel-verified-commit.88">cancel-verified-commit</a>
               <ul>
                  <li><a href="#input.88">input</a></li>
                  <li><a href="#output.88">output</a></li>
               </ul>
            </li>
            <li class="daddy"><a href="#complete-verified-commit.112">complete-verified-commit</a>
               <ul>
                  <li><a href="#input.112">input</a></li>
                  <li><a href="#output.112">output</a></li>
               </ul>
            </li>
         </ul>
      </li>
      <li><a href="#">Notifications</a>
         <ul>
            <li><a href="#verifiedCommitStatus.136">verifiedCommitStatus</a></li>
            <li><a href="#verifiedCommitComplete.195">verifiedCommitComplete</a></li>
         </ul>
      </li>
   </ul>

<br />
<div class="yang">
<pre>

   <span class="yang_kw">module</span> <span class="yang_id">verified-commit</span> {

      <span class="yang_kw">yang-version</span> <span class="yang_str">1</span>;

      <span class="yang_kw">namespace</span>
         <span class="yang_str">"file:///draft-cole-netconf-robust-config-01.txt"</span>;

      <span class="yang_kw">prefix</span> <span class="yang_str">"vc"</span>;

      <span class="yang_kw">organization</span> <span class="yang_str">"IETF"</span>;

      <span class="yang_kw">contact</span> <span class="yang_str">"[add contact info here]."</span>;

      <span class="yang_kw">description</span> <span class="yang_str">"NETCONF verified commit procedure."</span>;

      <span class="yang_kw">revision</span> <span class="yang_str">"2009-06-09"</span> {
         <span class="yang_kw">description</span> <span class="yang_str">"Initial version."</span>;
      }


      <a name="start-verified-commit.18"></a><span class="yang_kw">rpc</span> <span class="yang_id">start-verified-commit</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"The verified commit procedure is started by
            invoking this operation.  The NETCONF procedure
            for the :confirmed-commit capability is followed,
            with the additional semantics:
            
              * the agent will cancel the verified-commit
                procedure if the &lt;cancel-verified-commit&gt;
                operation is invoked.
            
              * the agent will start, monitor, and report
                the verification test(s) during the time
                interval after this operation, and before
                the 'timeout' interval has expired.
            
              * the agent will complete the verified commit
                procedure if the &lt;complete-verified-commit&gt;
                operation is invoked before the timeout interval
                has expired.
            
              * the agent will generate the &lt;verifiedCommitStatus&gt;
                notification for each verification test specified
                in the 'test-template leaf-list, indicating the
                result of each verification test.
            
              * the agent will generate the &lt;verifiedCommitComplete&gt;
                notification at the completion of the entire
                verified commit procedure, indicating the
                final verified commit proceudure status.
            "</span>;
         <a name="input.50"></a><span class="yang_kw">input</span> {
            <a name="timeout.51"></a><span class="yang_kw">leaf</span> <span class="yang_id">timeout</span> {
               <span class="yang_kw">type</span> <span class="yang_id">uint32</span>;
               <span class="yang_kw">units</span> <span class="yang_str">"seconds"</span>;
               <span class="yang_kw">default</span> <span class="yang_str">"600"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"The time interval the agent must wait before
                  reverting the &lt;running&gt; configuration
                  and automatically canceling the verified
                  commit procedure.  (Note that the verified
                  commit procedure will also be automatically
                  canceled if the session that invokes this operation
                  is terminated for any reason."</span>;
            }

            <a name="test-template.65"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">test-template</span> {
               <span class="yang_kw">type</span> <span class="yang_id">instance-identifier</span>;
               <span class="yang_kw">min-elements</span> <span class="yang_str">"1"</span>;
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Identifies a verification test control entry
                  for the agent to use for the verification
                  portion of the verified commit procedure.
                  
                  The verification test control entry must conform
                  to the requirements specified in section X.X,
                  and the agent must be capable of starting,
                  monitoring, and reporting the results of
                  the verification test, as required.
                  
                  The agent will also generate the &lt;verifiedCommitStatus&gt;
                  notification, as specified for the verification
                  test control entry indicated by this parameter."</span>;
            }
         }
      }  <span class="yang_cmt">// rpc start-verified-commit</span>

      <a name="cancel-verified-commit.88"></a><span class="yang_kw">rpc</span> <span class="yang_id">cancel-verified-commit</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Cancel a verified commit procedure already in progress.
            
            If no verified commit procedure is currently in
            progress, then an 'operation-failed' error is
            generated, and the value 'no-verified-commit'
            is used for the error-app-tag field.
            
            If the verified commit procedure in progress
            cannot be canceled for any reason, then an
            'operation-failed' error is returned, and
            the value 'cancel-failed' is used in the
            error-app-tag field.
            
            If any verification tests associated with this
            verified commit procedure are still in progress,
            they will be canceled by this operation.
            
            If the verified commit procedure in progress
            is canceled, then the agent will return &lt;ok/&gt;.
            "</span>;
      }  <span class="yang_cmt">// rpc cancel-verified-commit</span>

      <a name="complete-verified-commit.112"></a><span class="yang_kw">rpc</span> <span class="yang_id">complete-verified-commit</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Complete a verified commit procedure already in progress.
            
            If no verified commit procedure is currently in
            progress, then an 'operation-failed' error is
            generated, and the value 'no-verified-commit'
            is used for the error-app-tag field.
            
            If the verified commit procedure in progress
            cannot be completed for any reason, then an
            'operation-failed' error is returned, and
            the value 'complete-failed' is used in the
            error-app-tag field.
            
            If any verification tests associated with this
            verified commit procedure are still in progress,
            they will be canceled by this operation.
            
            If the verified commit procedure in progress
            is completed, then the agent will return &lt;ok/&gt;.
            "</span>;
      }  <span class="yang_cmt">// rpc complete-verified-commit</span>

      <a name="verifiedCommitStatus.136"></a><span class="yang_kw">notification</span> <span class="yang_id">verifiedCommitStatus</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Contains the current of final status of
            a verification test being invoked on behalf
            of the current verified commit procedure."</span>;
         <a name="testIdentifier.142"></a><span class="yang_kw">leaf</span> <span class="yang_id">testIdentifier</span> {
            <span class="yang_kw">type</span> <span class="yang_id">instance-identifier</span>;
            <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Indicates which verification test this
               status report is associated with.
               This value will identify the same node
               as specified in a 'test-template'
               parameter instance provided in the
               &lt;start-verified-commit&gt; operation."</span>;
         }

         <a name="statusType.154"></a><span class="yang_kw">leaf</span> <span class="yang_id">statusType</span> {
            <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
               <span class="yang_kw">enum</span> <span class="yang_str">"partial"</span> {
                  <span class="yang_kw">value</span> <span class="yang_str">0</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Indicates this is a partial status result
                     and the verification test is still in 
                     progress."</span>;
               }
               <span class="yang_kw">enum</span> <span class="yang_str">"final"</span> {
                  <span class="yang_kw">value</span> <span class="yang_str">1</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Indicates this is the final status result
                     and the verification test is completed
                     or canceled."</span>;
               }
            }
            <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Indicates the type of status report that
               this notification contains."</span>;
         }

         <a name="status.175"></a><span class="yang_kw">leaf</span> <span class="yang_id">status</span> {
            <span class="yang_kw">type</span> <span class="yang_id">string</span>;
            <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Indicates the NETCONF error-tag value most
               closely associated with the test status.
               The string 'ok' is used to indicate that
               no errors have been detected."</span>;
            <span class="yang_kw">reference</span> <span class="yang_str">"RFC 4741bis, Appendix A"</span>;
         }

         <a name="extendedStatus.186"></a><span class="yang_kw">anyxml</span> <span class="yang_id">extendedStatus</span> {
            <span class="yang_kw">description</span>
               <span class="yang_str">"Indicates test-specific status data.
               The requirements for verification tests
               (section X.X) describes how the semantics
               of this structure are determined."</span>;
         }
      }  <span class="yang_cmt">// notification verifiedCommitStatus</span>

      <a name="verifiedCommitComplete.195"></a><span class="yang_kw">notification</span> <span class="yang_id">verifiedCommitComplete</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Contains the final status of the
            current verified commit procedure."</span>;
         <a name="status.200"></a><span class="yang_kw">leaf</span> <span class="yang_id">status</span> {
            <span class="yang_kw">type</span> <span class="yang_id">string</span>;
            <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Indicates the NETCONF error-tag value most
               closely associated with the test status.
               The string 'ok' is used to indicate that
               no errors have been detected."</span>;
            <span class="yang_kw">reference</span> <span class="yang_str">"RFC 4741bis, Appendix A"</span>;
         }
      }  <span class="yang_cmt">// notification verifiedCommitComplete</span>
   }  <span class="yang_cmt">// module verified-commit</span>
</pre>
</div>
</div>