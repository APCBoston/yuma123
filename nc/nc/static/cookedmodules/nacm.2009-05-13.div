
<div>
   <h1 class="yang">nacm.yang</h1>

   <ul id="nav">
      <li><a href="#">Typedefs</a>
         <ul>
            <li><a href="#NacmUserName.81">NacmUserName</a></li>
            <li><a href="#NacmRights.89">NacmRights</a></li>
            <li><a href="#NacmGroup.117">NacmGroup</a></li>
            <li><a href="#NacmAction.136">NacmAction</a></li>
         </ul>
      </li>
      <li><a href="#">Objects</a>
         <ul>
            <li class="daddy"><a href="#nacm.173">nacm</a>
               <ul>
                  <li><a href="#noRuleReadDefault.183">noRuleReadDefault</a></li>
                  <li><a href="#noRuleWriteDefault.192">noRuleWriteDefault</a></li>
                  <li><a href="#noRuleExecDefault.201">noRuleExecDefault</a></li>
                  <li class="daddy"><a href="#groups.210">groups</a>
                     <ul>
                        <li class="daddy"><a href="#group.214">group</a>
                           <ul>
                              <li><a href="#groupIdentity.219">groupIdentity</a></li>
                              <li><a href="#userName.225">userName</a></li>
                           </ul>
                        </li>
                     </ul>
                  </li>
                  <li class="daddy"><a href="#rules.235">rules</a>
                     <ul>
                        <li class="daddy"><a href="#moduleRule.337">moduleRule</a>
                           <ul>
                              <li><a href="#moduleName.351">moduleName</a></li>
                              <li><a href="#allowedRights.309">allowedRights</a></li>
                              <li><a href="#allowedGroup.318">allowedGroup</a></li>
                              <li><a href="#comment.328">comment</a></li>
                           </ul>
                        </li>
                        <li class="daddy"><a href="#rpcRule.362">rpcRule</a>
                           <ul>
                              <li><a href="#rpcModuleName.387">rpcModuleName</a></li>
                              <li><a href="#rpcName.395">rpcName</a></li>
                              <li><a href="#allowedRights.309">allowedRights</a></li>
                              <li><a href="#allowedGroup.318">allowedGroup</a></li>
                              <li><a href="#comment.328">comment</a></li>
                           </ul>
                        </li>
                        <li class="daddy"><a href="#dataRule.406">dataRule</a>
                           <ul>
                              <li><a href="#name.420">name</a></li>
                              <li><a href="#path.428">path</a></li>
                              <li><a href="#allowedRights.309">allowedRights</a></li>
                              <li><a href="#allowedGroup.318">allowedGroup</a></li>
                              <li><a href="#comment.328">comment</a></li>
                           </ul>
                        </li>
                     </ul>
                  </li>
               </ul>
            </li>
         </ul>
      </li>
   </ul>

<br />
<div class="yang">
<pre>

   <span class="yang_kw">module</span> <span class="yang_id">nacm</span> {

      <span class="yang_kw">yang-version</span> <span class="yang_str">1</span>;

      <span class="yang_kw">namespace</span> <span class="yang_str">"http://netconfcentral.com/ns/nacm"</span>;

      <span class="yang_kw">prefix</span> <span class="yang_str">"nacm"</span>;

      <span class="yang_kw">import</span> <a href="/modules/ncx">ncx</a> {
         <span class="yang_kw">prefix</span> <span class="yang_str">"ncx"</span>;
      }

      <span class="yang_kw">organization</span> <span class="yang_str">"Netconf Central"</span>;

      <span class="yang_kw">contact</span>
         <span class="yang_str">"Andy Bierman &lt;andy@netconfcentral.com&gt;."</span>;

      <span class="yang_kw">description</span>
         <span class="yang_str">"NETCONF Agent Access Control Model:
         
         1) Administrative Groups
            Group membership is configured by adding user names
            to the 'groups' table.  A user may belong to
            zero or more groups.  An extensible identityref
            object is used to specify the group name.
         
         2) Permissions
            Specific NETCONF protocol permissions are granted
            to particular administrative groups.  This is
            limited to three standard values: read, write, 
            and exec, using a bits leaf called 'allowedRights'.
         
         3) YANG Module Access
            Any RPC method or database node access
            within a specific XML namespace
            is controlled by the moduleRules list.
            If no rpcRule is found for a particular
            RPC operation, then the moduleRule list
            will be checked for a matching entry.
            If the requested XML namespace matches the
            namespace-uri of a configured YANG module
            then access to that module is limited
            by the specific allowedRights leaf configured in
            that entry.
         
         4) RPC Method Invocation
            In order to invoke a specific RPC method,
            the 'rpcRules' list, then the 'moduleRule' list
            is checked to see if the particular group has 
            'exec' rights.  If not, the 'noRuleDefault' leaf
            is checked for this requested RPC operation.
            If denied, the RPC operation is rejected with 
            an 'access-denied' error-tag, and no actions 
            are performed.  The standard operation 
            'close-session' is always allowed.
            The special user 'superuser' is allowed to invoke any
            RPC operation.
         
         5) Database access
            Once the RPC method access has been granted, the
            agent will check any internal database access,
            using the 'dataRules' table.  This is a user-ordered
            list of instance-identifier rules.  If no dataRule
            entries are found, then the the YANG module
            associated with the accessed data node will
            be checked in the moduleRules list, similar
            to step 3.  If no moduleRule entry is found,
            then step 6 is followed.
         
         6) No Rule Default
            If the object being accessed is tagged
            as ncx:secure or ncx_very-secure, then
            default access is 'denied',  Otherwise,
            the noRuleDefault leaf is used to permit or deny
            access when a specific rule is not found in
            the rpcRules or dataRules tables."</span>;

      <span class="yang_kw">revision</span> <span class="yang_str">"2009-05-13"</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Initial version of the rewrite.
            Preliminary!! Work-in-progress!!"</span>;
      }


      <a name="NacmUserName.81"></a><span class="yang_kw">typedef</span> <span class="yang_id">NacmUserName</span> {
         <span class="yang_kw">type</span> <span class="yang_id">string</span> {
            <span class="yang_kw">length</span> <span class="yang_str">"1..63"</span>;
            <span class="yang_kw">pattern</span> <span class="yang_str">'[a-z,A-Z][a-z,A-Z,0-9]{0,62}'</span>;
         }
         <span class="yang_kw">description</span> <span class="yang_str">"General Purpose User Name string."</span>;
      }

      <a name="NacmRights.89"></a><span class="yang_kw">typedef</span> <span class="yang_id">NacmRights</span> {
         <span class="yang_kw">type</span> <span class="yang_id">bits</span> {
            <span class="yang_kw">bit</span> <span class="yang_str">"read"</span> {
               <span class="yang_kw">position</span> <span class="yang_str">0</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Read access allowed to all specified data.
                  Any protocol operation or notification that
                  returns data to an application is a read 
                  operation."</span>;
            }
            <span class="yang_kw">bit</span> <span class="yang_str">"write"</span> {
               <span class="yang_kw">position</span> <span class="yang_str">1</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Write access allowed to all specified data.
                  Any protocol operation that alters a database
                  is a write operation."</span>;
            }
            <span class="yang_kw">bit</span> <span class="yang_str">"exec"</span> {
               <span class="yang_kw">position</span> <span class="yang_str">2</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"Execution access to the specified RPC operation.
                  Any RPC method invocation is an exec operation."</span>;
            }
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"NETCONF Access Rights; 
            These are individually assigned, not hierarchical."</span>;
      }

      <a name="NacmGroup.117"></a><span class="yang_kw">typedef</span> <span class="yang_id">NacmGroup</span> {
         <span class="yang_kw">type</span> <span class="yang_id">identityref</span> {
            <span class="yang_kw">base</span> <span class="yang_id"><a href="/modules/nacm/2009-05-13#nacmGroups.150">nacmGroups</a></span>;
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Type of administrative group that can be
            assigned to the user, and specified in
            an access control rule.
            
            The identityref data type is used to allow as 
            many groups to be added as needed.  There are
            three default groups defined here:
            
              superuser == root account
              admin == administrative account
              guest == guest account"</span>;
      }

      <a name="NacmAction.136"></a><span class="yang_kw">typedef</span> <span class="yang_id">NacmAction</span> {
         <span class="yang_kw">type</span> <span class="yang_id">enumeration</span> {
            <span class="yang_kw">enum</span> <span class="yang_str">"permit"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">0</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Requested action is permitted."</span>;
            }
            <span class="yang_kw">enum</span> <span class="yang_str">"deny"</span> {
               <span class="yang_kw">value</span> <span class="yang_str">1</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"Requested action is denied."</span>;
            }
         }
         <span class="yang_kw">description</span>
            <span class="yang_str">"Action taken by the agent when a particular
            rule matches."</span>;
      }

      <a name="nacmGroups.150"></a><span class="yang_kw">identity</span> <span class="yang_id">nacmGroups</span> {
         <span class="yang_kw">description</span>
            <span class="yang_str">"Root of all NETCONF Administrative Groups"</span>;
      }

      <a name="admin.155"></a><span class="yang_kw">identity</span> <span class="yang_id">admin</span> {
         <span class="yang_kw">base</span> <span class="yang_id"><a href="/modules/nacm/2009-05-13#nacmGroups.150">nacmGroups</a></span>;
         <span class="yang_kw">description</span> <span class="yang_str">"Administrator group."</span>;
      }

      <a name="monitor.161"></a><span class="yang_kw">identity</span> <span class="yang_id">monitor</span> {
         <span class="yang_kw">base</span> <span class="yang_id"><a href="/modules/nacm/2009-05-13#nacmGroups.150">nacmGroups</a></span>;
         <span class="yang_kw">description</span> <span class="yang_str">"Monitoring group."</span>;
      }

      <a name="guest.167"></a><span class="yang_kw">identity</span> <span class="yang_id">guest</span> {
         <span class="yang_kw">base</span> <span class="yang_id"><a href="/modules/nacm/2009-05-13#nacmGroups.150">nacmGroups</a></span>;
         <span class="yang_kw">description</span> <span class="yang_str">"Guest user group."</span>;
      }

      <a name="nacm.173"></a><span class="yang_kw">container</span> <span class="yang_id">nacm</span> {
         <span class="yang_kw">presence</span>
            <span class="yang_str">"An empty nacm container indicates that the NACM service
            is running, using all default parameters."</span>;
         <span class="yang_kw">config</span> <span class="yang_str">"true"</span>;
         <span class="yang_kw">description</span>
            <span class="yang_str">"Parameters for NETCONF Access Control Model."</span>;
         <a name="noRuleReadDefault.183"></a><span class="yang_kw">leaf</span> <span class="yang_id">noRuleReadDefault</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmAction.136">NacmAction</a></span>;
            <span class="yang_kw">default</span> <span class="yang_str">"permit"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Controls whether read access is granted if
               no appropriate rule is found for a
               particular read request."</span>;
         }

         <a name="noRuleWriteDefault.192"></a><span class="yang_kw">leaf</span> <span class="yang_id">noRuleWriteDefault</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmAction.136">NacmAction</a></span>;
            <span class="yang_kw">default</span> <span class="yang_str">"deny"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Controls whether write access is granted if
               no appropriate rule is found for a
               particular write request."</span>;
         }

         <a name="noRuleExecDefault.201"></a><span class="yang_kw">leaf</span> <span class="yang_id">noRuleExecDefault</span> {
            <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmAction.136">NacmAction</a></span>;
            <span class="yang_kw">default</span> <span class="yang_str">"permit"</span>;
            <span class="yang_kw">description</span>
               <span class="yang_str">"Controls whether exec access is granted if
               no appropriate rule is found for a
               particular RPC operation request."</span>;
         }

         <a name="groups.210"></a><span class="yang_kw">container</span> <span class="yang_id">groups</span> {
            <span class="yang_kw">description</span> <span class="yang_str">"NETCONF Access Control Group Table"</span>;
            <a name="group.214"></a><span class="yang_kw">list</span> <span class="yang_id">group</span> {
               <span class="yang_kw">key</span> "<a href="#groupIdentity.219">groupIdentity</a>";
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span> <span class="yang_str">"One NETCONF ACM Group Entry"</span>;
               <a name="groupIdentity.219"></a><span class="yang_kw">leaf</span> <span class="yang_id">groupIdentity</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmGroup.117">NacmGroup</a></span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Group identity associated with this entry."</span>;
               }

               <a name="userName.225"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">userName</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmUserName.81">NacmUserName</a></span>;
                  <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Each entry identifies the user name of 
                     a member of the group associated with 
                     this entry."</span>;
               }
            }  <span class="yang_cmt">// list group</span>
         }  <span class="yang_cmt">// container groups</span>

         <a name="rules.235"></a><span class="yang_kw">container</span> <span class="yang_id">rules</span> {
            <span class="yang_kw">description</span>
               <span class="yang_str">"NETCONF Access Control Rules Table.
               Processing model for RPC method acme:reset
               which touches database node /X/Y/Z:
               
               Find an 'rpcRule' or 'moduleRule' for the 
               specified RPC operation, and allow invocation
               access if the 'allowedRights' leaf includes
               the 'exec' bit.
               
               If no rule is found, then the 'noRuleDefault'
               parameter is usually used to allow or deny access.
               (See note 3 and note 4.)
               
               If RPC operation invocation permission is
               granted, then the agent must also make sure
               that any database data access (in the candidate
               or running database) is also checked
               in the 'dataRules' section.
               
               The module rules are evaluated for data access
               as the requested operation is being processed.
               If a specific module is requested which matches
               a rule in the moduleRules list, then it is
               applied.  This is done before the dataRules list
               is checked.
               
               The data rules are evaluated in the order they
               are entered by the user.  If the RPC operation
               internal access is a read operation, and
               a matching rule contains the 'read' bit
               then database access permission is granted.
               If the RPC operation internal access is a write
               operation, and a matching rule contains the 
               'write' bit, then database access permission 
               is granted.
               
               If no data rule is found, then the 'module rules'
               are evaluated again, for access to the module
               associated with the data node.
               
               If no module rule is found, then the 'noRuleDefault'
               parameter is usually used to allow or deny access.
               (See note 3 and note 4.)
               
               Note 1: Access to the 'close-session'
               RPC operation is always granted, even if
               no rule exists controlling its access.
               
               Note 2: Access is always granted to the
               special user named 'superuser', even if not
               yet configured in the 'groups' container.
               This allows bootstrap and ACM repair
               but as always, the 'superuser' account
               needs to be used with extreme caution.
               
               Note 3: Write or execution access to data
               or RPC methods tagged as 'ncx:secure'
               will only be granted to the 'superuser' user
               if no rule is found.  The 'noRuleDefault'
               leaf will be ignored in this case.
               
               Note 4: Read, write or execution access to data
               or RPC methods tagged as 'ncx:very-secure'
               will only be granted to the 'superuser' user
               if no rule is found.  The 'noRuleDefault'
               leaf will be ignored in this case.
               
               Note 5: A traditional 'deny' rule is created by
               simply omitting bits from the allowedRights
               for the specific data and administrative groups."</span>;
            <a name="moduleRule.337"></a><span class="yang_kw">list</span> <span class="yang_id">moduleRule</span> {
               <span class="yang_kw">key</span> "<a href="#moduleName.351">moduleName</a> <a href="#allowedRights.309">allowedRights</a>";
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"One Module Access Rule.
                  A module rule is considered a match if
                  the XML namespace for the specified module
                  name matches the XML namespace used within
                  a NETCONF PDU, and the administrative group
                  associated with the requestor session is
                  specified in the 'allowedGroups' "</span>;
               <a name="moduleName.351"></a><span class="yang_kw">leaf</span> <span class="yang_id">moduleName</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <span class="yang_kw">length</span> <span class="yang_str">"1..max"</span>;
                  }
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Name of the YANG module associated with this rule."</span>;
               }

               <a name="allowedRights.309"></a><span class="yang_kw">leaf</span> <span class="yang_id">allowedRights</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmRights.89">NacmRights</a></span>;
                  <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"List of access rights granted to
                     specified administrative groups for the
                     content specified by the associated path."</span>;
               }

               <a name="allowedGroup.318"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">allowedGroup</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmGroup.117">NacmGroup</a></span>;
                  <span class="yang_kw">min-elements</span> <span class="yang_str">"1"</span>;
                  <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"List of administrative groups which will be
                     assigned the associated access rights
                     for the content specified by the associated
                     path."</span>;
               }

               <a name="comment.328"></a><span class="yang_kw">leaf</span> <span class="yang_id">comment</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <span class="yang_kw">length</span> <span class="yang_str">"0..4095"</span>;
                  }
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"A textual description of the access rule."</span>;
               }
            }  <span class="yang_cmt">// list moduleRule</span>

            <a name="rpcRule.362"></a><span class="yang_kw">list</span> <span class="yang_id">rpcRule</span> {
               <span class="yang_kw">key</span> "<a href="#rpcModuleName.387">rpcModuleName</a> <a href="#rpcName.395">rpcName</a> <a href="#allowedRights.309">allowedRights</a>";
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"One RPC Method Access Rule.
                  An RPC rule is considered a match if
                  the module name of the requested RPC
                  operation matches 'rpcModuleName',
                  the requested RPC operation matches
                  'rpcName', and the administrative group
                  associated with the requesting session
                  is listed in one of the 'allowedGroup'
                  leaf-list objects."</span>;
               <a name="rpcModuleName.387"></a><span class="yang_kw">leaf</span> <span class="yang_id">rpcModuleName</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <span class="yang_kw">length</span> <span class="yang_str">"1..max"</span>;
                  }
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Name of the YANG module defining this RPC method."</span>;
               }

               <a name="rpcName.395"></a><span class="yang_kw">leaf</span> <span class="yang_id">rpcName</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <span class="yang_kw">length</span> <span class="yang_str">"1..max"</span>;
                  }
                  <span class="yang_kw">description</span> <span class="yang_str">"Name of the RPC method."</span>;
               }

               <a name="allowedRights.309"></a><span class="yang_kw">leaf</span> <span class="yang_id">allowedRights</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmRights.89">NacmRights</a></span>;
                  <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"List of access rights granted to
                     specified administrative groups for the
                     content specified by the associated path."</span>;
               }

               <a name="allowedGroup.318"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">allowedGroup</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmGroup.117">NacmGroup</a></span>;
                  <span class="yang_kw">min-elements</span> <span class="yang_str">"1"</span>;
                  <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"List of administrative groups which will be
                     assigned the associated access rights
                     for the content specified by the associated
                     path."</span>;
               }

               <a name="comment.328"></a><span class="yang_kw">leaf</span> <span class="yang_id">comment</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <span class="yang_kw">length</span> <span class="yang_str">"0..4095"</span>;
                  }
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"A textual description of the access rule."</span>;
               }
            }  <span class="yang_cmt">// list rpcRule</span>

            <a name="dataRule.406"></a><span class="yang_kw">list</span> <span class="yang_id">dataRule</span> {
               <span class="yang_kw">key</span> "<a href="#name.420">name</a>";
               <span class="yang_kw">ordered-by</span> <span class="yang_str">"user"</span>;
               <span class="yang_kw">description</span>
                  <span class="yang_str">"One Data Access Control Rule
                  A data rule is considered to match when
                  the path expression identifies
                  the same node that is being accessed
                  in the NETCONF database, and the administrative
                  group associated with the session is identified
                  in one of the 'allowedGroup' leaf-list entries."</span>;
               <a name="name.420"></a><span class="yang_kw">leaf</span> <span class="yang_id">name</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <span class="yang_kw">length</span> <span class="yang_str">"1..1023"</span>;
                  }
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Arbitrary name assigned to this data rule."</span>;
               }

               <a name="path.428"></a><span class="yang_kw">leaf</span> <span class="yang_id">path</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <a href="/modules/ncx/2009-04-10#schema-instance.502">ncx:schema-instance</a>;
                  }
                  <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"Instance identifier associated with
                     the configuration or state data
                     controlled by this rule.
                     
                     Configuration data or state data
                     instance identifiers start with
                     a top-level data node.
                     A complete instance identifier is 
                     required for this type of path value.
                     
                     The special value '/' refers to all
                     possible database contents."</span>;
               }

               <a name="allowedRights.309"></a><span class="yang_kw">leaf</span> <span class="yang_id">allowedRights</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmRights.89">NacmRights</a></span>;
                  <span class="yang_kw">mandatory</span> <span class="yang_str">"true"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"List of access rights granted to
                     specified administrative groups for the
                     content specified by the associated path."</span>;
               }

               <a name="allowedGroup.318"></a><span class="yang_kw">leaf-list</span> <span class="yang_id">allowedGroup</span> {
                  <span class="yang_kw">type</span> <span class="yang_id"><a href="#NacmGroup.117">NacmGroup</a></span>;
                  <span class="yang_kw">min-elements</span> <span class="yang_str">"1"</span>;
                  <span class="yang_kw">ordered-by</span> <span class="yang_str">"system"</span>;
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"List of administrative groups which will be
                     assigned the associated access rights
                     for the content specified by the associated
                     path."</span>;
               }

               <a name="comment.328"></a><span class="yang_kw">leaf</span> <span class="yang_id">comment</span> {
                  <span class="yang_kw">type</span> <span class="yang_id">string</span> {
                     <span class="yang_kw">length</span> <span class="yang_str">"0..4095"</span>;
                  }
                  <span class="yang_kw">description</span>
                     <span class="yang_str">"A textual description of the access rule."</span>;
               }
            }  <span class="yang_cmt">// list dataRule</span>
         }  <span class="yang_cmt">// container rules</span>
         <a href="/modules/ncx/2009-04-10#very-secure.489">ncx:very-secure</a>;
      }  <span class="yang_cmt">// container nacm</span>
   }  <span class="yang_cmt">// module nacm</span>
</pre>
</div>
</div>